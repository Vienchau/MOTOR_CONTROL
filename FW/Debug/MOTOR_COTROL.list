
MOTOR_COTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006c40  08006c40  00016c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d00  08006d00  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d00  08006d00  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d00  08006d00  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  2000007c  08006d84  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc8  08006d84  00020bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0e7  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002623  00000000  00000000  0002d18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00030500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c75  00000000  00000000  00031148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d1d  00000000  00000000  00049dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b386  00000000  00000000  0005aada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5e60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000402c  00000000  00000000  000e5eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c24 	.word	0x08006c24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08006c24 	.word	0x08006c24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <__aeabi_f2uiz>:
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	d20e      	bcs.n	80010ee <__aeabi_f2uiz+0x22>
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30b      	bcc.n	80010ee <__aeabi_f2uiz+0x22>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d409      	bmi.n	80010f4 <__aeabi_f2uiz+0x28>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2uiz+0x32>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d102      	bne.n	8001104 <__aeabi_f2uiz+0x38>
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001102:	4770      	bx	lr
 8001104:	f04f 0000 	mov.w	r0, #0
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_GPIO_Init+0x90>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <MX_GPIO_Init+0x90>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_GPIO_Init+0x90>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_GPIO_Init+0x90>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <MX_GPIO_Init+0x90>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_GPIO_Init+0x90>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_GPIO_Init+0x90>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <MX_GPIO_Init+0x90>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_GPIO_Init+0x90>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_GPIO_Init+0x94>)
 8001170:	f001 ffc8 	bl	8003104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2302      	movs	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_GPIO_Init+0x94>)
 800118e:	f001 fe35 	bl	8002dfc <HAL_GPIO_Init>

}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f001 fbe2 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 fbcc 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f7ff ffaa 	bl	800110c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011b8:	f001 f98c 	bl	80024d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011bc:	f001 f9d6 	bl	800256c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011c0:	f001 fa2e 	bl	8002620 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80011c4:	f001 fb32 	bl	800282c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 80011c8:	f001 f80c 	bl	80021e4 <SerialInit>
  MotorInit();
 80011cc:	f000 fc7a 	bl	8001ac4 <MotorInit>
  tProcess = NONE;
 80011d0:	4bae      	ldr	r3, [pc, #696]	; (800148c <main+0x2e8>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
///TESET
    /* USER CODE BEGIN 3 */
	  if(g_bDataAvailable == true)
 80011d6:	4bae      	ldr	r3, [pc, #696]	; (8001490 <main+0x2ec>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d04d      	beq.n	800127a <main+0xd6>
	      {
	        if(StrCompare(g_strCommand, (uint8_t*)"SPID", 4))
 80011de:	2204      	movs	r2, #4
 80011e0:	49ac      	ldr	r1, [pc, #688]	; (8001494 <main+0x2f0>)
 80011e2:	48ad      	ldr	r0, [pc, #692]	; (8001498 <main+0x2f4>)
 80011e4:	f000 ffda 	bl	800219c <StrCompare>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <main+0x52>
	        {
	          tProcess = SPID;
 80011ee:	4ba7      	ldr	r3, [pc, #668]	; (800148c <main+0x2e8>)
 80011f0:	2202      	movs	r2, #2
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e03e      	b.n	8001274 <main+0xd0>
	        }
	        else if(StrCompare(g_strCommand, (uint8_t*)"CTUN", 4))
 80011f6:	2204      	movs	r2, #4
 80011f8:	49a8      	ldr	r1, [pc, #672]	; (800149c <main+0x2f8>)
 80011fa:	48a7      	ldr	r0, [pc, #668]	; (8001498 <main+0x2f4>)
 80011fc:	f000 ffce 	bl	800219c <StrCompare>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <main+0x6a>
	        {
	          tProcess = CTUN_RES;
 8001206:	4ba1      	ldr	r3, [pc, #644]	; (800148c <main+0x2e8>)
 8001208:	2204      	movs	r2, #4
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e032      	b.n	8001274 <main+0xd0>
	        }
	        else if(StrCompare(g_strCommand, (uint8_t*)"GPID", 4))
 800120e:	2204      	movs	r2, #4
 8001210:	49a3      	ldr	r1, [pc, #652]	; (80014a0 <main+0x2fc>)
 8001212:	48a1      	ldr	r0, [pc, #644]	; (8001498 <main+0x2f4>)
 8001214:	f000 ffc2 	bl	800219c <StrCompare>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <main+0x82>
	        {
	          tProcess = GPID;
 800121e:	4b9b      	ldr	r3, [pc, #620]	; (800148c <main+0x2e8>)
 8001220:	2205      	movs	r2, #5
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e026      	b.n	8001274 <main+0xd0>
	        }
	        else if(StrCompare(g_strCommand, (uint8_t*)"CSET", 4))
 8001226:	2204      	movs	r2, #4
 8001228:	499e      	ldr	r1, [pc, #632]	; (80014a4 <main+0x300>)
 800122a:	489b      	ldr	r0, [pc, #620]	; (8001498 <main+0x2f4>)
 800122c:	f000 ffb6 	bl	800219c <StrCompare>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <main+0x9a>
	        {
	          tProcess = CSET;
 8001236:	4b95      	ldr	r3, [pc, #596]	; (800148c <main+0x2e8>)
 8001238:	2206      	movs	r2, #6
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e01a      	b.n	8001274 <main+0xd0>
	        }
	        else if(StrCompare(g_strCommand, (uint8_t*)"CRUN", 4))
 800123e:	2204      	movs	r2, #4
 8001240:	4999      	ldr	r1, [pc, #612]	; (80014a8 <main+0x304>)
 8001242:	4895      	ldr	r0, [pc, #596]	; (8001498 <main+0x2f4>)
 8001244:	f000 ffaa 	bl	800219c <StrCompare>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <main+0xb2>
	        {
	          tProcess = CRUN_RES;
 800124e:	4b8f      	ldr	r3, [pc, #572]	; (800148c <main+0x2e8>)
 8001250:	2208      	movs	r2, #8
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e00e      	b.n	8001274 <main+0xd0>
	        }
	        else if(StrCompare(g_strCommand, (uint8_t*)"GRMS", 4))
 8001256:	2204      	movs	r2, #4
 8001258:	4994      	ldr	r1, [pc, #592]	; (80014ac <main+0x308>)
 800125a:	488f      	ldr	r0, [pc, #572]	; (8001498 <main+0x2f4>)
 800125c:	f000 ff9e 	bl	800219c <StrCompare>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <main+0xca>
	        {
	          tProcess = GRMS;
 8001266:	4b89      	ldr	r3, [pc, #548]	; (800148c <main+0x2e8>)
 8001268:	2209      	movs	r2, #9
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e002      	b.n	8001274 <main+0xd0>
	        }
	        else
	        {
	          tProcess = NONE;
 800126e:	4b87      	ldr	r3, [pc, #540]	; (800148c <main+0x2e8>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
	        }
	        g_bDataAvailable = false;
 8001274:	4b86      	ldr	r3, [pc, #536]	; (8001490 <main+0x2ec>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	      }

	      switch(tProcess)
 800127a:	4b84      	ldr	r3, [pc, #528]	; (800148c <main+0x2e8>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	2b08      	cmp	r3, #8
 8001282:	d8a8      	bhi.n	80011d6 <main+0x32>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <main+0xe8>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	080012b1 	.word	0x080012b1
 8001290:	080012bf 	.word	0x080012bf
 8001294:	080011d7 	.word	0x080011d7
 8001298:	080013c7 	.word	0x080013c7
 800129c:	080013d9 	.word	0x080013d9
 80012a0:	080014e5 	.word	0x080014e5
 80012a4:	08001821 	.word	0x08001821
 80012a8:	080017f3 	.word	0x080017f3
 80012ac:	0800182d 	.word	0x0800182d
	      {
	        case NONE:
	          SerialAcceptReceive();
 80012b0:	f000 ffa6 	bl	8002200 <SerialAcceptReceive>
	          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <main+0x30c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34
	          break;
 80012bc:	e326      	b.n	800190c <main+0x768>
	        case SPID:
	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80012be:	4a7d      	ldr	r2, [pc, #500]	; (80014b4 <main+0x310>)
 80012c0:	497d      	ldr	r1, [pc, #500]	; (80014b8 <main+0x314>)
 80012c2:	4875      	ldr	r0, [pc, #468]	; (8001498 <main+0x2f4>)
 80012c4:	f000 ffaa 	bl	800221c <SerialWriteComm>
	          g_nCmdPulse = 0;
 80012c8:	4b7c      	ldr	r3, [pc, #496]	; (80014bc <main+0x318>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
	          PIDReset(&tPIDControl);
 80012ce:	487c      	ldr	r0, [pc, #496]	; (80014c0 <main+0x31c>)
 80012d0:	f000 fe96 	bl	8002000 <PIDReset>
	          __HAL_TIM_SetCounter(&htim4, 32768);
 80012d4:	4b7b      	ldr	r3, [pc, #492]	; (80014c4 <main+0x320>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
	          g_nIndex = 0;
 80012de:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <main+0x324>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]

	          //get PID params
	          tPIDControl.dKp = (float)g_nData[0] + (float)g_nData[1]/10;
 80012e4:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <main+0x310>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fcab 	bl	8000c44 <__aeabi_ui2f>
 80012ee:	4604      	mov	r4, r0
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <main+0x310>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fca5 	bl	8000c44 <__aeabi_ui2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4973      	ldr	r1, [pc, #460]	; (80014cc <main+0x328>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fdac 	bl	8000e5c <__aeabi_fdiv>
 8001304:	4603      	mov	r3, r0
 8001306:	4619      	mov	r1, r3
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fbeb 	bl	8000ae4 <__addsf3>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b6b      	ldr	r3, [pc, #428]	; (80014c0 <main+0x31c>)
 8001314:	601a      	str	r2, [r3, #0]
	          tPIDControl.dKi = (float)g_nData[2] + (float)g_nData[3]/10;
 8001316:	4b67      	ldr	r3, [pc, #412]	; (80014b4 <main+0x310>)
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fc92 	bl	8000c44 <__aeabi_ui2f>
 8001320:	4604      	mov	r4, r0
 8001322:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <main+0x310>)
 8001324:	78db      	ldrb	r3, [r3, #3]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fc8c 	bl	8000c44 <__aeabi_ui2f>
 800132c:	4603      	mov	r3, r0
 800132e:	4967      	ldr	r1, [pc, #412]	; (80014cc <main+0x328>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fd93 	bl	8000e5c <__aeabi_fdiv>
 8001336:	4603      	mov	r3, r0
 8001338:	4619      	mov	r1, r3
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fbd2 	bl	8000ae4 <__addsf3>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <main+0x31c>)
 8001346:	605a      	str	r2, [r3, #4]
	          tPIDControl.dKd = (float)g_nData[4] + (float)g_nData[5]/(pow((float)10,(float)g_nData[6]));
 8001348:	4b5a      	ldr	r3, [pc, #360]	; (80014b4 <main+0x310>)
 800134a:	791b      	ldrb	r3, [r3, #4]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fc79 	bl	8000c44 <__aeabi_ui2f>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f867 	bl	8000428 <__aeabi_f2d>
 800135a:	4604      	mov	r4, r0
 800135c:	460d      	mov	r5, r1
 800135e:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <main+0x310>)
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fc6e 	bl	8000c44 <__aeabi_ui2f>
 8001368:	4603      	mov	r3, r0
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f85c 	bl	8000428 <__aeabi_f2d>
 8001370:	4680      	mov	r8, r0
 8001372:	4689      	mov	r9, r1
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <main+0x310>)
 8001376:	799b      	ldrb	r3, [r3, #6]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc63 	bl	8000c44 <__aeabi_ui2f>
 800137e:	4603      	mov	r3, r0
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f851 	bl	8000428 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	f04f 0000 	mov.w	r0, #0
 800138e:	4950      	ldr	r1, [pc, #320]	; (80014d0 <main+0x32c>)
 8001390:	f004 fd64 	bl	8005e5c <pow>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4640      	mov	r0, r8
 800139a:	4649      	mov	r1, r9
 800139c:	f7ff f9c6 	bl	800072c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4620      	mov	r0, r4
 80013a6:	4629      	mov	r1, r5
 80013a8:	f7fe fee0 	bl	800016c <__adddf3>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb40 	bl	8000a38 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a41      	ldr	r2, [pc, #260]	; (80014c0 <main+0x31c>)
 80013bc:	6093      	str	r3, [r2, #8]

	          tProcess = NONE;
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <main+0x2e8>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
	          break;
 80013c4:	e2a2      	b.n	800190c <main+0x768>
	        case CTUN_RES:
	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80013c6:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <main+0x310>)
 80013c8:	493b      	ldr	r1, [pc, #236]	; (80014b8 <main+0x314>)
 80013ca:	4833      	ldr	r0, [pc, #204]	; (8001498 <main+0x2f4>)
 80013cc:	f000 ff26 	bl	800221c <SerialWriteComm>
	          tProcess = CTUN;
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <main+0x2e8>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	701a      	strb	r2, [r3, #0]
	          break;
 80013d6:	e299      	b.n	800190c <main+0x768>
	        case CTUN:
	          break;
	        case GPID:
	          for(int index = 0; index < (g_nIndex -1); index ++)
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	e046      	b.n	800146c <main+0x2c8>
	          {
	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <main+0x2f4>)
 80013e0:	493c      	ldr	r1, [pc, #240]	; (80014d4 <main+0x330>)
 80013e2:	483d      	ldr	r0, [pc, #244]	; (80014d8 <main+0x334>)
 80013e4:	f004 f9ba 	bl	800575c <siprintf>
	            memset(g_nTxOption, '\0', 3);
 80013e8:	2203      	movs	r2, #3
 80013ea:	2100      	movs	r1, #0
 80013ec:	483b      	ldr	r0, [pc, #236]	; (80014dc <main+0x338>)
 80013ee:	f004 f8c1 	bl	8005574 <memset>
	            g_nTxData[6] = (tPIDControl.nSampleTuningPID[index]&0xFF00) >>8;
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <main+0x31c>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3308      	adds	r3, #8
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	889b      	ldrh	r3, [r3, #4]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <main+0x33c>)
 8001406:	719a      	strb	r2, [r3, #6]
	            g_nTxData[7] = (tPIDControl.nSampleTuningPID[index]&0xFF);
 8001408:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <main+0x31c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3308      	adds	r3, #8
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	889b      	ldrh	r3, [r3, #4]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <main+0x33c>)
 8001418:	71da      	strb	r2, [r3, #7]
	            g_nTxData[2] = (index&0xFF00) >>8;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	121b      	asrs	r3, r3, #8
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <main+0x33c>)
 8001422:	709a      	strb	r2, [r3, #2]
	            g_nTxData[3] = (index&0xFF);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <main+0x33c>)
 800142a:	70da      	strb	r2, [r3, #3]
	            g_nTxData[0] = 0;
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <main+0x33c>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
	            g_nTxData[1] = 199;
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <main+0x33c>)
 8001434:	22c7      	movs	r2, #199	; 0xc7
 8001436:	705a      	strb	r2, [r3, #1]

	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <main+0x33c>)
 800143a:	4928      	ldr	r1, [pc, #160]	; (80014dc <main+0x338>)
 800143c:	4826      	ldr	r0, [pc, #152]	; (80014d8 <main+0x334>)
 800143e:	f000 feed 	bl	800221c <SerialWriteComm>
	            memset(g_strTxCommand, '\0', 4);
 8001442:	2204      	movs	r2, #4
 8001444:	2100      	movs	r1, #0
 8001446:	4824      	ldr	r0, [pc, #144]	; (80014d8 <main+0x334>)
 8001448:	f004 f894 	bl	8005574 <memset>
	            memset(g_nTxOption, '\0', 3);
 800144c:	2203      	movs	r2, #3
 800144e:	2100      	movs	r1, #0
 8001450:	4822      	ldr	r0, [pc, #136]	; (80014dc <main+0x338>)
 8001452:	f004 f88f 	bl	8005574 <memset>
	            memset(g_nTxData, '\0', 8);
 8001456:	2208      	movs	r2, #8
 8001458:	2100      	movs	r1, #0
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <main+0x33c>)
 800145c:	f004 f88a 	bl	8005574 <memset>

	            HAL_Delay(30);
 8001460:	201e      	movs	r0, #30
 8001462:	f001 fae9 	bl	8002a38 <HAL_Delay>
	          for(int index = 0; index < (g_nIndex -1); index ++)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3301      	adds	r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <main+0x324>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbb2      	blt.n	80013de <main+0x23a>
	          }
	          g_bDataAvailable = false;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <main+0x2ec>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	          SerialAcceptReceive();
 800147e:	f000 febf 	bl	8002200 <SerialAcceptReceive>
	          tProcess = NONE;
 8001482:	4b02      	ldr	r3, [pc, #8]	; (800148c <main+0x2e8>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
	          break;
 8001488:	e240      	b.n	800190c <main+0x768>
 800148a:	bf00      	nop
 800148c:	200000a8 	.word	0x200000a8
 8001490:	20000a90 	.word	0x20000a90
 8001494:	08006c40 	.word	0x08006c40
 8001498:	20000a80 	.word	0x20000a80
 800149c:	08006c48 	.word	0x08006c48
 80014a0:	08006c50 	.word	0x08006c50
 80014a4:	08006c58 	.word	0x08006c58
 80014a8:	08006c60 	.word	0x08006c60
 80014ac:	08006c68 	.word	0x08006c68
 80014b0:	20000ae0 	.word	0x20000ae0
 80014b4:	20000a88 	.word	0x20000a88
 80014b8:	20000a84 	.word	0x20000a84
 80014bc:	20000a60 	.word	0x20000a60
 80014c0:	200000ac 	.word	0x200000ac
 80014c4:	20000b28 	.word	0x20000b28
 80014c8:	20000a64 	.word	0x20000a64
 80014cc:	41200000 	.word	0x41200000
 80014d0:	40240000 	.word	0x40240000
 80014d4:	08006c70 	.word	0x08006c70
 80014d8:	20000098 	.word	0x20000098
 80014dc:	2000009c 	.word	0x2000009c
 80014e0:	200000a0 	.word	0x200000a0
	        case CSET:
	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80014e4:	4a9e      	ldr	r2, [pc, #632]	; (8001760 <main+0x5bc>)
 80014e6:	499f      	ldr	r1, [pc, #636]	; (8001764 <main+0x5c0>)
 80014e8:	489f      	ldr	r0, [pc, #636]	; (8001768 <main+0x5c4>)
 80014ea:	f000 fe97 	bl	800221c <SerialWriteComm>

	          PIDReset(&tPIDControl);
 80014ee:	489f      	ldr	r0, [pc, #636]	; (800176c <main+0x5c8>)
 80014f0:	f000 fd86 	bl	8002000 <PIDReset>
	          g_nActPulse = 0;
 80014f4:	4b9e      	ldr	r3, [pc, #632]	; (8001770 <main+0x5cc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
	          g_nCmdPulse = 0 ;
 80014fa:	4b9e      	ldr	r3, [pc, #632]	; (8001774 <main+0x5d0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

	          //Get Pmax, Vmax, Amax,
	          tProfile.dAccelMax = (float)((g_nData[2]>>4) *4096) + (float)((g_nData[2] & 0x0F) *256) + (float)((g_nData[3] >> 4)*16) + (float)((g_nData[3]&0x0F)*1);
 8001500:	4b97      	ldr	r3, [pc, #604]	; (8001760 <main+0x5bc>)
 8001502:	789b      	ldrb	r3, [r3, #2]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	b2db      	uxtb	r3, r3
 8001508:	031b      	lsls	r3, r3, #12
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fb9e 	bl	8000c4c <__aeabi_i2f>
 8001510:	4604      	mov	r4, r0
 8001512:	4b93      	ldr	r3, [pc, #588]	; (8001760 <main+0x5bc>)
 8001514:	789b      	ldrb	r3, [r3, #2]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fb95 	bl	8000c4c <__aeabi_i2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4619      	mov	r1, r3
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fadc 	bl	8000ae4 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	461c      	mov	r4, r3
 8001530:	4b8b      	ldr	r3, [pc, #556]	; (8001760 <main+0x5bc>)
 8001532:	78db      	ldrb	r3, [r3, #3]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	b2db      	uxtb	r3, r3
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb86 	bl	8000c4c <__aeabi_i2f>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff facd 	bl	8000ae4 <__addsf3>
 800154a:	4603      	mov	r3, r0
 800154c:	461c      	mov	r4, r3
 800154e:	4b84      	ldr	r3, [pc, #528]	; (8001760 <main+0x5bc>)
 8001550:	78db      	ldrb	r3, [r3, #3]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fb78 	bl	8000c4c <__aeabi_i2f>
 800155c:	4603      	mov	r3, r0
 800155e:	4619      	mov	r1, r3
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff fabf 	bl	8000ae4 <__addsf3>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b83      	ldr	r3, [pc, #524]	; (8001778 <main+0x5d4>)
 800156c:	601a      	str	r2, [r3, #0]
	          tProfile.dVelMax = (float)((g_nData[4]>>4) *4096) + (float)((g_nData[4] & 0x0F) *256) + (float)((g_nData[5] >> 4)*16) + (float)((g_nData[5]&0x0F)*1);
 800156e:	4b7c      	ldr	r3, [pc, #496]	; (8001760 <main+0x5bc>)
 8001570:	791b      	ldrb	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	b2db      	uxtb	r3, r3
 8001576:	031b      	lsls	r3, r3, #12
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fb67 	bl	8000c4c <__aeabi_i2f>
 800157e:	4604      	mov	r4, r0
 8001580:	4b77      	ldr	r3, [pc, #476]	; (8001760 <main+0x5bc>)
 8001582:	791b      	ldrb	r3, [r3, #4]
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb5e 	bl	8000c4c <__aeabi_i2f>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff faa5 	bl	8000ae4 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	461c      	mov	r4, r3
 800159e:	4b70      	ldr	r3, [pc, #448]	; (8001760 <main+0x5bc>)
 80015a0:	795b      	ldrb	r3, [r3, #5]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fb4f 	bl	8000c4c <__aeabi_i2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4620      	mov	r0, r4
 80015b4:	f7ff fa96 	bl	8000ae4 <__addsf3>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461c      	mov	r4, r3
 80015bc:	4b68      	ldr	r3, [pc, #416]	; (8001760 <main+0x5bc>)
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb41 	bl	8000c4c <__aeabi_i2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fa88 	bl	8000ae4 <__addsf3>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b67      	ldr	r3, [pc, #412]	; (8001778 <main+0x5d4>)
 80015da:	605a      	str	r2, [r3, #4]
	          tProfile.dPosMax = (float)((g_nData[6]>>4) *4096) + (float)((g_nData[6] & 0x0F) *256) + (float)((g_nData[7] >> 4)*16) + (float)((g_nData[7]&0x0F)*1);
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <main+0x5bc>)
 80015de:	799b      	ldrb	r3, [r3, #6]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	031b      	lsls	r3, r3, #12
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb30 	bl	8000c4c <__aeabi_i2f>
 80015ec:	4604      	mov	r4, r0
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <main+0x5bc>)
 80015f0:	799b      	ldrb	r3, [r3, #6]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fb27 	bl	8000c4c <__aeabi_i2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fa6e 	bl	8000ae4 <__addsf3>
 8001608:	4603      	mov	r3, r0
 800160a:	461c      	mov	r4, r3
 800160c:	4b54      	ldr	r3, [pc, #336]	; (8001760 <main+0x5bc>)
 800160e:	79db      	ldrb	r3, [r3, #7]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	b2db      	uxtb	r3, r3
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb18 	bl	8000c4c <__aeabi_i2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fa5f 	bl	8000ae4 <__addsf3>
 8001626:	4603      	mov	r3, r0
 8001628:	461c      	mov	r4, r3
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <main+0x5bc>)
 800162c:	79db      	ldrb	r3, [r3, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb0a 	bl	8000c4c <__aeabi_i2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fa51 	bl	8000ae4 <__addsf3>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <main+0x5d4>)
 8001648:	609a      	str	r2, [r3, #8]

	          //Calculate params for trapezoidal speed
	          tProfile.dA1 = 0.5f * tProfile.dAccelMax;
 800164a:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <main+0x5d4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb4e 	bl	8000cf4 <__aeabi_fmul>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <main+0x5d4>)
 800165e:	60da      	str	r2, [r3, #12]
	          tProfile.dA2 = tProfile.dVelMax;
 8001660:	4b45      	ldr	r3, [pc, #276]	; (8001778 <main+0x5d4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a44      	ldr	r2, [pc, #272]	; (8001778 <main+0x5d4>)
 8001666:	6113      	str	r3, [r2, #16]
	          tProfile.dB2 = -0.5f * tProfile.dVelMax * tProfile.dVelMax / tProfile.dAccelMax;
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <main+0x5d4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb3f 	bl	8000cf4 <__aeabi_fmul>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <main+0x5d4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4619      	mov	r1, r3
 8001680:	4610      	mov	r0, r2
 8001682:	f7ff fb37 	bl	8000cf4 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <main+0x5d4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4610      	mov	r0, r2
 8001692:	f7ff fbe3 	bl	8000e5c <__aeabi_fdiv>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <main+0x5d4>)
 800169c:	615a      	str	r2, [r3, #20]
	          tProfile.dA3 = -0.5f * tProfile.dAccelMax;
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <main+0x5d4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fb24 	bl	8000cf4 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <main+0x5d4>)
 80016b2:	619a      	str	r2, [r3, #24]
	          tProfile.dB3 = tProfile.dPosMax * tProfile.dAccelMax / tProfile.dVelMax + tProfile.dVelMax;
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <main+0x5d4>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <main+0x5d4>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb18 	bl	8000cf4 <__aeabi_fmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <main+0x5d4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4610      	mov	r0, r2
 80016d0:	f7ff fbc4 	bl	8000e5c <__aeabi_fdiv>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <main+0x5d4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f7ff fa00 	bl	8000ae4 <__addsf3>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <main+0x5d4>)
 80016ea:	61da      	str	r2, [r3, #28]
	          tProfile.dC3 = -0.5f * tProfile.dPosMax*tProfile.dPosMax*tProfile.dAccelMax/ (tProfile.dVelMax * tProfile.dVelMax) - 0.5f *tProfile.dVelMax * tProfile.dVelMax/tProfile.dAccelMax;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <main+0x5d4>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fafd 	bl	8000cf4 <__aeabi_fmul>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <main+0x5d4>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff faf5 	bl	8000cf4 <__aeabi_fmul>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <main+0x5d4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff faed 	bl	8000cf4 <__aeabi_fmul>
 800171a:	4603      	mov	r3, r0
 800171c:	461c      	mov	r4, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <main+0x5d4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <main+0x5d4>)
 8001724:	6852      	ldr	r2, [r2, #4]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fae3 	bl	8000cf4 <__aeabi_fmul>
 800172e:	4603      	mov	r3, r0
 8001730:	4619      	mov	r1, r3
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff fb92 	bl	8000e5c <__aeabi_fdiv>
 8001738:	4603      	mov	r3, r0
 800173a:	461c      	mov	r4, r3
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <main+0x5d4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fad5 	bl	8000cf4 <__aeabi_fmul>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <main+0x5d4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4619      	mov	r1, r3
 8001754:	4610      	mov	r0, r2
 8001756:	f7ff facd 	bl	8000cf4 <__aeabi_fmul>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	e00d      	b.n	800177c <main+0x5d8>
 8001760:	20000a88 	.word	0x20000a88
 8001764:	20000a84 	.word	0x20000a84
 8001768:	20000a80 	.word	0x20000a80
 800176c:	200000ac 	.word	0x200000ac
 8001770:	20000a5c 	.word	0x20000a5c
 8001774:	20000a60 	.word	0x20000a60
 8001778:	20000a20 	.word	0x20000a20
 800177c:	4b64      	ldr	r3, [pc, #400]	; (8001910 <main+0x76c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f7ff fb6a 	bl	8000e5c <__aeabi_fdiv>
 8001788:	4603      	mov	r3, r0
 800178a:	4619      	mov	r1, r3
 800178c:	4620      	mov	r0, r4
 800178e:	f7ff f9a7 	bl	8000ae0 <__aeabi_fsub>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <main+0x76c>)
 8001798:	621a      	str	r2, [r3, #32]


	          tProfile.dMidStep1 = tProfile.dVelMax / tProfile.dAccelMax;
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <main+0x76c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a5c      	ldr	r2, [pc, #368]	; (8001910 <main+0x76c>)
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb59 	bl	8000e5c <__aeabi_fdiv>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <main+0x76c>)
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
	          tProfile.dMidStep2 = tProfile.dPosMax / tProfile.dVelMax;
 80017b2:	4b57      	ldr	r3, [pc, #348]	; (8001910 <main+0x76c>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4a56      	ldr	r2, [pc, #344]	; (8001910 <main+0x76c>)
 80017b8:	6852      	ldr	r2, [r2, #4]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb4d 	bl	8000e5c <__aeabi_fdiv>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b52      	ldr	r3, [pc, #328]	; (8001910 <main+0x76c>)
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
	          tProfile.dMidStep3 = tProfile.dMidStep1 / tProfile.dMidStep2;
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <main+0x76c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	4a50      	ldr	r2, [pc, #320]	; (8001910 <main+0x76c>)
 80017d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fb41 	bl	8000e5c <__aeabi_fdiv>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <main+0x76c>)
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c

	          tProfile.nTime = 0;
 80017e2:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <main+0x76c>)
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
	          tProcess = NONE;
 80017ea:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <main+0x770>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
	          break;
 80017f0:	e08c      	b.n	800190c <main+0x768>

	        case CRUN_RES:
	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80017f2:	4a49      	ldr	r2, [pc, #292]	; (8001918 <main+0x774>)
 80017f4:	4949      	ldr	r1, [pc, #292]	; (800191c <main+0x778>)
 80017f6:	484a      	ldr	r0, [pc, #296]	; (8001920 <main+0x77c>)
 80017f8:	f000 fd10 	bl	800221c <SerialWriteComm>
	          g_nCmdPulse = 0;
 80017fc:	4b49      	ldr	r3, [pc, #292]	; (8001924 <main+0x780>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
	          PIDReset(&tPIDControl);
 8001802:	4849      	ldr	r0, [pc, #292]	; (8001928 <main+0x784>)
 8001804:	f000 fbfc 	bl	8002000 <PIDReset>
	          __HAL_TIM_SetCounter(&htim4, 32768);
 8001808:	4b48      	ldr	r3, [pc, #288]	; (800192c <main+0x788>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
	          g_nIndex = 0 ;
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <main+0x78c>)
 8001814:	2200      	movs	r2, #0
 8001816:	801a      	strh	r2, [r3, #0]
	          tProcess = CRUN;
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <main+0x770>)
 800181a:	2207      	movs	r2, #7
 800181c:	701a      	strb	r2, [r3, #0]
	          break;
 800181e:	e075      	b.n	800190c <main+0x768>
	        case CRUN:
	          g_bDataAvailable = false;
 8001820:	4b44      	ldr	r3, [pc, #272]	; (8001934 <main+0x790>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	          SerialAcceptReceive();
 8001826:	f000 fceb 	bl	8002200 <SerialAcceptReceive>
	          break;
 800182a:	e06f      	b.n	800190c <main+0x768>
	        case GRMS:
	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	e05d      	b.n	80018ee <main+0x74a>
	          {
	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 8001832:	4a3b      	ldr	r2, [pc, #236]	; (8001920 <main+0x77c>)
 8001834:	4940      	ldr	r1, [pc, #256]	; (8001938 <main+0x794>)
 8001836:	4841      	ldr	r0, [pc, #260]	; (800193c <main+0x798>)
 8001838:	f003 ff90 	bl	800575c <siprintf>
	            memset(g_nTxOption, '\0', 3);
 800183c:	2203      	movs	r2, #3
 800183e:	2100      	movs	r1, #0
 8001840:	483f      	ldr	r0, [pc, #252]	; (8001940 <main+0x79c>)
 8001842:	f003 fe97 	bl	8005574 <memset>
	            g_nTxData[6] = (tPIDControl.nActPosSample[index]&0xFF00) >>8;
 8001846:	4a38      	ldr	r2, [pc, #224]	; (8001928 <main+0x784>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	33d0      	adds	r3, #208	; 0xd0
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	889b      	ldrh	r3, [r3, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <main+0x7a0>)
 800185a:	719a      	strb	r2, [r3, #6]
	            g_nTxData[7] = (tPIDControl.nActPosSample[index]&0xFF);
 800185c:	4a32      	ldr	r2, [pc, #200]	; (8001928 <main+0x784>)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	33d0      	adds	r3, #208	; 0xd0
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <main+0x7a0>)
 800186c:	71da      	strb	r2, [r3, #7]
	            g_nTxData[4] = ((uint16_t)g_dPIDError&0xFF00)>>8;
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <main+0x7a4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc2a 	bl	80010cc <__aeabi_f2uiz>
 8001878:	4603      	mov	r3, r0
 800187a:	b29b      	uxth	r3, r3
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	b29b      	uxth	r3, r3
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <main+0x7a0>)
 8001884:	711a      	strb	r2, [r3, #4]
	            g_nTxData[5] = ((uint16_t)g_dPIDError&0xFF)>>8;
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <main+0x7a0>)
 8001888:	2200      	movs	r2, #0
 800188a:	715a      	strb	r2, [r3, #5]
	            g_nTxData[2] = (index&0xFF00) >>8;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	121b      	asrs	r3, r3, #8
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <main+0x7a0>)
 8001894:	709a      	strb	r2, [r3, #2]
	            g_nTxData[3] = (index&0xFF);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <main+0x7a0>)
 800189c:	70da      	strb	r2, [r3, #3]
	            g_nTxData[0] = ((g_nIndex -2)&0xFF00)>>8;
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <main+0x78c>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	3b02      	subs	r3, #2
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <main+0x7a0>)
 80018aa:	701a      	strb	r2, [r3, #0]
	            g_nTxData[1] = ((g_nIndex -2)&0xFF);
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <main+0x78c>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3b02      	subs	r3, #2
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <main+0x7a0>)
 80018b8:	705a      	strb	r2, [r3, #1]

	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <main+0x7a0>)
 80018bc:	4920      	ldr	r1, [pc, #128]	; (8001940 <main+0x79c>)
 80018be:	481f      	ldr	r0, [pc, #124]	; (800193c <main+0x798>)
 80018c0:	f000 fcac 	bl	800221c <SerialWriteComm>
	            memset(g_strTxCommand, '\0', 4);
 80018c4:	2204      	movs	r2, #4
 80018c6:	2100      	movs	r1, #0
 80018c8:	481c      	ldr	r0, [pc, #112]	; (800193c <main+0x798>)
 80018ca:	f003 fe53 	bl	8005574 <memset>
	            memset(g_nTxOption, '\0', 3);
 80018ce:	2203      	movs	r2, #3
 80018d0:	2100      	movs	r1, #0
 80018d2:	481b      	ldr	r0, [pc, #108]	; (8001940 <main+0x79c>)
 80018d4:	f003 fe4e 	bl	8005574 <memset>
	            memset(g_nTxData, '\0', 8);
 80018d8:	2208      	movs	r2, #8
 80018da:	2100      	movs	r1, #0
 80018dc:	4819      	ldr	r0, [pc, #100]	; (8001944 <main+0x7a0>)
 80018de:	f003 fe49 	bl	8005574 <memset>

	            HAL_Delay(30);
 80018e2:	201e      	movs	r0, #30
 80018e4:	f001 f8a8 	bl	8002a38 <HAL_Delay>
	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <main+0x78c>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	db9b      	blt.n	8001832 <main+0x68e>
	          }
	          g_bDataAvailable = false;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <main+0x790>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
	          SerialAcceptReceive();
 8001900:	f000 fc7e 	bl	8002200 <SerialAcceptReceive>
	          tProcess = NONE;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <main+0x770>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
	          break;
 800190a:	bf00      	nop
	  if(g_bDataAvailable == true)
 800190c:	e463      	b.n	80011d6 <main+0x32>
 800190e:	bf00      	nop
 8001910:	20000a20 	.word	0x20000a20
 8001914:	200000a8 	.word	0x200000a8
 8001918:	20000a88 	.word	0x20000a88
 800191c:	20000a84 	.word	0x20000a84
 8001920:	20000a80 	.word	0x20000a80
 8001924:	20000a60 	.word	0x20000a60
 8001928:	200000ac 	.word	0x200000ac
 800192c:	20000b28 	.word	0x20000b28
 8001930:	20000a64 	.word	0x20000a64
 8001934:	20000a90 	.word	0x20000a90
 8001938:	08006c70 	.word	0x08006c70
 800193c:	20000098 	.word	0x20000098
 8001940:	2000009c 	.word	0x2000009c
 8001944:	200000a0 	.word	0x200000a0
 8001948:	20000a68 	.word	0x20000a68

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b090      	sub	sp, #64	; 0x40
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	2228      	movs	r2, #40	; 0x28
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fe0a 	bl	8005574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197c:	2301      	movs	r3, #1
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001980:	2302      	movs	r3, #2
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800198a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fbcd 	bl	8003134 <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019a0:	f000 f85a 	bl	8001a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a4:	230f      	movs	r3, #15
 80019a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a8:	2302      	movs	r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2102      	movs	r1, #2
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fe3a 	bl	8003638 <HAL_RCC_ClockConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019ca:	f000 f845 	bl	8001a58 <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3740      	adds	r7, #64	; 0x40
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d128      	bne.n	8001a3e <HAL_TIM_PeriodElapsedCallback+0x66>
  {
    switch(tProcess)
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d826      	bhi.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a43 	.word	0x08001a43
 8001a00:	08001a43 	.word	0x08001a43
 8001a04:	08001a21 	.word	0x08001a21
 8001a08:	08001a43 	.word	0x08001a43
 8001a0c:	08001a43 	.word	0x08001a43
 8001a10:	08001a43 	.word	0x08001a43
 8001a14:	08001a39 	.word	0x08001a39
 8001a18:	08001a43 	.word	0x08001a43
 8001a1c:	08001a43 	.word	0x08001a43
      case SPID:
        break;
      case CTUN_RES:
        break;
      case CTUN:
        if(g_nIndex <= 200)
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2bc8      	cmp	r3, #200	; 0xc8
 8001a26:	d803      	bhi.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0x58>
        {
          MotorTuning(25);
 8001a28:	2019      	movs	r0, #25
 8001a2a:	f000 fa75 	bl	8001f18 <MotorTuning>
        }
        else
        {
          tProcess = NONE;
        }
        break;
 8001a2e:	e009      	b.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x6c>
          tProcess = NONE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
        break;
 8001a36:	e005      	b.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case CSET:
        break;
	  case CRUN_RES:
		break;
      case CRUN:
        MotorMovePos();
 8001a38:	f000 f8e2 	bl	8001c00 <MotorMovePos>
        break;
 8001a3c:	e002      	b.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case GRMS:
		break;
    }
  }
 8001a3e:	bf00      	nop
 8001a40:	e000      	b.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0x6c>
        break;
 8001a42:	bf00      	nop
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000a98 	.word	0x20000a98
 8001a50:	200000a8 	.word	0x200000a8
 8001a54:	20000a64 	.word	0x20000a64

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5c:	b672      	cpsid	i
}
 8001a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <Error_Handler+0x8>
	...

08001a64 <MotorSetDir>:
uint32_t g_nCmdPulse;
uint16_t g_nIndex =0 ;

//set motor's direction
void MotorSetDir(int8_t nDir)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    switch(nDir)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <MotorSetDir+0x18>
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d007      	beq.n	8001a8a <MotorSetDir+0x26>
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
            break;
        default:
            break;
 8001a7a:	e00d      	b.n	8001a98 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MotorSetDir+0x3c>)
 8001a84:	f001 fb3e 	bl	8003104 <HAL_GPIO_WritePin>
            break;
 8001a88:	e006      	b.n	8001a98 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MotorSetDir+0x3c>)
 8001a92:	f001 fb37 	bl	8003104 <HAL_GPIO_WritePin>
            break;
 8001a96:	bf00      	nop
    }
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <MotorSetDuty>:

//duty cycle of motor
void MotorSetDuty(uint16_t nDuty)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <MotorSetDuty+0x1c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000ae0 	.word	0x20000ae0

08001ac4 <MotorInit>:

//init params for timer interrupt...
void MotorInit(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim2);
 8001ac8:	480f      	ldr	r0, [pc, #60]	; (8001b08 <MotorInit+0x44>)
 8001aca:	f001 ff9d 	bl	8003a08 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	480e      	ldr	r0, [pc, #56]	; (8001b0c <MotorInit+0x48>)
 8001ad2:	f002 f83b 	bl	8003b4c <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MotorInit+0x4c>)
 8001ada:	f002 f97b 	bl	8003dd4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001ade:	2104      	movs	r1, #4
 8001ae0:	480b      	ldr	r0, [pc, #44]	; (8001b10 <MotorInit+0x4c>)
 8001ae2:	f002 f977 	bl	8003dd4 <HAL_TIM_Encoder_Start>

    PIDReset(&tPIDControl);
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <MotorInit+0x50>)
 8001ae8:	f000 fa8a 	bl	8002000 <PIDReset>
    PIDInit(&tPIDControl, 1., 0., 0.00);
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MotorInit+0x50>)
 8001afa:	f000 fa99 	bl	8002030 <PIDInit>
    MotorSetDir(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff ffb0 	bl	8001a64 <MotorSetDir>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000a98 	.word	0x20000a98
 8001b0c:	20000ae0 	.word	0x20000ae0
 8001b10:	20000b28 	.word	0x20000b28
 8001b14:	200000ac 	.word	0x200000ac

08001b18 <ConvertDegToPulse>:

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * 4 * 11 * 21.3 / 360;
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	222c      	movs	r2, #44	; 0x2c
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fc6a 	bl	8000404 <__aeabi_i2d>
 8001b30:	a30f      	add	r3, pc, #60	; (adr r3, 8001b70 <ConvertDegToPulse+0x58>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fccf 	bl	80004d8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <ConvertDegToPulse+0x60>)
 8001b48:	f7fe fdf0 	bl	800072c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7fe ff70 	bl	8000a38 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60fb      	str	r3, [r7, #12]

    return (uint16_t) dPulse;
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fab5 	bl	80010cc <__aeabi_f2uiz>
 8001b62:	4603      	mov	r3, r0
 8001b64:	b29b      	uxth	r3, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	cccccccd 	.word	0xcccccccd
 8001b74:	40354ccc 	.word	0x40354ccc
 8001b78:	40768000 	.word	0x40768000
 8001b7c:	00000000 	.word	0x00000000

08001b80 <ConvertPulseToDeg>:

uint16_t ConvertPulseToDeg(uint16_t nPulse)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
    float dDeg = nPulse * 360 / 4 / 11 / 21.3;
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	225a      	movs	r2, #90	; 0x5a
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <ConvertPulseToDeg+0x58>)
 8001b94:	fb82 1203 	smull	r1, r2, r2, r3
 8001b98:	1052      	asrs	r2, r2, #1
 8001b9a:	17db      	asrs	r3, r3, #31
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc30 	bl	8000404 <__aeabi_i2d>
 8001ba4:	a30a      	add	r3, pc, #40	; (adr r3, 8001bd0 <ConvertPulseToDeg+0x50>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fdbf 	bl	800072c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe ff3f 	bl	8000a38 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	60fb      	str	r3, [r7, #12]
    return (uint16_t) dDeg;
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fa84 	bl	80010cc <__aeabi_f2uiz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29b      	uxth	r3, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	cccccccd 	.word	0xcccccccd
 8001bd4:	40354ccc 	.word	0x40354ccc
 8001bd8:	2e8ba2e9 	.word	0x2e8ba2e9

08001bdc <MotorGetPulse>:

void MotorGetPulse(uint32_t *nPulse)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    *nPulse = __HAL_TIM_GetCounter(&htim4);
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <MotorGetPulse+0x1c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000b28 	.word	0x20000b28
 8001bfc:	00000000 	.word	0x00000000

08001c00 <MotorMovePos>:

void MotorMovePos(void)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001c06:	463b      	mov	r3, r7
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ffe7 	bl	8001bdc <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001c14:	4a99      	ldr	r2, [pc, #612]	; (8001e7c <MotorMovePos+0x27c>)
 8001c16:	6013      	str	r3, [r2, #0]
    float dPosTemp = 0;
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]

    //Profile trapezoidal Speed
    if(tProfile.nTime <= tProfile.dMidStep1)
 8001c1e:	4b98      	ldr	r3, [pc, #608]	; (8001e80 <MotorMovePos+0x280>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a97      	ldr	r2, [pc, #604]	; (8001e80 <MotorMovePos+0x280>)
 8001c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa0b 	bl	8001044 <__aeabi_fcmple>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d02c      	beq.n	8001c8e <MotorMovePos+0x8e>
    {
        dPosTemp = (int32_t)(tProfile.dA1 * tProfile.nTime * tProfile.nTime);
 8001c34:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <MotorMovePos+0x280>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a91      	ldr	r2, [pc, #580]	; (8001e80 <MotorMovePos+0x280>)
 8001c3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f858 	bl	8000cf4 <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <MotorMovePos+0x280>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7ff f850 	bl	8000cf4 <__aeabi_fmul>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fa12 	bl	8001080 <__aeabi_f2iz>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fff4 	bl	8000c4c <__aeabi_i2f>
 8001c64:	4603      	mov	r3, r0
 8001c66:	607b      	str	r3, [r7, #4]
        g_dCmdVel = 2 * tProfile.dA1 * tProfile.nTime;
 8001c68:	4b85      	ldr	r3, [pc, #532]	; (8001e80 <MotorMovePos+0x280>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe ff38 	bl	8000ae4 <__addsf3>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <MotorMovePos+0x280>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7ff f838 	bl	8000cf4 <__aeabi_fmul>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b7e      	ldr	r3, [pc, #504]	; (8001e84 <MotorMovePos+0x284>)
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e083      	b.n	8001d96 <MotorMovePos+0x196>
    }
    else if(tProfile.nTime <= tProfile.dMidStep2)
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <MotorMovePos+0x280>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <MotorMovePos+0x280>)
 8001c94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f9d3 	bl	8001044 <__aeabi_fcmple>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01e      	beq.n	8001ce2 <MotorMovePos+0xe2>
    {
        dPosTemp = (int32_t)(tProfile.dA2 * tProfile.nTime + tProfile.dB2);
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <MotorMovePos+0x280>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <MotorMovePos+0x280>)
 8001caa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f820 	bl	8000cf4 <__aeabi_fmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <MotorMovePos+0x280>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f7fe ff10 	bl	8000ae4 <__addsf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f9da 	bl	8001080 <__aeabi_f2iz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe ffbc 	bl	8000c4c <__aeabi_i2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	607b      	str	r3, [r7, #4]
        g_dCmdVel = tProfile.dA2;
 8001cd8:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <MotorMovePos+0x280>)
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	4a69      	ldr	r2, [pc, #420]	; (8001e84 <MotorMovePos+0x284>)
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e059      	b.n	8001d96 <MotorMovePos+0x196>
    }
    else if(tProfile.nTime <= tProfile.dMidStep3)
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <MotorMovePos+0x280>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a66      	ldr	r2, [pc, #408]	; (8001e80 <MotorMovePos+0x280>)
 8001ce8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f9a9 	bl	8001044 <__aeabi_fcmple>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d04b      	beq.n	8001d90 <MotorMovePos+0x190>
    {
        dPosTemp = (int32_t)(tProfile.dA3 * tProfile.nTime * tProfile.nTime + tProfile.dB3 * tProfile.nTime + tProfile.dC3);
 8001cf8:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <MotorMovePos+0x280>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <MotorMovePos+0x280>)
 8001cfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fff6 	bl	8000cf4 <__aeabi_fmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <MotorMovePos+0x280>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f7fe ffee 	bl	8000cf4 <__aeabi_fmul>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461c      	mov	r4, r3
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <MotorMovePos+0x280>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <MotorMovePos+0x280>)
 8001d22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe ffe4 	bl	8000cf4 <__aeabi_fmul>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7fe fed7 	bl	8000ae4 <__addsf3>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b51      	ldr	r3, [pc, #324]	; (8001e80 <MotorMovePos+0x280>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f7fe fecf 	bl	8000ae4 <__addsf3>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f999 	bl	8001080 <__aeabi_f2iz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ff7b 	bl	8000c4c <__aeabi_i2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	607b      	str	r3, [r7, #4]
        g_dCmdVel = 2*tProfile.dA3 * tProfile.nTime + tProfile.dB3;
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <MotorMovePos+0x280>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe febf 	bl	8000ae4 <__addsf3>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b45      	ldr	r3, [pc, #276]	; (8001e80 <MotorMovePos+0x280>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f7fe ffbf 	bl	8000cf4 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <MotorMovePos+0x280>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f7fe feaf 	bl	8000ae4 <__addsf3>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <MotorMovePos+0x284>)
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e002      	b.n	8001d96 <MotorMovePos+0x196>
    }
    else
    {
        dPosTemp = tProfile.dPosMax;
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <MotorMovePos+0x280>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	607b      	str	r3, [r7, #4]
    }

    //Control PID
    g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff f998 	bl	80010cc <__aeabi_f2uiz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff feb9 	bl	8001b18 <ConvertDegToPulse>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <MotorMovePos+0x288>)
 8001dac:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <MotorMovePos+0x288>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ff46 	bl	8000c44 <__aeabi_ui2f>
 8001db8:	4604      	mov	r4, r0
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <MotorMovePos+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ff40 	bl	8000c44 <__aeabi_ui2f>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <MotorMovePos+0x28c>)
 8001dc8:	4621      	mov	r1, r4
 8001dca:	4831      	ldr	r0, [pc, #196]	; (8001e90 <MotorMovePos+0x290>)
 8001dcc:	f000 f94e 	bl	800206c <PIDCompute>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f954 	bl	8001080 <__aeabi_f2iz>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <MotorMovePos+0x294>)
 8001de0:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <MotorMovePos+0x294>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	db0c      	blt.n	8001e04 <MotorMovePos+0x204>
    {
        MotorSetDir(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff fe3a 	bl	8001a64 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <MotorMovePos+0x294>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bfb8      	it	lt
 8001df8:	425b      	neglt	r3, r3
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe51 	bl	8001aa4 <MotorSetDuty>
 8001e02:	e00f      	b.n	8001e24 <MotorMovePos+0x224>
    }
    else if(g_nDutyCycle < 0)
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <MotorMovePos+0x294>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da0b      	bge.n	8001e24 <MotorMovePos+0x224>
    {
        MotorSetDir(0);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fe29 	bl	8001a64 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <MotorMovePos+0x294>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bfb8      	it	lt
 8001e1a:	425b      	neglt	r3, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe40 	bl	8001aa4 <MotorSetDuty>
    }

    if (tProfile.nTime > tProfile.dMidStep3)
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MotorMovePos+0x280>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <MotorMovePos+0x280>)
 8001e2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f91c 	bl	800106c <__aeabi_fcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d032      	beq.n	8001ea0 <MotorMovePos+0x2a0>
    {
        __HAL_TIM_SetCounter(&htim4, 32768);
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MotorMovePos+0x298>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
        dPosTemp = 0;
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
        g_nDutyCycle = 0;
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MotorMovePos+0x294>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
        g_dCmdVel = 0;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MotorMovePos+0x284>)
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
        tProfile.nTime = 0;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MotorMovePos+0x280>)
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
        tProcess = NONE;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MotorMovePos+0x29c>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
        MotorSetDuty(abs(g_nDutyCycle));
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MotorMovePos+0x294>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bfb8      	it	lt
 8001e6e:	425b      	neglt	r3, r3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fe16 	bl	8001aa4 <MotorSetDuty>
 8001e78:	e02a      	b.n	8001ed0 <MotorMovePos+0x2d0>
 8001e7a:	bf00      	nop
 8001e7c:	20000a5c 	.word	0x20000a5c
 8001e80:	20000a20 	.word	0x20000a20
 8001e84:	20000a58 	.word	0x20000a58
 8001e88:	20000a60 	.word	0x20000a60
 8001e8c:	3c23d70a 	.word	0x3c23d70a
 8001e90:	200000ac 	.word	0x200000ac
 8001e94:	20000a54 	.word	0x20000a54
 8001e98:	20000b28 	.word	0x20000b28
 8001e9c:	200000a8 	.word	0x200000a8
    }
    else
    {
        tPIDControl.nActPosSample[g_nIndex] = ConvertPulseToDeg(g_nActPulse);
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <MotorMovePos+0x308>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <MotorMovePos+0x30c>)
 8001ea8:	8812      	ldrh	r2, [r2, #0]
 8001eaa:	4614      	mov	r4, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe67 	bl	8001b80 <ConvertPulseToDeg>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <MotorMovePos+0x310>)
 8001eb8:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	460a      	mov	r2, r1
 8001ec2:	809a      	strh	r2, [r3, #4]
        g_nIndex ++;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MotorMovePos+0x30c>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MotorMovePos+0x30c>)
 8001ece:	801a      	strh	r2, [r3, #0]
    }

    tProfile.nTime += 0.01;
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MotorMovePos+0x314>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe faa7 	bl	8000428 <__aeabi_f2d>
 8001eda:	a309      	add	r3, pc, #36	; (adr r3, 8001f00 <MotorMovePos+0x300>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe f944 	bl	800016c <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fda4 	bl	8000a38 <__aeabi_d2f>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <MotorMovePos+0x314>)
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	bf00      	nop
 8001f00:	47ae147b 	.word	0x47ae147b
 8001f04:	3f847ae1 	.word	0x3f847ae1
 8001f08:	20000a5c 	.word	0x20000a5c
 8001f0c:	20000a64 	.word	0x20000a64
 8001f10:	200000ac 	.word	0x200000ac
 8001f14:	20000a20 	.word	0x20000a20

08001f18 <MotorTuning>:

void MotorTuning(uint16_t nPos)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fe58 	bl	8001bdc <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <MotorTuning+0xd0>)
 8001f34:	6013      	str	r3, [r2, #0]

    g_nCmdPulse = ConvertDegToPulse(nPos);
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fded 	bl	8001b18 <ConvertDegToPulse>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <MotorTuning+0xd4>)
 8001f44:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001f46:	4b29      	ldr	r3, [pc, #164]	; (8001fec <MotorTuning+0xd4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fe7a 	bl	8000c44 <__aeabi_ui2f>
 8001f50:	4604      	mov	r4, r0
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <MotorTuning+0xd0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fe74 	bl	8000c44 <__aeabi_ui2f>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <MotorTuning+0xd8>)
 8001f60:	4621      	mov	r1, r4
 8001f62:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <MotorTuning+0xdc>)
 8001f64:	f000 f882 	bl	800206c <PIDCompute>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f888 	bl	8001080 <__aeabi_f2iz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <MotorTuning+0xe0>)
 8001f78:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <MotorTuning+0xe0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0c      	blt.n	8001f9c <MotorTuning+0x84>
    {
        MotorSetDir(1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fd6e 	bl	8001a64 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MotorTuning+0xe0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bfb8      	it	lt
 8001f90:	425b      	neglt	r3, r3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd85 	bl	8001aa4 <MotorSetDuty>
 8001f9a:	e00f      	b.n	8001fbc <MotorTuning+0xa4>
    }
    else if(g_nDutyCycle < 0)
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MotorTuning+0xe0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	da0b      	bge.n	8001fbc <MotorTuning+0xa4>
    {
        MotorSetDir(0);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fd5d 	bl	8001a64 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <MotorTuning+0xe0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bfb8      	it	lt
 8001fb2:	425b      	neglt	r3, r3
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd74 	bl	8001aa4 <MotorSetDuty>
    }

    //Store Data

    tPIDControl.nSampleTuningPID[g_nIndex] = g_nActPulse;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <MotorTuning+0xd0>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MotorTuning+0xe4>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b291      	uxth	r1, r2
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <MotorTuning+0xdc>)
 8001fc8:	3308      	adds	r3, #8
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	460a      	mov	r2, r1
 8001fd0:	809a      	strh	r2, [r3, #4]
    g_nIndex++;
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MotorTuning+0xe4>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MotorTuning+0xe4>)
 8001fdc:	801a      	strh	r2, [r3, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd90      	pop	{r4, r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000a5c 	.word	0x20000a5c
 8001fec:	20000a60 	.word	0x20000a60
 8001ff0:	3c23d70a 	.word	0x3c23d70a
 8001ff4:	200000ac 	.word	0x200000ac
 8001ff8:	20000a54 	.word	0x20000a54
 8001ffc:	20000a64 	.word	0x20000a64

08002000 <PIDReset>:

float g_dPIDError = 0;

//reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <PIDReset+0x2c>)
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000a68 	.word	0x20000a68

08002030 <PIDInit>:

//init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
    PIDReset(PID_Ctrl);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff ffde 	bl	8002000 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	609a      	str	r2, [r3, #8]
    __HAL_TIM_SetCounter(&htim4, 32768);
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <PIDInit+0x38>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000b28 	.word	0x20000b28

0800206c <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

//Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	68b8      	ldr	r0, [r7, #8]
 800207e:	f7fe fd2f 	bl	8000ae0 <__aeabi_fsub>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <PIDCompute+0xdc>)
 8002088:	601a      	str	r2, [r3, #0]
    float dP = 0, dI = 0, dD = 0;
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl -> dKp *g_dPIDError;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <PIDCompute+0xdc>)
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fe24 	bl	8000cf4 <__aeabi_fmul>
 80020ac:	4603      	mov	r3, r0
 80020ae:	61fb      	str	r3, [r7, #28]
    PID_Ctrl -> dIntergral += g_dPIDError;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <PIDCompute+0xdc>)
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fd12 	bl	8000ae4 <__addsf3>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	611a      	str	r2, [r3, #16]
    dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	6839      	ldr	r1, [r7, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fe10 	bl	8000cf4 <__aeabi_fmul>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe febe 	bl	8000e5c <__aeabi_fdiv>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f7fe fe02 	bl	8000cf4 <__aeabi_fmul>
 80020f0:	4603      	mov	r3, r0
 80020f2:	61bb      	str	r3, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) /dTs;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689c      	ldr	r4, [r3, #8]
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <PIDCompute+0xdc>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f7fe fcec 	bl	8000ae0 <__aeabi_fsub>
 8002108:	4603      	mov	r3, r0
 800210a:	4619      	mov	r1, r3
 800210c:	4620      	mov	r0, r4
 800210e:	f7fe fdf1 	bl	8000cf4 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fea0 	bl	8000e5c <__aeabi_fdiv>
 800211c:	4603      	mov	r3, r0
 800211e:	617b      	str	r3, [r7, #20]
    dPIDResult = dP + dI + dD;
 8002120:	69b9      	ldr	r1, [r7, #24]
 8002122:	69f8      	ldr	r0, [r7, #28]
 8002124:	f7fe fcde 	bl	8000ae4 <__addsf3>
 8002128:	4603      	mov	r3, r0
 800212a:	4619      	mov	r1, r3
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f7fe fcd9 	bl	8000ae4 <__addsf3>
 8002132:	4603      	mov	r3, r0
 8002134:	613b      	str	r3, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <PIDCompute+0xdc>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 800213e:	693b      	ldr	r3, [r7, #16]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3724      	adds	r7, #36	; 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	20000a68 	.word	0x20000a68

0800214c <subString>:
uint8_t ACK[] = {0x06U};
uint8_t SYN[] = {0x16U};

//cut the string
uint8_t *subString(uint8_t *pBuff, int nPos, int nIndex)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
    uint8_t *t = &pBuff[nPos];
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
    pBuff[nPos -1] = '\0';
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	3b01      	subs	r3, #1
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e007      	b.n	8002182 <subString+0x36>
    {
        t[i] = '\0';
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	6938      	ldr	r0, [r7, #16]
 8002184:	f7fd ffe4 	bl	8000150 <strlen>
 8002188:	4603      	mov	r3, r0
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	429a      	cmp	r2, r3
 8002190:	d8ef      	bhi.n	8002172 <subString+0x26>
    }
    return t;
 8002192:	693b      	ldr	r3, [r7, #16]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <StrCompare>:


//Compare 2 string
bool StrCompare(uint8_t *pBuff, uint8_t *pSample, uint8_t nSize)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e00e      	b.n	80021ce <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	440b      	add	r3, r1
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <StrCompare+0x2c>
        {
            return false;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e007      	b.n	80021d8 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbec      	blt.n	80021b0 <StrCompare+0x14>
        }
    }
    return true;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
	...

080021e4 <SerialInit>:


//receive data
void SerialInit(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_nRxBuff, MAX_LEN);
 80021e8:	2212      	movs	r2, #18
 80021ea:	4903      	ldr	r1, [pc, #12]	; (80021f8 <SerialInit+0x14>)
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <SerialInit+0x18>)
 80021ee:	f002 fd20 	bl	8004c32 <HAL_UART_Receive_IT>
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000a6c 	.word	0x20000a6c
 80021fc:	20000b70 	.word	0x20000b70

08002200 <SerialAcceptReceive>:

//recieve data
void SerialAcceptReceive(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*)g_nRxBuff, MAX_LEN);
 8002204:	2212      	movs	r2, #18
 8002206:	4903      	ldr	r1, [pc, #12]	; (8002214 <SerialAcceptReceive+0x14>)
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <SerialAcceptReceive+0x18>)
 800220a:	f002 fd12 	bl	8004c32 <HAL_UART_Receive_IT>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000a6c 	.word	0x20000a6c
 8002218:	20000b70 	.word	0x20000b70

0800221c <SerialWriteComm>:

//send data to GUI
void SerialWriteComm(uint8_t *pStrCmd, uint8_t *pOpt, uint8_t *pData)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
    uint8_t *pBuff;
    pBuff = (uint8_t *)malloc(18);
 8002228:	2012      	movs	r0, #18
 800222a:	f003 f985 	bl	8005538 <malloc>
 800222e:	4603      	mov	r3, r0
 8002230:	617b      	str	r3, [r7, #20]
    uint8_t nIndex = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	74fb      	strb	r3, [r7, #19]

    memcpy(pBuff + nIndex, STX, 1);
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4413      	add	r3, r2
 800223c:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <SerialWriteComm+0xa4>)
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	3301      	adds	r3, #1
 8002246:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pStrCmd, 4);
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4413      	add	r3, r2
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	601a      	str	r2, [r3, #0]
    nIndex += 4;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	3304      	adds	r3, #4
 8002258:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pOpt, 3);
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4413      	add	r3, r2
 8002260:	2203      	movs	r2, #3
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f003 f977 	bl	8005558 <memcpy>
    nIndex += 3;
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	3303      	adds	r3, #3
 800226e:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pData, 8);
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4413      	add	r3, r2
 8002276:	2208      	movs	r2, #8
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f96c 	bl	8005558 <memcpy>
    nIndex += 8;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	3308      	adds	r3, #8
 8002284:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ACK, 1);
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4413      	add	r3, r2
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <SerialWriteComm+0xa8>)
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	3301      	adds	r3, #1
 8002296:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ETX, 1);
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4413      	add	r3, r2
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <SerialWriteComm+0xac>)
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, pBuff, MAX_LEN, 1000);
 80022a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a8:	2212      	movs	r2, #18
 80022aa:	6979      	ldr	r1, [r7, #20]
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <SerialWriteComm+0xb0>)
 80022ae:	f002 fc2e 	bl	8004b0e <HAL_UART_Transmit>

    free(pBuff);
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f003 f948 	bl	8005548 <free>

}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000b70 	.word	0x20000b70

080022d0 <SerialParse>:

//parse data to Command, Option, Data
void SerialParse(uint8_t *pBuff)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    if((pBuff[0] == STX[0] && (pBuff[17] == ETX[0])))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <SerialParse+0x68>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d125      	bne.n	8002330 <SerialParse+0x60>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3311      	adds	r3, #17
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <SerialParse+0x6c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d11e      	bne.n	8002330 <SerialParse+0x60>
  {
    memcpy(g_strCommand, subString(pBuff, 1,4), 4);
 80022f2:	2204      	movs	r2, #4
 80022f4:	2101      	movs	r1, #1
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff28 	bl	800214c <subString>
 80022fc:	4603      	mov	r3, r0
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <SerialParse+0x70>)
 8002304:	601a      	str	r2, [r3, #0]
    memcpy(g_nOption, subString(pBuff, 5,3), 3);
 8002306:	2203      	movs	r2, #3
 8002308:	2105      	movs	r1, #5
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff1e 	bl	800214c <subString>
 8002310:	4602      	mov	r2, r0
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <SerialParse+0x74>)
 8002314:	8811      	ldrh	r1, [r2, #0]
 8002316:	7892      	ldrb	r2, [r2, #2]
 8002318:	8019      	strh	r1, [r3, #0]
 800231a:	709a      	strb	r2, [r3, #2]
    memcpy(g_nData, subString(pBuff, 8,8), 8);
 800231c:	2208      	movs	r2, #8
 800231e:	2108      	movs	r1, #8
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff13 	bl	800214c <subString>
 8002326:	4602      	mov	r2, r0
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <SerialParse+0x78>)
 800232a:	6810      	ldr	r0, [r2, #0]
 800232c:	6851      	ldr	r1, [r2, #4]
 800232e:	c303      	stmia	r3!, {r0, r1}
  }
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004
 8002340:	20000a80 	.word	0x20000a80
 8002344:	20000a84 	.word	0x20000a84
 8002348:	20000a88 	.word	0x20000a88

0800234c <HAL_UART_RxCpltCallback>:

//interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    if(huart ->Instance == huart1.Instance)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_UART_RxCpltCallback+0x28>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d105      	bne.n	800236c <HAL_UART_RxCpltCallback+0x20>
  {
    g_bDataAvailable = true;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_UART_RxCpltCallback+0x2c>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
    SerialParse(g_nRxBuff);
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <HAL_UART_RxCpltCallback+0x30>)
 8002368:	f7ff ffb2 	bl	80022d0 <SerialParse>
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000b70 	.word	0x20000b70
 8002378:	20000a90 	.word	0x20000a90
 800237c:	20000a6c 	.word	0x20000a6c

08002380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_MspInit+0x5c>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_MspInit+0x5c>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6193      	str	r3, [r2, #24]
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_MspInit+0x5c>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_MspInit+0x5c>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_MspInit+0x5c>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	61d3      	str	r3, [r2, #28]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_MspInit+0x5c>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_MspInit+0x60>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_MspInit+0x60>)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 fae9 	bl	8002a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM2_IRQHandler+0x10>)
 800243a:	f001 fd59 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000a98 	.word	0x20000a98

08002448 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <USART1_IRQHandler+0x10>)
 800244e:	f002 fc21 	bl	8004c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000b70 	.word	0x20000b70

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f003 f82a 	bl	80054e4 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20005000 	.word	0x20005000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	20000a94 	.word	0x20000a94
 80024c4:	20000bc8 	.word	0x20000bc8

080024c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e8:	463b      	mov	r3, r7
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <MX_TIM2_Init+0x94>)
 80024f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <MX_TIM2_Init+0x94>)
 80024fa:	2263      	movs	r2, #99	; 0x63
 80024fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_TIM2_Init+0x94>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <MX_TIM2_Init+0x94>)
 8002506:	f640 620f 	movw	r2, #3599	; 0xe0f
 800250a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_TIM2_Init+0x94>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <MX_TIM2_Init+0x94>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <MX_TIM2_Init+0x94>)
 800251a:	f001 fa25 	bl	8003968 <HAL_TIM_Base_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002524:	f7ff fa98 	bl	8001a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4619      	mov	r1, r3
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <MX_TIM2_Init+0x94>)
 8002536:	f001 fea1 	bl	800427c <HAL_TIM_ConfigClockSource>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002540:	f7ff fa8a 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800254c:	463b      	mov	r3, r7
 800254e:	4619      	mov	r1, r3
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_TIM2_Init+0x94>)
 8002552:	f002 fa1f 	bl	8004994 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800255c:	f7ff fa7c 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000a98 	.word	0x20000a98

0800256c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002572:	f107 0320 	add.w	r3, r7, #32
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	615a      	str	r2, [r3, #20]
 800258c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <MX_TIM3_Init+0xac>)
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <MX_TIM3_Init+0xb0>)
 8002592:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <MX_TIM3_Init+0xac>)
 8002596:	2209      	movs	r2, #9
 8002598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <MX_TIM3_Init+0xac>)
 800259c:	2260      	movs	r2, #96	; 0x60
 800259e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <MX_TIM3_Init+0xac>)
 80025a2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80025a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_TIM3_Init+0xac>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_TIM3_Init+0xac>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b4:	4818      	ldr	r0, [pc, #96]	; (8002618 <MX_TIM3_Init+0xac>)
 80025b6:	f001 fa79 	bl	8003aac <HAL_TIM_PWM_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025c0:	f7ff fa4a 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025cc:	f107 0320 	add.w	r3, r7, #32
 80025d0:	4619      	mov	r1, r3
 80025d2:	4811      	ldr	r0, [pc, #68]	; (8002618 <MX_TIM3_Init+0xac>)
 80025d4:	f002 f9de 	bl	8004994 <HAL_TIMEx_MasterConfigSynchronization>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025de:	f7ff fa3b 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e2:	2360      	movs	r3, #96	; 0x60
 80025e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <MX_TIM3_Init+0xac>)
 80025fa:	f001 fd81 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002604:	f7ff fa28 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <MX_TIM3_Init+0xac>)
 800260a:	f000 f8dd 	bl	80027c8 <HAL_TIM_MspPostInit>

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000ae0 	.word	0x20000ae0
 800261c:	40000400 	.word	0x40000400

08002620 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	; 0x30
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f002 ffa0 	bl	8005574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <MX_TIM4_Init+0xa0>)
 800263e:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <MX_TIM4_Init+0xa4>)
 8002640:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002642:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_TIM4_Init+0xa0>)
 8002644:	2200      	movs	r2, #0
 8002646:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <MX_TIM4_Init+0xa0>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_TIM4_Init+0xa0>)
 8002650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002654:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_TIM4_Init+0xa0>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_TIM4_Init+0xa0>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002662:	2303      	movs	r3, #3
 8002664:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800266a:	2301      	movs	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800267a:	2301      	movs	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	4619      	mov	r1, r3
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <MX_TIM4_Init+0xa0>)
 800268e:	f001 faff 	bl	8003c90 <HAL_TIM_Encoder_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002698:	f7ff f9de 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <MX_TIM4_Init+0xa0>)
 80026aa:	f002 f973 	bl	8004994 <HAL_TIMEx_MasterConfigSynchronization>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80026b4:	f7ff f9d0 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026b8:	bf00      	nop
 80026ba:	3730      	adds	r7, #48	; 0x30
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000b28 	.word	0x20000b28
 80026c4:	40000800 	.word	0x40000800

080026c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d113      	bne.n	8002702 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_TIM_Base_MspInit+0x44>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_TIM_Base_MspInit+0x44>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	61d3      	str	r3, [r2, #28]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_TIM_Base_MspInit+0x44>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	201c      	movs	r0, #28
 80026f8:	f000 fa99 	bl	8002c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026fc:	201c      	movs	r0, #28
 80026fe:	f000 fab2 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_TIM_PWM_MspInit+0x34>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10b      	bne.n	800273a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_TIM_PWM_MspInit+0x38>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_TIM_PWM_MspInit+0x38>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	61d3      	str	r3, [r2, #28]
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_TIM_PWM_MspInit+0x38>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40000400 	.word	0x40000400
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_TIM_Encoder_MspInit+0x70>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d123      	bne.n	80027b4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	61d3      	str	r3, [r2, #28]
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4619      	mov	r1, r3
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_TIM_Encoder_MspInit+0x78>)
 80027b0:	f000 fb24 	bl	8002dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027b4:	bf00      	nop
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40000800 	.word	0x40000800
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010c00 	.word	0x40010c00

080027c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_TIM_MspPostInit+0x58>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d117      	bne.n	8002818 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_TIM_MspPostInit+0x5c>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <HAL_TIM_MspPostInit+0x5c>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6193      	str	r3, [r2, #24]
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_TIM_MspPostInit+0x5c>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2302      	movs	r3, #2
 800280a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	4619      	mov	r1, r3
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <HAL_TIM_MspPostInit+0x60>)
 8002814:	f000 faf2 	bl	8002dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002818:	bf00      	nop
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40000400 	.word	0x40000400
 8002824:	40021000 	.word	0x40021000
 8002828:	40010800 	.word	0x40010800

0800282c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <MX_USART1_UART_Init+0x50>)
 8002834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 8002838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800283c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_USART1_UART_Init+0x4c>)
 8002864:	f002 f906 	bl	8004a74 <HAL_UART_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800286e:	f7ff f8f3 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000b70 	.word	0x20000b70
 800287c:	40013800 	.word	0x40013800

08002880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_UART_MspInit+0x9c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d139      	bne.n	8002914 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_UART_MspInit+0xa0>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_UART_MspInit+0xa0>)
 80028a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_UART_MspInit+0xa0>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_UART_MspInit+0xa0>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_UART_MspInit+0xa0>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_UART_MspInit+0xa0>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	4619      	mov	r1, r3
 80028e4:	480f      	ldr	r0, [pc, #60]	; (8002924 <HAL_UART_MspInit+0xa4>)
 80028e6:	f000 fa89 	bl	8002dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	4619      	mov	r1, r3
 80028fe:	4809      	ldr	r0, [pc, #36]	; (8002924 <HAL_UART_MspInit+0xa4>)
 8002900:	f000 fa7c 	bl	8002dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2025      	movs	r0, #37	; 0x25
 800290a:	f000 f990 	bl	8002c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800290e:	2025      	movs	r0, #37	; 0x25
 8002910:	f000 f9a9 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002914:	bf00      	nop
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40013800 	.word	0x40013800
 8002920:	40021000 	.word	0x40021000
 8002924:	40010800 	.word	0x40010800

08002928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	; (800295c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	; (8002960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	; (800296c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800294e:	f7ff fdbb 	bl	80024c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002952:	f002 fdcd 	bl	80054f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002956:	f7fe fc25 	bl	80011a4 <main>
  bx lr
 800295a:	4770      	bx	lr
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002964:	08006d08 	.word	0x08006d08
  ldr r2, =_sbss
 8002968:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800296c:	20000bc8 	.word	0x20000bc8

08002970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC1_2_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_Init+0x28>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a07      	ldr	r2, [pc, #28]	; (800299c <HAL_Init+0x28>)
 800297e:	f043 0310 	orr.w	r3, r3, #16
 8002982:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002984:	2003      	movs	r0, #3
 8002986:	f000 f947 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298a:	200f      	movs	r0, #15
 800298c:	f000 f808 	bl	80029a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002990:	f7ff fcf6 	bl	8002380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40022000 	.word	0x40022000

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_InitTick+0x54>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x58>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f95f 	bl	8002c82 <HAL_SYSTICK_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00e      	b.n	80029ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0f      	cmp	r3, #15
 80029d2:	d80a      	bhi.n	80029ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029dc:	f000 f927 	bl	8002c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_InitTick+0x5c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	20000014 	.word	0x20000014
 80029fc:	20000010 	.word	0x20000010

08002a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_IncTick+0x1c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_IncTick+0x20>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a03      	ldr	r2, [pc, #12]	; (8002a20 <HAL_IncTick+0x20>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000014 	.word	0x20000014
 8002a20:	20000bb4 	.word	0x20000bb4

08002a24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <HAL_GetTick+0x10>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000bb4 	.word	0x20000bb4

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff fff0 	bl	8002a24 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffe0 	bl	8002a24 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000014 	.word	0x20000014

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4906      	ldr	r1, [pc, #24]	; (8002b18 <__NVIC_EnableIRQ+0x34>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be4:	d301      	bcc.n	8002bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00f      	b.n	8002c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <SysTick_Config+0x40>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf2:	210f      	movs	r1, #15
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf8:	f7ff ff90 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <SysTick_Config+0x40>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <SysTick_Config+0x40>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff2d 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff42 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff90 	bl	8002b70 <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5f 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff35 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa2 	bl	8002bd4 <SysTick_Config>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d008      	beq.n	8002cc2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e020      	b.n	8002d04 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 020e 	bic.w	r2, r2, #14
 8002cd0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d005      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e051      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 020e 	bic.w	r2, r2, #14
 8002d40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <HAL_DMA_Abort_IT+0xd0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d029      	beq.n	8002db0 <HAL_DMA_Abort_IT+0xa0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_DMA_Abort_IT+0xd4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_DMA_Abort_IT+0x9c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <HAL_DMA_Abort_IT+0xd8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d01a      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x96>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_DMA_Abort_IT+0xdc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d012      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x90>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <HAL_DMA_Abort_IT+0xe0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00a      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x8a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <HAL_DMA_Abort_IT+0xe4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d102      	bne.n	8002d94 <HAL_DMA_Abort_IT+0x84>
 8002d8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d92:	e00e      	b.n	8002db2 <HAL_DMA_Abort_IT+0xa2>
 8002d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d98:	e00b      	b.n	8002db2 <HAL_DMA_Abort_IT+0xa2>
 8002d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d9e:	e008      	b.n	8002db2 <HAL_DMA_Abort_IT+0xa2>
 8002da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da4:	e005      	b.n	8002db2 <HAL_DMA_Abort_IT+0xa2>
 8002da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002daa:	e002      	b.n	8002db2 <HAL_DMA_Abort_IT+0xa2>
 8002dac:	2310      	movs	r3, #16
 8002dae:	e000      	b.n	8002db2 <HAL_DMA_Abort_IT+0xa2>
 8002db0:	2301      	movs	r3, #1
 8002db2:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <HAL_DMA_Abort_IT+0xe8>)
 8002db4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
    } 
  }
  return status;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40020008 	.word	0x40020008
 8002de4:	4002001c 	.word	0x4002001c
 8002de8:	40020030 	.word	0x40020030
 8002dec:	40020044 	.word	0x40020044
 8002df0:	40020058 	.word	0x40020058
 8002df4:	4002006c 	.word	0x4002006c
 8002df8:	40020000 	.word	0x40020000

08002dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b08b      	sub	sp, #44	; 0x2c
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0e:	e169      	b.n	80030e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e10:	2201      	movs	r2, #1
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f040 8158 	bne.w	80030de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a9a      	ldr	r2, [pc, #616]	; (800309c <HAL_GPIO_Init+0x2a0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d05e      	beq.n	8002ef6 <HAL_GPIO_Init+0xfa>
 8002e38:	4a98      	ldr	r2, [pc, #608]	; (800309c <HAL_GPIO_Init+0x2a0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d875      	bhi.n	8002f2a <HAL_GPIO_Init+0x12e>
 8002e3e:	4a98      	ldr	r2, [pc, #608]	; (80030a0 <HAL_GPIO_Init+0x2a4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d058      	beq.n	8002ef6 <HAL_GPIO_Init+0xfa>
 8002e44:	4a96      	ldr	r2, [pc, #600]	; (80030a0 <HAL_GPIO_Init+0x2a4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d86f      	bhi.n	8002f2a <HAL_GPIO_Init+0x12e>
 8002e4a:	4a96      	ldr	r2, [pc, #600]	; (80030a4 <HAL_GPIO_Init+0x2a8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d052      	beq.n	8002ef6 <HAL_GPIO_Init+0xfa>
 8002e50:	4a94      	ldr	r2, [pc, #592]	; (80030a4 <HAL_GPIO_Init+0x2a8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d869      	bhi.n	8002f2a <HAL_GPIO_Init+0x12e>
 8002e56:	4a94      	ldr	r2, [pc, #592]	; (80030a8 <HAL_GPIO_Init+0x2ac>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d04c      	beq.n	8002ef6 <HAL_GPIO_Init+0xfa>
 8002e5c:	4a92      	ldr	r2, [pc, #584]	; (80030a8 <HAL_GPIO_Init+0x2ac>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d863      	bhi.n	8002f2a <HAL_GPIO_Init+0x12e>
 8002e62:	4a92      	ldr	r2, [pc, #584]	; (80030ac <HAL_GPIO_Init+0x2b0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d046      	beq.n	8002ef6 <HAL_GPIO_Init+0xfa>
 8002e68:	4a90      	ldr	r2, [pc, #576]	; (80030ac <HAL_GPIO_Init+0x2b0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d85d      	bhi.n	8002f2a <HAL_GPIO_Init+0x12e>
 8002e6e:	2b12      	cmp	r3, #18
 8002e70:	d82a      	bhi.n	8002ec8 <HAL_GPIO_Init+0xcc>
 8002e72:	2b12      	cmp	r3, #18
 8002e74:	d859      	bhi.n	8002f2a <HAL_GPIO_Init+0x12e>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <HAL_GPIO_Init+0x80>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ef7 	.word	0x08002ef7
 8002e80:	08002ed1 	.word	0x08002ed1
 8002e84:	08002ee3 	.word	0x08002ee3
 8002e88:	08002f25 	.word	0x08002f25
 8002e8c:	08002f2b 	.word	0x08002f2b
 8002e90:	08002f2b 	.word	0x08002f2b
 8002e94:	08002f2b 	.word	0x08002f2b
 8002e98:	08002f2b 	.word	0x08002f2b
 8002e9c:	08002f2b 	.word	0x08002f2b
 8002ea0:	08002f2b 	.word	0x08002f2b
 8002ea4:	08002f2b 	.word	0x08002f2b
 8002ea8:	08002f2b 	.word	0x08002f2b
 8002eac:	08002f2b 	.word	0x08002f2b
 8002eb0:	08002f2b 	.word	0x08002f2b
 8002eb4:	08002f2b 	.word	0x08002f2b
 8002eb8:	08002f2b 	.word	0x08002f2b
 8002ebc:	08002f2b 	.word	0x08002f2b
 8002ec0:	08002ed9 	.word	0x08002ed9
 8002ec4:	08002eed 	.word	0x08002eed
 8002ec8:	4a79      	ldr	r2, [pc, #484]	; (80030b0 <HAL_GPIO_Init+0x2b4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ece:	e02c      	b.n	8002f2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	623b      	str	r3, [r7, #32]
          break;
 8002ed6:	e029      	b.n	8002f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	3304      	adds	r3, #4
 8002ede:	623b      	str	r3, [r7, #32]
          break;
 8002ee0:	e024      	b.n	8002f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	623b      	str	r3, [r7, #32]
          break;
 8002eea:	e01f      	b.n	8002f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	623b      	str	r3, [r7, #32]
          break;
 8002ef4:	e01a      	b.n	8002f2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002efe:	2304      	movs	r3, #4
 8002f00:	623b      	str	r3, [r7, #32]
          break;
 8002f02:	e013      	b.n	8002f2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	611a      	str	r2, [r3, #16]
          break;
 8002f16:	e009      	b.n	8002f2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f18:	2308      	movs	r3, #8
 8002f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	615a      	str	r2, [r3, #20]
          break;
 8002f22:	e003      	b.n	8002f2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f24:	2300      	movs	r3, #0
 8002f26:	623b      	str	r3, [r7, #32]
          break;
 8002f28:	e000      	b.n	8002f2c <HAL_GPIO_Init+0x130>
          break;
 8002f2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2bff      	cmp	r3, #255	; 0xff
 8002f30:	d801      	bhi.n	8002f36 <HAL_GPIO_Init+0x13a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	e001      	b.n	8002f3a <HAL_GPIO_Init+0x13e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2bff      	cmp	r3, #255	; 0xff
 8002f40:	d802      	bhi.n	8002f48 <HAL_GPIO_Init+0x14c>
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	e002      	b.n	8002f4e <HAL_GPIO_Init+0x152>
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	3b08      	subs	r3, #8
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	210f      	movs	r1, #15
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	6a39      	ldr	r1, [r7, #32]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80b1 	beq.w	80030de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f7c:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <HAL_GPIO_Init+0x2b8>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4a4c      	ldr	r2, [pc, #304]	; (80030b4 <HAL_GPIO_Init+0x2b8>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6193      	str	r3, [r2, #24]
 8002f88:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <HAL_GPIO_Init+0x2b8>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f94:	4a48      	ldr	r2, [pc, #288]	; (80030b8 <HAL_GPIO_Init+0x2bc>)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	220f      	movs	r2, #15
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a40      	ldr	r2, [pc, #256]	; (80030bc <HAL_GPIO_Init+0x2c0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d013      	beq.n	8002fe8 <HAL_GPIO_Init+0x1ec>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <HAL_GPIO_Init+0x2c4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_GPIO_Init+0x1e8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3e      	ldr	r2, [pc, #248]	; (80030c4 <HAL_GPIO_Init+0x2c8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <HAL_GPIO_Init+0x1e4>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3d      	ldr	r2, [pc, #244]	; (80030c8 <HAL_GPIO_Init+0x2cc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_GPIO_Init+0x1e0>
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e006      	b.n	8002fea <HAL_GPIO_Init+0x1ee>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	e004      	b.n	8002fea <HAL_GPIO_Init+0x1ee>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e002      	b.n	8002fea <HAL_GPIO_Init+0x1ee>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_GPIO_Init+0x1ee>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fec:	f002 0203 	and.w	r2, r2, #3
 8002ff0:	0092      	lsls	r2, r2, #2
 8002ff2:	4093      	lsls	r3, r2
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ffa:	492f      	ldr	r1, [pc, #188]	; (80030b8 <HAL_GPIO_Init+0x2bc>)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	3302      	adds	r3, #2
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003014:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	492c      	ldr	r1, [pc, #176]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003022:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	43db      	mvns	r3, r3
 800302a:	4928      	ldr	r1, [pc, #160]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 800302c:	4013      	ands	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d006      	beq.n	800304a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800303c:	4b23      	ldr	r3, [pc, #140]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	43db      	mvns	r3, r3
 8003052:	491e      	ldr	r1, [pc, #120]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 8003054:	4013      	ands	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	4918      	ldr	r1, [pc, #96]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]
 8003070:	e006      	b.n	8003080 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	43db      	mvns	r3, r3
 800307a:	4914      	ldr	r1, [pc, #80]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 800307c:	4013      	ands	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d021      	beq.n	80030d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_GPIO_Init+0x2d0>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	60cb      	str	r3, [r1, #12]
 8003098:	e021      	b.n	80030de <HAL_GPIO_Init+0x2e2>
 800309a:	bf00      	nop
 800309c:	10320000 	.word	0x10320000
 80030a0:	10310000 	.word	0x10310000
 80030a4:	10220000 	.word	0x10220000
 80030a8:	10210000 	.word	0x10210000
 80030ac:	10120000 	.word	0x10120000
 80030b0:	10110000 	.word	0x10110000
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40010800 	.word	0x40010800
 80030c0:	40010c00 	.word	0x40010c00
 80030c4:	40011000 	.word	0x40011000
 80030c8:	40011400 	.word	0x40011400
 80030cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_GPIO_Init+0x304>)
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	4909      	ldr	r1, [pc, #36]	; (8003100 <HAL_GPIO_Init+0x304>)
 80030da:	4013      	ands	r3, r2
 80030dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	3301      	adds	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f47f ae8e 	bne.w	8002e10 <HAL_GPIO_Init+0x14>
  }
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	372c      	adds	r7, #44	; 0x2c
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	40010400 	.word	0x40010400

08003104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
 8003110:	4613      	mov	r3, r2
 8003112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003114:	787b      	ldrb	r3, [r7, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003120:	e003      	b.n	800312a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	041a      	lsls	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	611a      	str	r2, [r3, #16]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e272      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	4b92      	ldr	r3, [pc, #584]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00c      	beq.n	800317a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003160:	4b8f      	ldr	r3, [pc, #572]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d112      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
 800316c:	4b8c      	ldr	r3, [pc, #560]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d10b      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317a:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06c      	beq.n	8003260 <HAL_RCC_OscConfig+0x12c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e24c      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x76>
 800319c:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7f      	ldr	r2, [pc, #508]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e02e      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b7b      	ldr	r3, [pc, #492]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a77      	ldr	r2, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0xbc>
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a71      	ldr	r2, [pc, #452]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031f0:	4b6b      	ldr	r3, [pc, #428]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a67      	ldr	r2, [pc, #412]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7ff fc08 	bl	8002a24 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7ff fc04 	bl	8002a24 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e200      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xe4>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7ff fbf4 	bl	8002a24 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7ff fbf0 	bl	8002a24 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1ec      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x10c>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1c0      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4939      	ldr	r1, [pc, #228]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e03a      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x270>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7ff fba9 	bl	8002a24 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7ff fba5 	bl	8002a24 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e1a1      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4927      	ldr	r1, [pc, #156]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_RCC_OscConfig+0x270>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff fb88 	bl	8002a24 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003318:	f7ff fb84 	bl	8002a24 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e180      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03a      	beq.n	80033b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d019      	beq.n	800337e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_RCC_OscConfig+0x274>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7ff fb68 	bl	8002a24 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7ff fb64 	bl	8002a24 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e160      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003376:	2001      	movs	r0, #1
 8003378:	f000 fad8 	bl	800392c <RCC_Delay>
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_OscConfig+0x274>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7ff fb4e 	bl	8002a24 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338a:	e00f      	b.n	80033ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7ff fb4a 	bl	8002a24 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d908      	bls.n	80033ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e146      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	42420000 	.word	0x42420000
 80033a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b92      	ldr	r3, [pc, #584]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e9      	bne.n	800338c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a6 	beq.w	8003512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b8b      	ldr	r3, [pc, #556]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a87      	ldr	r2, [pc, #540]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]
 80033e2:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b82      	ldr	r3, [pc, #520]	; (80035fc <HAL_RCC_OscConfig+0x4c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <HAL_RCC_OscConfig+0x4c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7e      	ldr	r2, [pc, #504]	; (80035fc <HAL_RCC_OscConfig+0x4c8>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7ff fb0b 	bl	8002a24 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7ff fb07 	bl	8002a24 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e103      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b75      	ldr	r3, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x4c8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x312>
 8003438:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a6e      	ldr	r2, [pc, #440]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	e02d      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x334>
 800344e:	4b6a      	ldr	r3, [pc, #424]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a69      	ldr	r2, [pc, #420]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	4b67      	ldr	r3, [pc, #412]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a66      	ldr	r2, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	e01c      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d10c      	bne.n	800348a <HAL_RCC_OscConfig+0x356>
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a5d      	ldr	r2, [pc, #372]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	e00b      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 800348a:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6213      	str	r3, [r2, #32]
 8003496:	4b58      	ldr	r3, [pc, #352]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a57      	ldr	r2, [pc, #348]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d015      	beq.n	80034d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7ff fabb 	bl	8002a24 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7ff fab7 	bl	8002a24 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0b1      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b4b      	ldr	r3, [pc, #300]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCC_OscConfig+0x37e>
 80034d4:	e014      	b.n	8003500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7ff faa5 	bl	8002a24 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7ff faa1 	bl	8002a24 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e09b      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	4b40      	ldr	r3, [pc, #256]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4b3c      	ldr	r3, [pc, #240]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8087 	beq.w	800362a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d061      	beq.n	80035ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d146      	bne.n	80035be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b33      	ldr	r3, [pc, #204]	; (8003600 <HAL_RCC_OscConfig+0x4cc>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7ff fa75 	bl	8002a24 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7ff fa71 	bl	8002a24 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e06d      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d108      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4921      	ldr	r1, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a19      	ldr	r1, [r3, #32]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	430b      	orrs	r3, r1
 800358a:	491b      	ldr	r1, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x4cc>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7ff fa45 	bl	8002a24 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7ff fa41 	bl	8002a24 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e03d      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x46a>
 80035bc:	e035      	b.n	800362a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7ff fa2e 	bl	8002a24 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7ff fa2a 	bl	8002a24 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e026      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x498>
 80035ea:	e01e      	b.n	800362a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e019      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
 8003600:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_OscConfig+0x500>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	429a      	cmp	r2, r3
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000

08003638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0d0      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d910      	bls.n	800367c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b67      	ldr	r3, [pc, #412]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 0207 	bic.w	r2, r3, #7
 8003662:	4965      	ldr	r1, [pc, #404]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b8      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a58      	ldr	r2, [pc, #352]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800369e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	494d      	ldr	r1, [pc, #308]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d040      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d115      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e073      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06b      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4936      	ldr	r1, [pc, #216]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7ff f97c 	bl	8002a24 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7ff f978 	bl	8002a24 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e053      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d210      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	4922      	ldr	r1, [pc, #136]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4916      	ldr	r1, [pc, #88]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	490e      	ldr	r1, [pc, #56]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f821 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	490a      	ldr	r1, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1cc>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1d0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff f8da 	bl	80029a0 <HAL_InitTick>

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
 8003800:	08006c84 	.word	0x08006c84
 8003804:	2000000c 	.word	0x2000000c
 8003808:	20000010 	.word	0x20000010

0800380c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	b490      	push	{r4, r7}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003812:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003814:	1d3c      	adds	r4, r7, #4
 8003816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800381c:	f240 2301 	movw	r3, #513	; 0x201
 8003820:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003836:	4b21      	ldr	r3, [pc, #132]	; (80038bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x40>
 8003846:	2b08      	cmp	r3, #8
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x46>
 800384a:	e02b      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384e:	623b      	str	r3, [r7, #32]
      break;
 8003850:	e02b      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	0c9b      	lsrs	r3, r3, #18
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3328      	adds	r3, #40	; 0x28
 800385c:	443b      	add	r3, r7
 800385e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003862:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d012      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	0c5b      	lsrs	r3, r3, #17
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	3328      	adds	r3, #40	; 0x28
 800387a:	443b      	add	r3, r7
 800387c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003880:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003886:	fb03 f202 	mul.w	r2, r3, r2
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e004      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003898:	fb02 f303 	mul.w	r3, r2, r3
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	623b      	str	r3, [r7, #32]
      break;
 80038a2:	e002      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038a6:	623b      	str	r3, [r7, #32]
      break;
 80038a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038aa:	6a3b      	ldr	r3, [r7, #32]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc90      	pop	{r4, r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	08006c74 	.word	0x08006c74
 80038bc:	40021000 	.word	0x40021000
 80038c0:	007a1200 	.word	0x007a1200
 80038c4:	003d0900 	.word	0x003d0900

080038c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	2000000c 	.word	0x2000000c

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e0:	f7ff fff2 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	08006c94 	.word	0x08006c94

08003904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003908:	f7ff ffde 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	0adb      	lsrs	r3, r3, #11
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	08006c94 	.word	0x08006c94

0800392c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <RCC_Delay+0x34>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <RCC_Delay+0x38>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0a5b      	lsrs	r3, r3, #9
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003948:	bf00      	nop
  }
  while (Delay --);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1e5a      	subs	r2, r3, #1
 800394e:	60fa      	str	r2, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f9      	bne.n	8003948 <RCC_Delay+0x1c>
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	2000000c 	.word	0x2000000c
 8003964:	10624dd3 	.word	0x10624dd3

08003968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e041      	b.n	80039fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe fe9a 	bl	80026c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f000 fd50 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d001      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e03a      	b.n	8003a96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_TIM_Base_Start_IT+0x98>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x58>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d009      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x58>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x58>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d111      	bne.n	8003a84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d010      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a82:	e007      	b.n	8003a94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800

08003aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e041      	b.n	8003b42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe fe1c 	bl	8002710 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 fcae 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <HAL_TIM_PWM_Start+0x24>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e022      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d109      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x3e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e015      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d109      	bne.n	8003ba4 <HAL_TIM_PWM_Start+0x58>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e05e      	b.n	8003c7c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0x82>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bcc:	e013      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start+0x92>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0xa2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	e003      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fea4 	bl	800494c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_TIM_PWM_Start+0x138>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_TIM_PWM_Start+0x138>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_TIM_PWM_Start+0xfa>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c30:	d009      	beq.n	8003c46 <HAL_TIM_PWM_Start+0xfa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <HAL_TIM_PWM_Start+0x13c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_TIM_PWM_Start+0xfa>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <HAL_TIM_PWM_Start+0x140>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d111      	bne.n	8003c6a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b06      	cmp	r3, #6
 8003c56:	d010      	beq.n	8003c7a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c68:	e007      	b.n	8003c7a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800

08003c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e093      	b.n	8003dcc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fe fd47 	bl	800274c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd4:	f023 0307 	bic.w	r3, r3, #7
 8003cd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f000 fbb1 	bl	800444c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	4313      	orrs	r3, r2
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d30:	f023 030c 	bic.w	r3, r3, #12
 8003d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	011a      	lsls	r2, r3, #4
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	031b      	lsls	r3, r3, #12
 8003d60:	4313      	orrs	r3, r2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003df4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dfc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d110      	bne.n	8003e26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e0a:	7b7b      	ldrb	r3, [r7, #13]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d001      	beq.n	8003e14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e069      	b.n	8003ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e24:	e031      	b.n	8003e8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d110      	bne.n	8003e4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e2c:	7bbb      	ldrb	r3, [r7, #14]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e32:	7b3b      	ldrb	r3, [r7, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d001      	beq.n	8003e3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e055      	b.n	8003ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e4c:	e01d      	b.n	8003e8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d108      	bne.n	8003e66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e5a:	7b7b      	ldrb	r3, [r7, #13]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e60:	7b3b      	ldrb	r3, [r7, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e03e      	b.n	8003ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_TIM_Encoder_Start+0xc4>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d008      	beq.n	8003ea8 <HAL_TIM_Encoder_Start+0xd4>
 8003e96:	e00f      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fd53 	bl	800494c <TIM_CCxChannelCmd>
      break;
 8003ea6:	e016      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	2104      	movs	r1, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fd4b 	bl	800494c <TIM_CCxChannelCmd>
      break;
 8003eb6:	e00e      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fd43 	bl	800494c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2104      	movs	r1, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fd3c 	bl	800494c <TIM_CCxChannelCmd>
      break;
 8003ed4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa6f 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa62 	bl	8004404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa71 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0204 	mvn.w	r2, #4
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa45 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa38 	bl	8004404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fa47 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa1b 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa0e 	bl	8004404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa1d 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0210 	mvn.w	r2, #16
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2208      	movs	r2, #8
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9f1 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9e4 	bl	8004404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f9f3 	bl	8004428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0201 	mvn.w	r2, #1
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fcb2 	bl	80019d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d10e      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d107      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fce1 	bl	8004a62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d10e      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f9b7 	bl	800443a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0220 	mvn.w	r2, #32
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fcac 	bl	8004a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004116:	2302      	movs	r3, #2
 8004118:	e0ac      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x174>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	f200 809f 	bhi.w	8004268 <HAL_TIM_PWM_ConfigChannel+0x168>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004165 	.word	0x08004165
 8004134:	08004269 	.word	0x08004269
 8004138:	08004269 	.word	0x08004269
 800413c:	08004269 	.word	0x08004269
 8004140:	080041a5 	.word	0x080041a5
 8004144:	08004269 	.word	0x08004269
 8004148:	08004269 	.word	0x08004269
 800414c:	08004269 	.word	0x08004269
 8004150:	080041e7 	.word	0x080041e7
 8004154:	08004269 	.word	0x08004269
 8004158:	08004269 	.word	0x08004269
 800415c:	08004269 	.word	0x08004269
 8004160:	08004227 	.word	0x08004227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f9d0 	bl	8004510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6999      	ldr	r1, [r3, #24]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	619a      	str	r2, [r3, #24]
      break;
 80041a2:	e062      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fa16 	bl	80045dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
      break;
 80041e4:	e041      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fa5f 	bl	80046b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0208 	orr.w	r2, r2, #8
 8004200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69d9      	ldr	r1, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	61da      	str	r2, [r3, #28]
      break;
 8004224:	e021      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 faa9 	bl	8004784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	61da      	str	r2, [r3, #28]
      break;
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e0b3      	b.n	80043fc <HAL_TIM_ConfigClockSource+0x180>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd0>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	f000 8085 	beq.w	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xa2>
 80042e8:	2b70      	cmp	r3, #112	; 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042ec:	2b60      	cmp	r3, #96	; 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x116>
 80042f0:	2b60      	cmp	r3, #96	; 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042f4:	2b50      	cmp	r3, #80	; 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xf6>
 80042f8:	2b50      	cmp	r3, #80	; 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x136>
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f000 faee 	bl	800490e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004340:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04e      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f000 fad7 	bl	800490e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fa4e 	bl	8004820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	; 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 faa5 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 8004390:	e02b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fa6c 	bl	800487c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	; 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fa95 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fa2e 	bl	8004820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa85 	bl	80048da <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 fa7c 	bl	80048da <TIM_ITRx_SetConfig>
        break;
 80043e2:	e002      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a29      	ldr	r2, [pc, #164]	; (8004504 <TIM_Base_SetConfig+0xb8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_Base_SetConfig+0x30>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d007      	beq.n	800447c <TIM_Base_SetConfig+0x30>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a26      	ldr	r2, [pc, #152]	; (8004508 <TIM_Base_SetConfig+0xbc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_Base_SetConfig+0x30>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <TIM_Base_SetConfig+0xc0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d108      	bne.n	800448e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <TIM_Base_SetConfig+0xb8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00b      	beq.n	80044ae <TIM_Base_SetConfig+0x62>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d007      	beq.n	80044ae <TIM_Base_SetConfig+0x62>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <TIM_Base_SetConfig+0xbc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_Base_SetConfig+0x62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a18      	ldr	r2, [pc, #96]	; (800450c <TIM_Base_SetConfig+0xc0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d108      	bne.n	80044c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a07      	ldr	r2, [pc, #28]	; (8004504 <TIM_Base_SetConfig+0xb8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d103      	bne.n	80044f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	615a      	str	r2, [r3, #20]
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800

08004510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 0302 	bic.w	r3, r3, #2
 8004558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <TIM_OC1_SetConfig+0xc8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10c      	bne.n	8004586 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0308 	bic.w	r3, r3, #8
 8004572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <TIM_OC1_SetConfig+0xc8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800459c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00

080045dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0210 	bic.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0320 	bic.w	r3, r3, #32
 8004626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <TIM_OC2_SetConfig+0xd0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10d      	bne.n	8004658 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a14      	ldr	r2, [pc, #80]	; (80046ac <TIM_OC2_SetConfig+0xd0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d113      	bne.n	8004688 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800466e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	40012c00 	.word	0x40012c00

080046b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <TIM_OC3_SetConfig+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10d      	bne.n	800472a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a14      	ldr	r2, [pc, #80]	; (8004780 <TIM_OC3_SetConfig+0xd0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d113      	bne.n	800475a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00

08004784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0f      	ldr	r2, [pc, #60]	; (800481c <TIM_OC4_SetConfig+0x98>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d109      	bne.n	80047f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	019b      	lsls	r3, r3, #6
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr
 800481c:	40012c00 	.word	0x40012c00

08004820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 0201 	bic.w	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f023 030a 	bic.w	r3, r3, #10
 800485c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 0210 	bic.w	r2, r3, #16
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	031b      	lsls	r3, r3, #12
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f043 0307 	orr.w	r3, r3, #7
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	609a      	str	r2, [r3, #8]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800490e:	b480      	push	{r7}
 8004910:	b087      	sub	sp, #28
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004928:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	431a      	orrs	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4313      	orrs	r3, r2
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2201      	movs	r2, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e046      	b.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d009      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10c      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800

08004a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e03f      	b.n	8004b06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd fef0 	bl	8002880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fc85 	bl	80053c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b08a      	sub	sp, #40	; 0x28
 8004b12:	af02      	add	r7, sp, #8
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d17c      	bne.n	8004c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_UART_Transmit+0x2c>
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e075      	b.n	8004c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_UART_Transmit+0x3e>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e06e      	b.n	8004c2a <HAL_UART_Transmit+0x11c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2221      	movs	r2, #33	; 0x21
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fd ff5f 	bl	8002a24 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d108      	bne.n	8004b90 <HAL_UART_Transmit+0x82>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ba0:	e02a      	b.n	8004bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fa38 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e036      	b.n	8004c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e007      	b.n	8004bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1cf      	bne.n	8004ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2140      	movs	r1, #64	; 0x40
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fa08 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e006      	b.n	8004c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d11d      	bne.n	8004c88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_UART_Receive_IT+0x26>
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e016      	b.n	8004c8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Receive_IT+0x38>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e00f      	b.n	8004c8a <HAL_UART_Receive_IT+0x58>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fa19 	bl	80050b6 <UART_Start_Receive_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	e000      	b.n	8004c8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10d      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x52>
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fac9 	bl	8005276 <UART_Receive_IT>
      return;
 8004ce4:	e17b      	b.n	8004fde <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80b1 	beq.w	8004e50 <HAL_UART_IRQHandler+0x1bc>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <HAL_UART_IRQHandler+0x70>
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a6 	beq.w	8004e50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_UART_IRQHandler+0x90>
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_UART_IRQHandler+0xb0>
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f043 0202 	orr.w	r2, r3, #2
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_UART_IRQHandler+0xd0>
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f043 0204 	orr.w	r2, r3, #4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00f      	beq.n	8004d8e <HAL_UART_IRQHandler+0xfa>
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_UART_IRQHandler+0xee>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0208 	orr.w	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 811e 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_UART_IRQHandler+0x11e>
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fa62 	bl	8005276 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <HAL_UART_IRQHandler+0x146>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d031      	beq.n	8004e3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9a4 	bl	8005128 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d023      	beq.n	8004e36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d013      	beq.n	8004e2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4a76      	ldr	r2, [pc, #472]	; (8004fe4 <HAL_UART_IRQHandler+0x350>)
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd ff7c 	bl	8002d10 <HAL_DMA_Abort_IT>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	e00e      	b.n	8004e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8e3 	bl	8004ffa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e00a      	b.n	8004e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8df 	bl	8004ffa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e006      	b.n	8004e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8db 	bl	8004ffa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e4a:	e0c3      	b.n	8004fd4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	bf00      	nop
    return;
 8004e4e:	e0c1      	b.n	8004fd4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 80a1 	bne.w	8004f9c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 809b 	beq.w	8004f9c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8095 	beq.w	8004f9c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04e      	beq.n	8004f34 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ea0:	8a3b      	ldrh	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8098 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eac:	8a3a      	ldrh	r2, [r7, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	f080 8092 	bcs.w	8004fd8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8a3a      	ldrh	r2, [r7, #16]
 8004eb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d02b      	beq.n	8004f1c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0210 	bic.w	r2, r2, #16
 8004f10:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd febf 	bl	8002c9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f86d 	bl	800500c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f32:	e051      	b.n	8004fd8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d047      	beq.n	8004fdc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004f4c:	8a7b      	ldrh	r3, [r7, #18]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d044      	beq.n	8004fdc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f60:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0210 	bic.w	r2, r2, #16
 8004f8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f90:	8a7b      	ldrh	r3, [r7, #18]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f839 	bl	800500c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f9a:	e01f      	b.n	8004fdc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x324>
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f8f9 	bl	80051a8 <UART_Transmit_IT>
    return;
 8004fb6:	e012      	b.n	8004fde <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_UART_IRQHandler+0x34a>
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f93a 	bl	8005246 <UART_EndTransmit_IT>
    return;
 8004fd2:	e004      	b.n	8004fde <HAL_UART_IRQHandler+0x34a>
    return;
 8004fd4:	bf00      	nop
 8004fd6:	e002      	b.n	8004fde <HAL_UART_IRQHandler+0x34a>
      return;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <HAL_UART_IRQHandler+0x34a>
      return;
 8004fdc:	bf00      	nop
  }
}
 8004fde:	3728      	adds	r7, #40	; 0x28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	08005181 	.word	0x08005181

08004fe8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005032:	e02c      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503a:	d028      	beq.n	800508e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x30>
 8005042:	f7fd fcef 	bl	8002a24 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	429a      	cmp	r2, r3
 8005050:	d21d      	bcs.n	800508e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005060:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e00f      	b.n	80050ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4013      	ands	r3, r2
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	bf0c      	ite	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	2300      	movne	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d0c3      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2222      	movs	r2, #34	; 0x22
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0220 	orr.w	r2, r2, #32
 800511a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800513e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695a      	ldr	r2, [r3, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0210 	bic.w	r2, r2, #16
 8005166:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff ff2d 	bl	8004ffa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b21      	cmp	r3, #33	; 0x21
 80051ba:	d13e      	bne.n	800523a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d114      	bne.n	80051f0 <UART_Transmit_IT+0x48>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d110      	bne.n	80051f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]
 80051ee:	e008      	b.n	8005202 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	1c59      	adds	r1, r3, #1
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6211      	str	r1, [r2, #32]
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29b      	uxth	r3, r3
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4619      	mov	r1, r3
 8005210:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005224:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005234:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff febe 	bl	8004fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b086      	sub	sp, #24
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b22      	cmp	r3, #34	; 0x22
 8005288:	f040 8099 	bne.w	80053be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005294:	d117      	bne.n	80052c6 <UART_Receive_IT+0x50>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d113      	bne.n	80052c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
 80052c4:	e026      	b.n	8005314 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d8:	d007      	beq.n	80052ea <UART_Receive_IT+0x74>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <UART_Receive_IT+0x82>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e008      	b.n	800530a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005304:	b2da      	uxtb	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29b      	uxth	r3, r3
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	4619      	mov	r1, r3
 8005322:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005324:	2b00      	cmp	r3, #0
 8005326:	d148      	bne.n	80053ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0220 	bic.w	r2, r2, #32
 8005336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	2b01      	cmp	r3, #1
 8005366:	d123      	bne.n	80053b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0210 	bic.w	r2, r2, #16
 800537c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b10      	cmp	r3, #16
 800538a:	d10a      	bne.n	80053a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fe2f 	bl	800500c <HAL_UARTEx_RxEventCallback>
 80053ae:	e002      	b.n	80053b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fc ffcb 	bl	800234c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e002      	b.n	80053c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e000      	b.n	80053c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
  }
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005402:	f023 030c 	bic.w	r3, r3, #12
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	430b      	orrs	r3, r1
 800540e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2c      	ldr	r2, [pc, #176]	; (80054dc <UART_SetConfig+0x114>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d103      	bne.n	8005438 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005430:	f7fe fa68 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	e002      	b.n	800543e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005438:	f7fe fa50 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 800543c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009a      	lsls	r2, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	4a22      	ldr	r2, [pc, #136]	; (80054e0 <UART_SetConfig+0x118>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	0119      	lsls	r1, r3, #4
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009a      	lsls	r2, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	fbb2 f2f3 	udiv	r2, r2, r3
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <UART_SetConfig+0x118>)
 8005476:	fba3 0302 	umull	r0, r3, r3, r2
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	2064      	movs	r0, #100	; 0x64
 800547e:	fb00 f303 	mul.w	r3, r0, r3
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	3332      	adds	r3, #50	; 0x32
 8005488:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <UART_SetConfig+0x118>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005494:	4419      	add	r1, r3
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009a      	lsls	r2, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <UART_SetConfig+0x118>)
 80054ae:	fba3 0302 	umull	r0, r3, r3, r2
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2064      	movs	r0, #100	; 0x64
 80054b6:	fb00 f303 	mul.w	r3, r0, r3
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	3332      	adds	r3, #50	; 0x32
 80054c0:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <UART_SetConfig+0x118>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	f003 020f 	and.w	r2, r3, #15
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	440a      	add	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40013800 	.word	0x40013800
 80054e0:	51eb851f 	.word	0x51eb851f

080054e4 <__errno>:
 80054e4:	4b01      	ldr	r3, [pc, #4]	; (80054ec <__errno+0x8>)
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20000018 	.word	0x20000018

080054f0 <__libc_init_array>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	2600      	movs	r6, #0
 80054f4:	4d0c      	ldr	r5, [pc, #48]	; (8005528 <__libc_init_array+0x38>)
 80054f6:	4c0d      	ldr	r4, [pc, #52]	; (800552c <__libc_init_array+0x3c>)
 80054f8:	1b64      	subs	r4, r4, r5
 80054fa:	10a4      	asrs	r4, r4, #2
 80054fc:	42a6      	cmp	r6, r4
 80054fe:	d109      	bne.n	8005514 <__libc_init_array+0x24>
 8005500:	f001 fb90 	bl	8006c24 <_init>
 8005504:	2600      	movs	r6, #0
 8005506:	4d0a      	ldr	r5, [pc, #40]	; (8005530 <__libc_init_array+0x40>)
 8005508:	4c0a      	ldr	r4, [pc, #40]	; (8005534 <__libc_init_array+0x44>)
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	42a6      	cmp	r6, r4
 8005510:	d105      	bne.n	800551e <__libc_init_array+0x2e>
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	f855 3b04 	ldr.w	r3, [r5], #4
 8005518:	4798      	blx	r3
 800551a:	3601      	adds	r6, #1
 800551c:	e7ee      	b.n	80054fc <__libc_init_array+0xc>
 800551e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005522:	4798      	blx	r3
 8005524:	3601      	adds	r6, #1
 8005526:	e7f2      	b.n	800550e <__libc_init_array+0x1e>
 8005528:	08006d00 	.word	0x08006d00
 800552c:	08006d00 	.word	0x08006d00
 8005530:	08006d00 	.word	0x08006d00
 8005534:	08006d04 	.word	0x08006d04

08005538 <malloc>:
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <malloc+0xc>)
 800553a:	4601      	mov	r1, r0
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	f000 b889 	b.w	8005654 <_malloc_r>
 8005542:	bf00      	nop
 8005544:	20000018 	.word	0x20000018

08005548 <free>:
 8005548:	4b02      	ldr	r3, [pc, #8]	; (8005554 <free+0xc>)
 800554a:	4601      	mov	r1, r0
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	f000 b819 	b.w	8005584 <_free_r>
 8005552:	bf00      	nop
 8005554:	20000018 	.word	0x20000018

08005558 <memcpy>:
 8005558:	440a      	add	r2, r1
 800555a:	4291      	cmp	r1, r2
 800555c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005560:	d100      	bne.n	8005564 <memcpy+0xc>
 8005562:	4770      	bx	lr
 8005564:	b510      	push	{r4, lr}
 8005566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556a:	4291      	cmp	r1, r2
 800556c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005570:	d1f9      	bne.n	8005566 <memcpy+0xe>
 8005572:	bd10      	pop	{r4, pc}

08005574 <memset>:
 8005574:	4603      	mov	r3, r0
 8005576:	4402      	add	r2, r0
 8005578:	4293      	cmp	r3, r2
 800557a:	d100      	bne.n	800557e <memset+0xa>
 800557c:	4770      	bx	lr
 800557e:	f803 1b01 	strb.w	r1, [r3], #1
 8005582:	e7f9      	b.n	8005578 <memset+0x4>

08005584 <_free_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4605      	mov	r5, r0
 8005588:	2900      	cmp	r1, #0
 800558a:	d040      	beq.n	800560e <_free_r+0x8a>
 800558c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005590:	1f0c      	subs	r4, r1, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	bfb8      	it	lt
 8005596:	18e4      	addlt	r4, r4, r3
 8005598:	f000 f900 	bl	800579c <__malloc_lock>
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <_free_r+0x8c>)
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	b933      	cbnz	r3, 80055b0 <_free_r+0x2c>
 80055a2:	6063      	str	r3, [r4, #4]
 80055a4:	6014      	str	r4, [r2, #0]
 80055a6:	4628      	mov	r0, r5
 80055a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ac:	f000 b8fc 	b.w	80057a8 <__malloc_unlock>
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	d908      	bls.n	80055c6 <_free_r+0x42>
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	1821      	adds	r1, r4, r0
 80055b8:	428b      	cmp	r3, r1
 80055ba:	bf01      	itttt	eq
 80055bc:	6819      	ldreq	r1, [r3, #0]
 80055be:	685b      	ldreq	r3, [r3, #4]
 80055c0:	1809      	addeq	r1, r1, r0
 80055c2:	6021      	streq	r1, [r4, #0]
 80055c4:	e7ed      	b.n	80055a2 <_free_r+0x1e>
 80055c6:	461a      	mov	r2, r3
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	b10b      	cbz	r3, 80055d0 <_free_r+0x4c>
 80055cc:	42a3      	cmp	r3, r4
 80055ce:	d9fa      	bls.n	80055c6 <_free_r+0x42>
 80055d0:	6811      	ldr	r1, [r2, #0]
 80055d2:	1850      	adds	r0, r2, r1
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d10b      	bne.n	80055f0 <_free_r+0x6c>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	4401      	add	r1, r0
 80055dc:	1850      	adds	r0, r2, r1
 80055de:	4283      	cmp	r3, r0
 80055e0:	6011      	str	r1, [r2, #0]
 80055e2:	d1e0      	bne.n	80055a6 <_free_r+0x22>
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4401      	add	r1, r0
 80055ea:	6011      	str	r1, [r2, #0]
 80055ec:	6053      	str	r3, [r2, #4]
 80055ee:	e7da      	b.n	80055a6 <_free_r+0x22>
 80055f0:	d902      	bls.n	80055f8 <_free_r+0x74>
 80055f2:	230c      	movs	r3, #12
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	e7d6      	b.n	80055a6 <_free_r+0x22>
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	1821      	adds	r1, r4, r0
 80055fc:	428b      	cmp	r3, r1
 80055fe:	bf01      	itttt	eq
 8005600:	6819      	ldreq	r1, [r3, #0]
 8005602:	685b      	ldreq	r3, [r3, #4]
 8005604:	1809      	addeq	r1, r1, r0
 8005606:	6021      	streq	r1, [r4, #0]
 8005608:	6063      	str	r3, [r4, #4]
 800560a:	6054      	str	r4, [r2, #4]
 800560c:	e7cb      	b.n	80055a6 <_free_r+0x22>
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000bb8 	.word	0x20000bb8

08005614 <sbrk_aligned>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4e0e      	ldr	r6, [pc, #56]	; (8005650 <sbrk_aligned+0x3c>)
 8005618:	460c      	mov	r4, r1
 800561a:	6831      	ldr	r1, [r6, #0]
 800561c:	4605      	mov	r5, r0
 800561e:	b911      	cbnz	r1, 8005626 <sbrk_aligned+0x12>
 8005620:	f000 f88c 	bl	800573c <_sbrk_r>
 8005624:	6030      	str	r0, [r6, #0]
 8005626:	4621      	mov	r1, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f000 f887 	bl	800573c <_sbrk_r>
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	d00a      	beq.n	8005648 <sbrk_aligned+0x34>
 8005632:	1cc4      	adds	r4, r0, #3
 8005634:	f024 0403 	bic.w	r4, r4, #3
 8005638:	42a0      	cmp	r0, r4
 800563a:	d007      	beq.n	800564c <sbrk_aligned+0x38>
 800563c:	1a21      	subs	r1, r4, r0
 800563e:	4628      	mov	r0, r5
 8005640:	f000 f87c 	bl	800573c <_sbrk_r>
 8005644:	3001      	adds	r0, #1
 8005646:	d101      	bne.n	800564c <sbrk_aligned+0x38>
 8005648:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800564c:	4620      	mov	r0, r4
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	20000bbc 	.word	0x20000bbc

08005654 <_malloc_r>:
 8005654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005658:	1ccd      	adds	r5, r1, #3
 800565a:	f025 0503 	bic.w	r5, r5, #3
 800565e:	3508      	adds	r5, #8
 8005660:	2d0c      	cmp	r5, #12
 8005662:	bf38      	it	cc
 8005664:	250c      	movcc	r5, #12
 8005666:	2d00      	cmp	r5, #0
 8005668:	4607      	mov	r7, r0
 800566a:	db01      	blt.n	8005670 <_malloc_r+0x1c>
 800566c:	42a9      	cmp	r1, r5
 800566e:	d905      	bls.n	800567c <_malloc_r+0x28>
 8005670:	230c      	movs	r3, #12
 8005672:	2600      	movs	r6, #0
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4630      	mov	r0, r6
 8005678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567c:	4e2e      	ldr	r6, [pc, #184]	; (8005738 <_malloc_r+0xe4>)
 800567e:	f000 f88d 	bl	800579c <__malloc_lock>
 8005682:	6833      	ldr	r3, [r6, #0]
 8005684:	461c      	mov	r4, r3
 8005686:	bb34      	cbnz	r4, 80056d6 <_malloc_r+0x82>
 8005688:	4629      	mov	r1, r5
 800568a:	4638      	mov	r0, r7
 800568c:	f7ff ffc2 	bl	8005614 <sbrk_aligned>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	4604      	mov	r4, r0
 8005694:	d14d      	bne.n	8005732 <_malloc_r+0xde>
 8005696:	6834      	ldr	r4, [r6, #0]
 8005698:	4626      	mov	r6, r4
 800569a:	2e00      	cmp	r6, #0
 800569c:	d140      	bne.n	8005720 <_malloc_r+0xcc>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	4631      	mov	r1, r6
 80056a2:	4638      	mov	r0, r7
 80056a4:	eb04 0803 	add.w	r8, r4, r3
 80056a8:	f000 f848 	bl	800573c <_sbrk_r>
 80056ac:	4580      	cmp	r8, r0
 80056ae:	d13a      	bne.n	8005726 <_malloc_r+0xd2>
 80056b0:	6821      	ldr	r1, [r4, #0]
 80056b2:	3503      	adds	r5, #3
 80056b4:	1a6d      	subs	r5, r5, r1
 80056b6:	f025 0503 	bic.w	r5, r5, #3
 80056ba:	3508      	adds	r5, #8
 80056bc:	2d0c      	cmp	r5, #12
 80056be:	bf38      	it	cc
 80056c0:	250c      	movcc	r5, #12
 80056c2:	4638      	mov	r0, r7
 80056c4:	4629      	mov	r1, r5
 80056c6:	f7ff ffa5 	bl	8005614 <sbrk_aligned>
 80056ca:	3001      	adds	r0, #1
 80056cc:	d02b      	beq.n	8005726 <_malloc_r+0xd2>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	442b      	add	r3, r5
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	e00e      	b.n	80056f4 <_malloc_r+0xa0>
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	1b52      	subs	r2, r2, r5
 80056da:	d41e      	bmi.n	800571a <_malloc_r+0xc6>
 80056dc:	2a0b      	cmp	r2, #11
 80056de:	d916      	bls.n	800570e <_malloc_r+0xba>
 80056e0:	1961      	adds	r1, r4, r5
 80056e2:	42a3      	cmp	r3, r4
 80056e4:	6025      	str	r5, [r4, #0]
 80056e6:	bf18      	it	ne
 80056e8:	6059      	strne	r1, [r3, #4]
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	bf08      	it	eq
 80056ee:	6031      	streq	r1, [r6, #0]
 80056f0:	5162      	str	r2, [r4, r5]
 80056f2:	604b      	str	r3, [r1, #4]
 80056f4:	4638      	mov	r0, r7
 80056f6:	f104 060b 	add.w	r6, r4, #11
 80056fa:	f000 f855 	bl	80057a8 <__malloc_unlock>
 80056fe:	f026 0607 	bic.w	r6, r6, #7
 8005702:	1d23      	adds	r3, r4, #4
 8005704:	1af2      	subs	r2, r6, r3
 8005706:	d0b6      	beq.n	8005676 <_malloc_r+0x22>
 8005708:	1b9b      	subs	r3, r3, r6
 800570a:	50a3      	str	r3, [r4, r2]
 800570c:	e7b3      	b.n	8005676 <_malloc_r+0x22>
 800570e:	6862      	ldr	r2, [r4, #4]
 8005710:	42a3      	cmp	r3, r4
 8005712:	bf0c      	ite	eq
 8005714:	6032      	streq	r2, [r6, #0]
 8005716:	605a      	strne	r2, [r3, #4]
 8005718:	e7ec      	b.n	80056f4 <_malloc_r+0xa0>
 800571a:	4623      	mov	r3, r4
 800571c:	6864      	ldr	r4, [r4, #4]
 800571e:	e7b2      	b.n	8005686 <_malloc_r+0x32>
 8005720:	4634      	mov	r4, r6
 8005722:	6876      	ldr	r6, [r6, #4]
 8005724:	e7b9      	b.n	800569a <_malloc_r+0x46>
 8005726:	230c      	movs	r3, #12
 8005728:	4638      	mov	r0, r7
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	f000 f83c 	bl	80057a8 <__malloc_unlock>
 8005730:	e7a1      	b.n	8005676 <_malloc_r+0x22>
 8005732:	6025      	str	r5, [r4, #0]
 8005734:	e7de      	b.n	80056f4 <_malloc_r+0xa0>
 8005736:	bf00      	nop
 8005738:	20000bb8 	.word	0x20000bb8

0800573c <_sbrk_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	2300      	movs	r3, #0
 8005740:	4d05      	ldr	r5, [pc, #20]	; (8005758 <_sbrk_r+0x1c>)
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fc fe88 	bl	800245c <_sbrk>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_sbrk_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_sbrk_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20000bc0 	.word	0x20000bc0

0800575c <siprintf>:
 800575c:	b40e      	push	{r1, r2, r3}
 800575e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005762:	b500      	push	{lr}
 8005764:	b09c      	sub	sp, #112	; 0x70
 8005766:	ab1d      	add	r3, sp, #116	; 0x74
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	9006      	str	r0, [sp, #24]
 800576c:	9107      	str	r1, [sp, #28]
 800576e:	9104      	str	r1, [sp, #16]
 8005770:	4808      	ldr	r0, [pc, #32]	; (8005794 <siprintf+0x38>)
 8005772:	4909      	ldr	r1, [pc, #36]	; (8005798 <siprintf+0x3c>)
 8005774:	f853 2b04 	ldr.w	r2, [r3], #4
 8005778:	9105      	str	r1, [sp, #20]
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	a902      	add	r1, sp, #8
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	f000 f874 	bl	800586c <_svfiprintf_r>
 8005784:	2200      	movs	r2, #0
 8005786:	9b02      	ldr	r3, [sp, #8]
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	b01c      	add	sp, #112	; 0x70
 800578c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005790:	b003      	add	sp, #12
 8005792:	4770      	bx	lr
 8005794:	20000018 	.word	0x20000018
 8005798:	ffff0208 	.word	0xffff0208

0800579c <__malloc_lock>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__malloc_lock+0x8>)
 800579e:	f000 bafb 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 80057a2:	bf00      	nop
 80057a4:	20000bc4 	.word	0x20000bc4

080057a8 <__malloc_unlock>:
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <__malloc_unlock+0x8>)
 80057aa:	f000 baf6 	b.w	8005d9a <__retarget_lock_release_recursive>
 80057ae:	bf00      	nop
 80057b0:	20000bc4 	.word	0x20000bc4

080057b4 <__ssputs_r>:
 80057b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	688e      	ldr	r6, [r1, #8]
 80057ba:	4682      	mov	sl, r0
 80057bc:	429e      	cmp	r6, r3
 80057be:	460c      	mov	r4, r1
 80057c0:	4690      	mov	r8, r2
 80057c2:	461f      	mov	r7, r3
 80057c4:	d838      	bhi.n	8005838 <__ssputs_r+0x84>
 80057c6:	898a      	ldrh	r2, [r1, #12]
 80057c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057cc:	d032      	beq.n	8005834 <__ssputs_r+0x80>
 80057ce:	6825      	ldr	r5, [r4, #0]
 80057d0:	6909      	ldr	r1, [r1, #16]
 80057d2:	3301      	adds	r3, #1
 80057d4:	eba5 0901 	sub.w	r9, r5, r1
 80057d8:	6965      	ldr	r5, [r4, #20]
 80057da:	444b      	add	r3, r9
 80057dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057e4:	106d      	asrs	r5, r5, #1
 80057e6:	429d      	cmp	r5, r3
 80057e8:	bf38      	it	cc
 80057ea:	461d      	movcc	r5, r3
 80057ec:	0553      	lsls	r3, r2, #21
 80057ee:	d531      	bpl.n	8005854 <__ssputs_r+0xa0>
 80057f0:	4629      	mov	r1, r5
 80057f2:	f7ff ff2f 	bl	8005654 <_malloc_r>
 80057f6:	4606      	mov	r6, r0
 80057f8:	b950      	cbnz	r0, 8005810 <__ssputs_r+0x5c>
 80057fa:	230c      	movs	r3, #12
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005800:	f8ca 3000 	str.w	r3, [sl]
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005810:	464a      	mov	r2, r9
 8005812:	6921      	ldr	r1, [r4, #16]
 8005814:	f7ff fea0 	bl	8005558 <memcpy>
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800581e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	6126      	str	r6, [r4, #16]
 8005826:	444e      	add	r6, r9
 8005828:	6026      	str	r6, [r4, #0]
 800582a:	463e      	mov	r6, r7
 800582c:	6165      	str	r5, [r4, #20]
 800582e:	eba5 0509 	sub.w	r5, r5, r9
 8005832:	60a5      	str	r5, [r4, #8]
 8005834:	42be      	cmp	r6, r7
 8005836:	d900      	bls.n	800583a <__ssputs_r+0x86>
 8005838:	463e      	mov	r6, r7
 800583a:	4632      	mov	r2, r6
 800583c:	4641      	mov	r1, r8
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	f000 faba 	bl	8005db8 <memmove>
 8005844:	68a3      	ldr	r3, [r4, #8]
 8005846:	2000      	movs	r0, #0
 8005848:	1b9b      	subs	r3, r3, r6
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	4433      	add	r3, r6
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	e7db      	b.n	800580c <__ssputs_r+0x58>
 8005854:	462a      	mov	r2, r5
 8005856:	f000 fac9 	bl	8005dec <_realloc_r>
 800585a:	4606      	mov	r6, r0
 800585c:	2800      	cmp	r0, #0
 800585e:	d1e1      	bne.n	8005824 <__ssputs_r+0x70>
 8005860:	4650      	mov	r0, sl
 8005862:	6921      	ldr	r1, [r4, #16]
 8005864:	f7ff fe8e 	bl	8005584 <_free_r>
 8005868:	e7c7      	b.n	80057fa <__ssputs_r+0x46>
	...

0800586c <_svfiprintf_r>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	4698      	mov	r8, r3
 8005872:	898b      	ldrh	r3, [r1, #12]
 8005874:	4607      	mov	r7, r0
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	460d      	mov	r5, r1
 800587a:	4614      	mov	r4, r2
 800587c:	b09d      	sub	sp, #116	; 0x74
 800587e:	d50e      	bpl.n	800589e <_svfiprintf_r+0x32>
 8005880:	690b      	ldr	r3, [r1, #16]
 8005882:	b963      	cbnz	r3, 800589e <_svfiprintf_r+0x32>
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	f7ff fee5 	bl	8005654 <_malloc_r>
 800588a:	6028      	str	r0, [r5, #0]
 800588c:	6128      	str	r0, [r5, #16]
 800588e:	b920      	cbnz	r0, 800589a <_svfiprintf_r+0x2e>
 8005890:	230c      	movs	r3, #12
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005898:	e0d1      	b.n	8005a3e <_svfiprintf_r+0x1d2>
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	616b      	str	r3, [r5, #20]
 800589e:	2300      	movs	r3, #0
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	2320      	movs	r3, #32
 80058a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a8:	2330      	movs	r3, #48	; 0x30
 80058aa:	f04f 0901 	mov.w	r9, #1
 80058ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80058b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a58 <_svfiprintf_r+0x1ec>
 80058b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058ba:	4623      	mov	r3, r4
 80058bc:	469a      	mov	sl, r3
 80058be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c2:	b10a      	cbz	r2, 80058c8 <_svfiprintf_r+0x5c>
 80058c4:	2a25      	cmp	r2, #37	; 0x25
 80058c6:	d1f9      	bne.n	80058bc <_svfiprintf_r+0x50>
 80058c8:	ebba 0b04 	subs.w	fp, sl, r4
 80058cc:	d00b      	beq.n	80058e6 <_svfiprintf_r+0x7a>
 80058ce:	465b      	mov	r3, fp
 80058d0:	4622      	mov	r2, r4
 80058d2:	4629      	mov	r1, r5
 80058d4:	4638      	mov	r0, r7
 80058d6:	f7ff ff6d 	bl	80057b4 <__ssputs_r>
 80058da:	3001      	adds	r0, #1
 80058dc:	f000 80aa 	beq.w	8005a34 <_svfiprintf_r+0x1c8>
 80058e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e2:	445a      	add	r2, fp
 80058e4:	9209      	str	r2, [sp, #36]	; 0x24
 80058e6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80a2 	beq.w	8005a34 <_svfiprintf_r+0x1c8>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058fa:	f10a 0a01 	add.w	sl, sl, #1
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	9307      	str	r3, [sp, #28]
 8005902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005906:	931a      	str	r3, [sp, #104]	; 0x68
 8005908:	4654      	mov	r4, sl
 800590a:	2205      	movs	r2, #5
 800590c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005910:	4851      	ldr	r0, [pc, #324]	; (8005a58 <_svfiprintf_r+0x1ec>)
 8005912:	f000 fa43 	bl	8005d9c <memchr>
 8005916:	9a04      	ldr	r2, [sp, #16]
 8005918:	b9d8      	cbnz	r0, 8005952 <_svfiprintf_r+0xe6>
 800591a:	06d0      	lsls	r0, r2, #27
 800591c:	bf44      	itt	mi
 800591e:	2320      	movmi	r3, #32
 8005920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005924:	0711      	lsls	r1, r2, #28
 8005926:	bf44      	itt	mi
 8005928:	232b      	movmi	r3, #43	; 0x2b
 800592a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b2a      	cmp	r3, #42	; 0x2a
 8005934:	d015      	beq.n	8005962 <_svfiprintf_r+0xf6>
 8005936:	4654      	mov	r4, sl
 8005938:	2000      	movs	r0, #0
 800593a:	f04f 0c0a 	mov.w	ip, #10
 800593e:	9a07      	ldr	r2, [sp, #28]
 8005940:	4621      	mov	r1, r4
 8005942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005946:	3b30      	subs	r3, #48	; 0x30
 8005948:	2b09      	cmp	r3, #9
 800594a:	d94e      	bls.n	80059ea <_svfiprintf_r+0x17e>
 800594c:	b1b0      	cbz	r0, 800597c <_svfiprintf_r+0x110>
 800594e:	9207      	str	r2, [sp, #28]
 8005950:	e014      	b.n	800597c <_svfiprintf_r+0x110>
 8005952:	eba0 0308 	sub.w	r3, r0, r8
 8005956:	fa09 f303 	lsl.w	r3, r9, r3
 800595a:	4313      	orrs	r3, r2
 800595c:	46a2      	mov	sl, r4
 800595e:	9304      	str	r3, [sp, #16]
 8005960:	e7d2      	b.n	8005908 <_svfiprintf_r+0x9c>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	1d19      	adds	r1, r3, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	9103      	str	r1, [sp, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	bfbb      	ittet	lt
 800596e:	425b      	neglt	r3, r3
 8005970:	f042 0202 	orrlt.w	r2, r2, #2
 8005974:	9307      	strge	r3, [sp, #28]
 8005976:	9307      	strlt	r3, [sp, #28]
 8005978:	bfb8      	it	lt
 800597a:	9204      	strlt	r2, [sp, #16]
 800597c:	7823      	ldrb	r3, [r4, #0]
 800597e:	2b2e      	cmp	r3, #46	; 0x2e
 8005980:	d10c      	bne.n	800599c <_svfiprintf_r+0x130>
 8005982:	7863      	ldrb	r3, [r4, #1]
 8005984:	2b2a      	cmp	r3, #42	; 0x2a
 8005986:	d135      	bne.n	80059f4 <_svfiprintf_r+0x188>
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	3402      	adds	r4, #2
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	9203      	str	r2, [sp, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	bfb8      	it	lt
 8005996:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a5c <_svfiprintf_r+0x1f0>
 80059a0:	2203      	movs	r2, #3
 80059a2:	4650      	mov	r0, sl
 80059a4:	7821      	ldrb	r1, [r4, #0]
 80059a6:	f000 f9f9 	bl	8005d9c <memchr>
 80059aa:	b140      	cbz	r0, 80059be <_svfiprintf_r+0x152>
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	eba0 000a 	sub.w	r0, r0, sl
 80059b2:	fa03 f000 	lsl.w	r0, r3, r0
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	3401      	adds	r4, #1
 80059ba:	4303      	orrs	r3, r0
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c2:	2206      	movs	r2, #6
 80059c4:	4826      	ldr	r0, [pc, #152]	; (8005a60 <_svfiprintf_r+0x1f4>)
 80059c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059ca:	f000 f9e7 	bl	8005d9c <memchr>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d038      	beq.n	8005a44 <_svfiprintf_r+0x1d8>
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <_svfiprintf_r+0x1f8>)
 80059d4:	bb1b      	cbnz	r3, 8005a1e <_svfiprintf_r+0x1b2>
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	3307      	adds	r3, #7
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	3308      	adds	r3, #8
 80059e0:	9303      	str	r3, [sp, #12]
 80059e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e4:	4433      	add	r3, r6
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	e767      	b.n	80058ba <_svfiprintf_r+0x4e>
 80059ea:	460c      	mov	r4, r1
 80059ec:	2001      	movs	r0, #1
 80059ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80059f2:	e7a5      	b.n	8005940 <_svfiprintf_r+0xd4>
 80059f4:	2300      	movs	r3, #0
 80059f6:	f04f 0c0a 	mov.w	ip, #10
 80059fa:	4619      	mov	r1, r3
 80059fc:	3401      	adds	r4, #1
 80059fe:	9305      	str	r3, [sp, #20]
 8005a00:	4620      	mov	r0, r4
 8005a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a06:	3a30      	subs	r2, #48	; 0x30
 8005a08:	2a09      	cmp	r2, #9
 8005a0a:	d903      	bls.n	8005a14 <_svfiprintf_r+0x1a8>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0c5      	beq.n	800599c <_svfiprintf_r+0x130>
 8005a10:	9105      	str	r1, [sp, #20]
 8005a12:	e7c3      	b.n	800599c <_svfiprintf_r+0x130>
 8005a14:	4604      	mov	r4, r0
 8005a16:	2301      	movs	r3, #1
 8005a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a1c:	e7f0      	b.n	8005a00 <_svfiprintf_r+0x194>
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	462a      	mov	r2, r5
 8005a24:	4638      	mov	r0, r7
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <_svfiprintf_r+0x1fc>)
 8005a28:	a904      	add	r1, sp, #16
 8005a2a:	f3af 8000 	nop.w
 8005a2e:	1c42      	adds	r2, r0, #1
 8005a30:	4606      	mov	r6, r0
 8005a32:	d1d6      	bne.n	80059e2 <_svfiprintf_r+0x176>
 8005a34:	89ab      	ldrh	r3, [r5, #12]
 8005a36:	065b      	lsls	r3, r3, #25
 8005a38:	f53f af2c 	bmi.w	8005894 <_svfiprintf_r+0x28>
 8005a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3e:	b01d      	add	sp, #116	; 0x74
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	ab03      	add	r3, sp, #12
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	462a      	mov	r2, r5
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <_svfiprintf_r+0x1fc>)
 8005a4e:	a904      	add	r1, sp, #16
 8005a50:	f000 f87c 	bl	8005b4c <_printf_i>
 8005a54:	e7eb      	b.n	8005a2e <_svfiprintf_r+0x1c2>
 8005a56:	bf00      	nop
 8005a58:	08006c9c 	.word	0x08006c9c
 8005a5c:	08006ca2 	.word	0x08006ca2
 8005a60:	08006ca6 	.word	0x08006ca6
 8005a64:	00000000 	.word	0x00000000
 8005a68:	080057b5 	.word	0x080057b5

08005a6c <_printf_common>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	4616      	mov	r6, r2
 8005a72:	4699      	mov	r9, r3
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	4607      	mov	r7, r0
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bfb8      	it	lt
 8005a7e:	4613      	movlt	r3, r2
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a86:	460c      	mov	r4, r1
 8005a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a8c:	b10a      	cbz	r2, 8005a92 <_printf_common+0x26>
 8005a8e:	3301      	adds	r3, #1
 8005a90:	6033      	str	r3, [r6, #0]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	0699      	lsls	r1, r3, #26
 8005a96:	bf42      	ittt	mi
 8005a98:	6833      	ldrmi	r3, [r6, #0]
 8005a9a:	3302      	addmi	r3, #2
 8005a9c:	6033      	strmi	r3, [r6, #0]
 8005a9e:	6825      	ldr	r5, [r4, #0]
 8005aa0:	f015 0506 	ands.w	r5, r5, #6
 8005aa4:	d106      	bne.n	8005ab4 <_printf_common+0x48>
 8005aa6:	f104 0a19 	add.w	sl, r4, #25
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	6832      	ldr	r2, [r6, #0]
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dc28      	bgt.n	8005b06 <_printf_common+0x9a>
 8005ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ab8:	1e13      	subs	r3, r2, #0
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	bf18      	it	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	0692      	lsls	r2, r2, #26
 8005ac2:	d42d      	bmi.n	8005b20 <_printf_common+0xb4>
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005acc:	47c0      	blx	r8
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d020      	beq.n	8005b14 <_printf_common+0xa8>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	68e5      	ldr	r5, [r4, #12]
 8005ad6:	f003 0306 	and.w	r3, r3, #6
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	bf18      	it	ne
 8005ade:	2500      	movne	r5, #0
 8005ae0:	6832      	ldr	r2, [r6, #0]
 8005ae2:	f04f 0600 	mov.w	r6, #0
 8005ae6:	68a3      	ldr	r3, [r4, #8]
 8005ae8:	bf08      	it	eq
 8005aea:	1aad      	subeq	r5, r5, r2
 8005aec:	6922      	ldr	r2, [r4, #16]
 8005aee:	bf08      	it	eq
 8005af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bfc4      	itt	gt
 8005af8:	1a9b      	subgt	r3, r3, r2
 8005afa:	18ed      	addgt	r5, r5, r3
 8005afc:	341a      	adds	r4, #26
 8005afe:	42b5      	cmp	r5, r6
 8005b00:	d11a      	bne.n	8005b38 <_printf_common+0xcc>
 8005b02:	2000      	movs	r0, #0
 8005b04:	e008      	b.n	8005b18 <_printf_common+0xac>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4652      	mov	r2, sl
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	47c0      	blx	r8
 8005b10:	3001      	adds	r0, #1
 8005b12:	d103      	bne.n	8005b1c <_printf_common+0xb0>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1c:	3501      	adds	r5, #1
 8005b1e:	e7c4      	b.n	8005aaa <_printf_common+0x3e>
 8005b20:	2030      	movs	r0, #48	; 0x30
 8005b22:	18e1      	adds	r1, r4, r3
 8005b24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b2e:	4422      	add	r2, r4
 8005b30:	3302      	adds	r3, #2
 8005b32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b36:	e7c5      	b.n	8005ac4 <_printf_common+0x58>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	4638      	mov	r0, r7
 8005b40:	47c0      	blx	r8
 8005b42:	3001      	adds	r0, #1
 8005b44:	d0e6      	beq.n	8005b14 <_printf_common+0xa8>
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7d9      	b.n	8005afe <_printf_common+0x92>
	...

08005b4c <_printf_i>:
 8005b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	7e0f      	ldrb	r7, [r1, #24]
 8005b52:	4691      	mov	r9, r2
 8005b54:	2f78      	cmp	r7, #120	; 0x78
 8005b56:	4680      	mov	r8, r0
 8005b58:	460c      	mov	r4, r1
 8005b5a:	469a      	mov	sl, r3
 8005b5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b62:	d807      	bhi.n	8005b74 <_printf_i+0x28>
 8005b64:	2f62      	cmp	r7, #98	; 0x62
 8005b66:	d80a      	bhi.n	8005b7e <_printf_i+0x32>
 8005b68:	2f00      	cmp	r7, #0
 8005b6a:	f000 80d9 	beq.w	8005d20 <_printf_i+0x1d4>
 8005b6e:	2f58      	cmp	r7, #88	; 0x58
 8005b70:	f000 80a4 	beq.w	8005cbc <_printf_i+0x170>
 8005b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b7c:	e03a      	b.n	8005bf4 <_printf_i+0xa8>
 8005b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b82:	2b15      	cmp	r3, #21
 8005b84:	d8f6      	bhi.n	8005b74 <_printf_i+0x28>
 8005b86:	a101      	add	r1, pc, #4	; (adr r1, 8005b8c <_printf_i+0x40>)
 8005b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005b75 	.word	0x08005b75
 8005b98:	08005b75 	.word	0x08005b75
 8005b9c:	08005b75 	.word	0x08005b75
 8005ba0:	08005b75 	.word	0x08005b75
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005b75 	.word	0x08005b75
 8005bac:	08005b75 	.word	0x08005b75
 8005bb0:	08005b75 	.word	0x08005b75
 8005bb4:	08005b75 	.word	0x08005b75
 8005bb8:	08005d07 	.word	0x08005d07
 8005bbc:	08005c29 	.word	0x08005c29
 8005bc0:	08005ce9 	.word	0x08005ce9
 8005bc4:	08005b75 	.word	0x08005b75
 8005bc8:	08005b75 	.word	0x08005b75
 8005bcc:	08005d29 	.word	0x08005d29
 8005bd0:	08005b75 	.word	0x08005b75
 8005bd4:	08005c29 	.word	0x08005c29
 8005bd8:	08005b75 	.word	0x08005b75
 8005bdc:	08005b75 	.word	0x08005b75
 8005be0:	08005cf1 	.word	0x08005cf1
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	1d1a      	adds	r2, r3, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	602a      	str	r2, [r5, #0]
 8005bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0a4      	b.n	8005d42 <_printf_i+0x1f6>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	6829      	ldr	r1, [r5, #0]
 8005bfc:	0606      	lsls	r6, r0, #24
 8005bfe:	f101 0304 	add.w	r3, r1, #4
 8005c02:	d50a      	bpl.n	8005c1a <_printf_i+0xce>
 8005c04:	680e      	ldr	r6, [r1, #0]
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	da03      	bge.n	8005c14 <_printf_i+0xc8>
 8005c0c:	232d      	movs	r3, #45	; 0x2d
 8005c0e:	4276      	negs	r6, r6
 8005c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c14:	230a      	movs	r3, #10
 8005c16:	485e      	ldr	r0, [pc, #376]	; (8005d90 <_printf_i+0x244>)
 8005c18:	e019      	b.n	8005c4e <_printf_i+0x102>
 8005c1a:	680e      	ldr	r6, [r1, #0]
 8005c1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c20:	602b      	str	r3, [r5, #0]
 8005c22:	bf18      	it	ne
 8005c24:	b236      	sxthne	r6, r6
 8005c26:	e7ef      	b.n	8005c08 <_printf_i+0xbc>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	6820      	ldr	r0, [r4, #0]
 8005c2c:	1d19      	adds	r1, r3, #4
 8005c2e:	6029      	str	r1, [r5, #0]
 8005c30:	0601      	lsls	r1, r0, #24
 8005c32:	d501      	bpl.n	8005c38 <_printf_i+0xec>
 8005c34:	681e      	ldr	r6, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <_printf_i+0xf2>
 8005c38:	0646      	lsls	r6, r0, #25
 8005c3a:	d5fb      	bpl.n	8005c34 <_printf_i+0xe8>
 8005c3c:	881e      	ldrh	r6, [r3, #0]
 8005c3e:	2f6f      	cmp	r7, #111	; 0x6f
 8005c40:	bf0c      	ite	eq
 8005c42:	2308      	moveq	r3, #8
 8005c44:	230a      	movne	r3, #10
 8005c46:	4852      	ldr	r0, [pc, #328]	; (8005d90 <_printf_i+0x244>)
 8005c48:	2100      	movs	r1, #0
 8005c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c4e:	6865      	ldr	r5, [r4, #4]
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	bfa8      	it	ge
 8005c54:	6821      	ldrge	r1, [r4, #0]
 8005c56:	60a5      	str	r5, [r4, #8]
 8005c58:	bfa4      	itt	ge
 8005c5a:	f021 0104 	bicge.w	r1, r1, #4
 8005c5e:	6021      	strge	r1, [r4, #0]
 8005c60:	b90e      	cbnz	r6, 8005c66 <_printf_i+0x11a>
 8005c62:	2d00      	cmp	r5, #0
 8005c64:	d04d      	beq.n	8005d02 <_printf_i+0x1b6>
 8005c66:	4615      	mov	r5, r2
 8005c68:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c6c:	fb03 6711 	mls	r7, r3, r1, r6
 8005c70:	5dc7      	ldrb	r7, [r0, r7]
 8005c72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c76:	4637      	mov	r7, r6
 8005c78:	42bb      	cmp	r3, r7
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	d9f4      	bls.n	8005c68 <_printf_i+0x11c>
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d10b      	bne.n	8005c9a <_printf_i+0x14e>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	07de      	lsls	r6, r3, #31
 8005c86:	d508      	bpl.n	8005c9a <_printf_i+0x14e>
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	6861      	ldr	r1, [r4, #4]
 8005c8c:	4299      	cmp	r1, r3
 8005c8e:	bfde      	ittt	le
 8005c90:	2330      	movle	r3, #48	; 0x30
 8005c92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c9a:	1b52      	subs	r2, r2, r5
 8005c9c:	6122      	str	r2, [r4, #16]
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f8cd a000 	str.w	sl, [sp]
 8005ca8:	aa03      	add	r2, sp, #12
 8005caa:	f7ff fedf 	bl	8005a6c <_printf_common>
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d14c      	bne.n	8005d4c <_printf_i+0x200>
 8005cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb6:	b004      	add	sp, #16
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	4834      	ldr	r0, [pc, #208]	; (8005d90 <_printf_i+0x244>)
 8005cbe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cc2:	6829      	ldr	r1, [r5, #0]
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cca:	6029      	str	r1, [r5, #0]
 8005ccc:	061d      	lsls	r5, r3, #24
 8005cce:	d514      	bpl.n	8005cfa <_printf_i+0x1ae>
 8005cd0:	07df      	lsls	r7, r3, #31
 8005cd2:	bf44      	itt	mi
 8005cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd8:	6023      	strmi	r3, [r4, #0]
 8005cda:	b91e      	cbnz	r6, 8005ce4 <_printf_i+0x198>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	f023 0320 	bic.w	r3, r3, #32
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	e7af      	b.n	8005c48 <_printf_i+0xfc>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	f043 0320 	orr.w	r3, r3, #32
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	2378      	movs	r3, #120	; 0x78
 8005cf2:	4828      	ldr	r0, [pc, #160]	; (8005d94 <_printf_i+0x248>)
 8005cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cf8:	e7e3      	b.n	8005cc2 <_printf_i+0x176>
 8005cfa:	0659      	lsls	r1, r3, #25
 8005cfc:	bf48      	it	mi
 8005cfe:	b2b6      	uxthmi	r6, r6
 8005d00:	e7e6      	b.n	8005cd0 <_printf_i+0x184>
 8005d02:	4615      	mov	r5, r2
 8005d04:	e7bb      	b.n	8005c7e <_printf_i+0x132>
 8005d06:	682b      	ldr	r3, [r5, #0]
 8005d08:	6826      	ldr	r6, [r4, #0]
 8005d0a:	1d18      	adds	r0, r3, #4
 8005d0c:	6961      	ldr	r1, [r4, #20]
 8005d0e:	6028      	str	r0, [r5, #0]
 8005d10:	0635      	lsls	r5, r6, #24
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	d501      	bpl.n	8005d1a <_printf_i+0x1ce>
 8005d16:	6019      	str	r1, [r3, #0]
 8005d18:	e002      	b.n	8005d20 <_printf_i+0x1d4>
 8005d1a:	0670      	lsls	r0, r6, #25
 8005d1c:	d5fb      	bpl.n	8005d16 <_printf_i+0x1ca>
 8005d1e:	8019      	strh	r1, [r3, #0]
 8005d20:	2300      	movs	r3, #0
 8005d22:	4615      	mov	r5, r2
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	e7ba      	b.n	8005c9e <_printf_i+0x152>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	1d1a      	adds	r2, r3, #4
 8005d2e:	602a      	str	r2, [r5, #0]
 8005d30:	681d      	ldr	r5, [r3, #0]
 8005d32:	6862      	ldr	r2, [r4, #4]
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 f831 	bl	8005d9c <memchr>
 8005d3a:	b108      	cbz	r0, 8005d40 <_printf_i+0x1f4>
 8005d3c:	1b40      	subs	r0, r0, r5
 8005d3e:	6060      	str	r0, [r4, #4]
 8005d40:	6863      	ldr	r3, [r4, #4]
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	2300      	movs	r3, #0
 8005d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4a:	e7a8      	b.n	8005c9e <_printf_i+0x152>
 8005d4c:	462a      	mov	r2, r5
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4640      	mov	r0, r8
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	47d0      	blx	sl
 8005d56:	3001      	adds	r0, #1
 8005d58:	d0ab      	beq.n	8005cb2 <_printf_i+0x166>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	079b      	lsls	r3, r3, #30
 8005d5e:	d413      	bmi.n	8005d88 <_printf_i+0x23c>
 8005d60:	68e0      	ldr	r0, [r4, #12]
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	4298      	cmp	r0, r3
 8005d66:	bfb8      	it	lt
 8005d68:	4618      	movlt	r0, r3
 8005d6a:	e7a4      	b.n	8005cb6 <_printf_i+0x16a>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4632      	mov	r2, r6
 8005d70:	4649      	mov	r1, r9
 8005d72:	4640      	mov	r0, r8
 8005d74:	47d0      	blx	sl
 8005d76:	3001      	adds	r0, #1
 8005d78:	d09b      	beq.n	8005cb2 <_printf_i+0x166>
 8005d7a:	3501      	adds	r5, #1
 8005d7c:	68e3      	ldr	r3, [r4, #12]
 8005d7e:	9903      	ldr	r1, [sp, #12]
 8005d80:	1a5b      	subs	r3, r3, r1
 8005d82:	42ab      	cmp	r3, r5
 8005d84:	dcf2      	bgt.n	8005d6c <_printf_i+0x220>
 8005d86:	e7eb      	b.n	8005d60 <_printf_i+0x214>
 8005d88:	2500      	movs	r5, #0
 8005d8a:	f104 0619 	add.w	r6, r4, #25
 8005d8e:	e7f5      	b.n	8005d7c <_printf_i+0x230>
 8005d90:	08006cad 	.word	0x08006cad
 8005d94:	08006cbe 	.word	0x08006cbe

08005d98 <__retarget_lock_acquire_recursive>:
 8005d98:	4770      	bx	lr

08005d9a <__retarget_lock_release_recursive>:
 8005d9a:	4770      	bx	lr

08005d9c <memchr>:
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	b2c9      	uxtb	r1, r1
 8005da2:	4402      	add	r2, r0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	d101      	bne.n	8005dae <memchr+0x12>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e003      	b.n	8005db6 <memchr+0x1a>
 8005dae:	7804      	ldrb	r4, [r0, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	428c      	cmp	r4, r1
 8005db4:	d1f6      	bne.n	8005da4 <memchr+0x8>
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <memmove>:
 8005db8:	4288      	cmp	r0, r1
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	eb01 0402 	add.w	r4, r1, r2
 8005dc0:	d902      	bls.n	8005dc8 <memmove+0x10>
 8005dc2:	4284      	cmp	r4, r0
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	d807      	bhi.n	8005dd8 <memmove+0x20>
 8005dc8:	1e43      	subs	r3, r0, #1
 8005dca:	42a1      	cmp	r1, r4
 8005dcc:	d008      	beq.n	8005de0 <memmove+0x28>
 8005dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dd6:	e7f8      	b.n	8005dca <memmove+0x12>
 8005dd8:	4601      	mov	r1, r0
 8005dda:	4402      	add	r2, r0
 8005ddc:	428a      	cmp	r2, r1
 8005dde:	d100      	bne.n	8005de2 <memmove+0x2a>
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dea:	e7f7      	b.n	8005ddc <memmove+0x24>

08005dec <_realloc_r>:
 8005dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df0:	4680      	mov	r8, r0
 8005df2:	4614      	mov	r4, r2
 8005df4:	460e      	mov	r6, r1
 8005df6:	b921      	cbnz	r1, 8005e02 <_realloc_r+0x16>
 8005df8:	4611      	mov	r1, r2
 8005dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfe:	f7ff bc29 	b.w	8005654 <_malloc_r>
 8005e02:	b92a      	cbnz	r2, 8005e10 <_realloc_r+0x24>
 8005e04:	f7ff fbbe 	bl	8005584 <_free_r>
 8005e08:	4625      	mov	r5, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e10:	f000 f81b 	bl	8005e4a <_malloc_usable_size_r>
 8005e14:	4284      	cmp	r4, r0
 8005e16:	4607      	mov	r7, r0
 8005e18:	d802      	bhi.n	8005e20 <_realloc_r+0x34>
 8005e1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e1e:	d812      	bhi.n	8005e46 <_realloc_r+0x5a>
 8005e20:	4621      	mov	r1, r4
 8005e22:	4640      	mov	r0, r8
 8005e24:	f7ff fc16 	bl	8005654 <_malloc_r>
 8005e28:	4605      	mov	r5, r0
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d0ed      	beq.n	8005e0a <_realloc_r+0x1e>
 8005e2e:	42bc      	cmp	r4, r7
 8005e30:	4622      	mov	r2, r4
 8005e32:	4631      	mov	r1, r6
 8005e34:	bf28      	it	cs
 8005e36:	463a      	movcs	r2, r7
 8005e38:	f7ff fb8e 	bl	8005558 <memcpy>
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7ff fba0 	bl	8005584 <_free_r>
 8005e44:	e7e1      	b.n	8005e0a <_realloc_r+0x1e>
 8005e46:	4635      	mov	r5, r6
 8005e48:	e7df      	b.n	8005e0a <_realloc_r+0x1e>

08005e4a <_malloc_usable_size_r>:
 8005e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4e:	1f18      	subs	r0, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	bfbc      	itt	lt
 8005e54:	580b      	ldrlt	r3, [r1, r0]
 8005e56:	18c0      	addlt	r0, r0, r3
 8005e58:	4770      	bx	lr
	...

08005e5c <pow>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	4614      	mov	r4, r2
 8005e62:	461d      	mov	r5, r3
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	f000 f862 	bl	8005f30 <__ieee754_pow>
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460f      	mov	r7, r1
 8005e72:	462b      	mov	r3, r5
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	f7fa fdc8 	bl	8000a0c <__aeabi_dcmpun>
 8005e7c:	bbc8      	cbnz	r0, 8005ef2 <pow+0x96>
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2300      	movs	r3, #0
 8005e82:	4640      	mov	r0, r8
 8005e84:	4649      	mov	r1, r9
 8005e86:	f7fa fd8f 	bl	80009a8 <__aeabi_dcmpeq>
 8005e8a:	b1b8      	cbz	r0, 8005ebc <pow+0x60>
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4620      	mov	r0, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	f7fa fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d141      	bne.n	8005f20 <pow+0xc4>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f000 fe3b 	bl	8006b1a <finite>
 8005ea4:	b328      	cbz	r0, 8005ef2 <pow+0x96>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4629      	mov	r1, r5
 8005eae:	f7fa fd85 	bl	80009bc <__aeabi_dcmplt>
 8005eb2:	b1f0      	cbz	r0, 8005ef2 <pow+0x96>
 8005eb4:	f7ff fb16 	bl	80054e4 <__errno>
 8005eb8:	2322      	movs	r3, #34	; 0x22
 8005eba:	e019      	b.n	8005ef0 <pow+0x94>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f000 fe2b 	bl	8006b1a <finite>
 8005ec4:	b9c8      	cbnz	r0, 8005efa <pow+0x9e>
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	4649      	mov	r1, r9
 8005eca:	f000 fe26 	bl	8006b1a <finite>
 8005ece:	b1a0      	cbz	r0, 8005efa <pow+0x9e>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	f000 fe21 	bl	8006b1a <finite>
 8005ed8:	b178      	cbz	r0, 8005efa <pow+0x9e>
 8005eda:	4632      	mov	r2, r6
 8005edc:	463b      	mov	r3, r7
 8005ede:	4630      	mov	r0, r6
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	f7fa fd93 	bl	8000a0c <__aeabi_dcmpun>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d0e4      	beq.n	8005eb4 <pow+0x58>
 8005eea:	f7ff fafb 	bl	80054e4 <__errno>
 8005eee:	2321      	movs	r3, #33	; 0x21
 8005ef0:	6003      	str	r3, [r0, #0]
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	4639      	mov	r1, r7
 8005ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005efa:	2200      	movs	r2, #0
 8005efc:	2300      	movs	r3, #0
 8005efe:	4630      	mov	r0, r6
 8005f00:	4639      	mov	r1, r7
 8005f02:	f7fa fd51 	bl	80009a8 <__aeabi_dcmpeq>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d0f3      	beq.n	8005ef2 <pow+0x96>
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	f000 fe04 	bl	8006b1a <finite>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d0ed      	beq.n	8005ef2 <pow+0x96>
 8005f16:	4620      	mov	r0, r4
 8005f18:	4629      	mov	r1, r5
 8005f1a:	f000 fdfe 	bl	8006b1a <finite>
 8005f1e:	e7c8      	b.n	8005eb2 <pow+0x56>
 8005f20:	2600      	movs	r6, #0
 8005f22:	4f01      	ldr	r7, [pc, #4]	; (8005f28 <pow+0xcc>)
 8005f24:	e7e5      	b.n	8005ef2 <pow+0x96>
 8005f26:	bf00      	nop
 8005f28:	3ff00000 	.word	0x3ff00000
 8005f2c:	00000000 	.word	0x00000000

08005f30 <__ieee754_pow>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	b093      	sub	sp, #76	; 0x4c
 8005f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f3a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005f3e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005f42:	4689      	mov	r9, r1
 8005f44:	ea56 0102 	orrs.w	r1, r6, r2
 8005f48:	4680      	mov	r8, r0
 8005f4a:	d111      	bne.n	8005f70 <__ieee754_pow+0x40>
 8005f4c:	1803      	adds	r3, r0, r0
 8005f4e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005f52:	4152      	adcs	r2, r2
 8005f54:	4299      	cmp	r1, r3
 8005f56:	4b82      	ldr	r3, [pc, #520]	; (8006160 <__ieee754_pow+0x230>)
 8005f58:	4193      	sbcs	r3, r2
 8005f5a:	f080 84b9 	bcs.w	80068d0 <__ieee754_pow+0x9a0>
 8005f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f62:	4640      	mov	r0, r8
 8005f64:	4649      	mov	r1, r9
 8005f66:	f7fa f901 	bl	800016c <__adddf3>
 8005f6a:	4683      	mov	fp, r0
 8005f6c:	468c      	mov	ip, r1
 8005f6e:	e06f      	b.n	8006050 <__ieee754_pow+0x120>
 8005f70:	4b7c      	ldr	r3, [pc, #496]	; (8006164 <__ieee754_pow+0x234>)
 8005f72:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005f76:	429c      	cmp	r4, r3
 8005f78:	464d      	mov	r5, r9
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	dc06      	bgt.n	8005f8c <__ieee754_pow+0x5c>
 8005f7e:	d101      	bne.n	8005f84 <__ieee754_pow+0x54>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1ec      	bne.n	8005f5e <__ieee754_pow+0x2e>
 8005f84:	429e      	cmp	r6, r3
 8005f86:	dc01      	bgt.n	8005f8c <__ieee754_pow+0x5c>
 8005f88:	d10f      	bne.n	8005faa <__ieee754_pow+0x7a>
 8005f8a:	b172      	cbz	r2, 8005faa <__ieee754_pow+0x7a>
 8005f8c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005f90:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005f94:	ea55 050a 	orrs.w	r5, r5, sl
 8005f98:	d1e1      	bne.n	8005f5e <__ieee754_pow+0x2e>
 8005f9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005f9e:	18db      	adds	r3, r3, r3
 8005fa0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005fa4:	4152      	adcs	r2, r2
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	e7d5      	b.n	8005f56 <__ieee754_pow+0x26>
 8005faa:	2d00      	cmp	r5, #0
 8005fac:	da39      	bge.n	8006022 <__ieee754_pow+0xf2>
 8005fae:	4b6e      	ldr	r3, [pc, #440]	; (8006168 <__ieee754_pow+0x238>)
 8005fb0:	429e      	cmp	r6, r3
 8005fb2:	dc52      	bgt.n	800605a <__ieee754_pow+0x12a>
 8005fb4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005fb8:	429e      	cmp	r6, r3
 8005fba:	f340 849c 	ble.w	80068f6 <__ieee754_pow+0x9c6>
 8005fbe:	1533      	asrs	r3, r6, #20
 8005fc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005fc4:	2b14      	cmp	r3, #20
 8005fc6:	dd0f      	ble.n	8005fe8 <__ieee754_pow+0xb8>
 8005fc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005fcc:	fa22 f103 	lsr.w	r1, r2, r3
 8005fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	f040 848e 	bne.w	80068f6 <__ieee754_pow+0x9c6>
 8005fda:	f001 0101 	and.w	r1, r1, #1
 8005fde:	f1c1 0302 	rsb	r3, r1, #2
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	b182      	cbz	r2, 8006008 <__ieee754_pow+0xd8>
 8005fe6:	e05d      	b.n	80060a4 <__ieee754_pow+0x174>
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	d159      	bne.n	80060a0 <__ieee754_pow+0x170>
 8005fec:	f1c3 0314 	rsb	r3, r3, #20
 8005ff0:	fa46 f103 	asr.w	r1, r6, r3
 8005ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	f040 8479 	bne.w	80068f0 <__ieee754_pow+0x9c0>
 8005ffe:	f001 0101 	and.w	r1, r1, #1
 8006002:	f1c1 0302 	rsb	r3, r1, #2
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4b58      	ldr	r3, [pc, #352]	; (800616c <__ieee754_pow+0x23c>)
 800600a:	429e      	cmp	r6, r3
 800600c:	d132      	bne.n	8006074 <__ieee754_pow+0x144>
 800600e:	2f00      	cmp	r7, #0
 8006010:	f280 846a 	bge.w	80068e8 <__ieee754_pow+0x9b8>
 8006014:	4642      	mov	r2, r8
 8006016:	464b      	mov	r3, r9
 8006018:	2000      	movs	r0, #0
 800601a:	4954      	ldr	r1, [pc, #336]	; (800616c <__ieee754_pow+0x23c>)
 800601c:	f7fa fb86 	bl	800072c <__aeabi_ddiv>
 8006020:	e7a3      	b.n	8005f6a <__ieee754_pow+0x3a>
 8006022:	2300      	movs	r3, #0
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	2a00      	cmp	r2, #0
 8006028:	d13c      	bne.n	80060a4 <__ieee754_pow+0x174>
 800602a:	4b4e      	ldr	r3, [pc, #312]	; (8006164 <__ieee754_pow+0x234>)
 800602c:	429e      	cmp	r6, r3
 800602e:	d1eb      	bne.n	8006008 <__ieee754_pow+0xd8>
 8006030:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006034:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006038:	ea53 030a 	orrs.w	r3, r3, sl
 800603c:	f000 8448 	beq.w	80068d0 <__ieee754_pow+0x9a0>
 8006040:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <__ieee754_pow+0x240>)
 8006042:	429c      	cmp	r4, r3
 8006044:	dd0b      	ble.n	800605e <__ieee754_pow+0x12e>
 8006046:	2f00      	cmp	r7, #0
 8006048:	f2c0 8448 	blt.w	80068dc <__ieee754_pow+0x9ac>
 800604c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006050:	4658      	mov	r0, fp
 8006052:	4661      	mov	r1, ip
 8006054:	b013      	add	sp, #76	; 0x4c
 8006056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605a:	2302      	movs	r3, #2
 800605c:	e7e2      	b.n	8006024 <__ieee754_pow+0xf4>
 800605e:	2f00      	cmp	r7, #0
 8006060:	f04f 0b00 	mov.w	fp, #0
 8006064:	f04f 0c00 	mov.w	ip, #0
 8006068:	daf2      	bge.n	8006050 <__ieee754_pow+0x120>
 800606a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800606e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006072:	e7ed      	b.n	8006050 <__ieee754_pow+0x120>
 8006074:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006078:	d106      	bne.n	8006088 <__ieee754_pow+0x158>
 800607a:	4642      	mov	r2, r8
 800607c:	464b      	mov	r3, r9
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa fa29 	bl	80004d8 <__aeabi_dmul>
 8006086:	e770      	b.n	8005f6a <__ieee754_pow+0x3a>
 8006088:	4b3a      	ldr	r3, [pc, #232]	; (8006174 <__ieee754_pow+0x244>)
 800608a:	429f      	cmp	r7, r3
 800608c:	d10a      	bne.n	80060a4 <__ieee754_pow+0x174>
 800608e:	2d00      	cmp	r5, #0
 8006090:	db08      	blt.n	80060a4 <__ieee754_pow+0x174>
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	b013      	add	sp, #76	; 0x4c
 8006098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	f000 bc5e 	b.w	800695c <__ieee754_sqrt>
 80060a0:	2300      	movs	r3, #0
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4640      	mov	r0, r8
 80060a6:	4649      	mov	r1, r9
 80060a8:	f000 fd34 	bl	8006b14 <fabs>
 80060ac:	4683      	mov	fp, r0
 80060ae:	468c      	mov	ip, r1
 80060b0:	f1ba 0f00 	cmp.w	sl, #0
 80060b4:	d128      	bne.n	8006108 <__ieee754_pow+0x1d8>
 80060b6:	b124      	cbz	r4, 80060c2 <__ieee754_pow+0x192>
 80060b8:	4b2c      	ldr	r3, [pc, #176]	; (800616c <__ieee754_pow+0x23c>)
 80060ba:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80060be:	429a      	cmp	r2, r3
 80060c0:	d122      	bne.n	8006108 <__ieee754_pow+0x1d8>
 80060c2:	2f00      	cmp	r7, #0
 80060c4:	da07      	bge.n	80060d6 <__ieee754_pow+0x1a6>
 80060c6:	465a      	mov	r2, fp
 80060c8:	4663      	mov	r3, ip
 80060ca:	2000      	movs	r0, #0
 80060cc:	4927      	ldr	r1, [pc, #156]	; (800616c <__ieee754_pow+0x23c>)
 80060ce:	f7fa fb2d 	bl	800072c <__aeabi_ddiv>
 80060d2:	4683      	mov	fp, r0
 80060d4:	468c      	mov	ip, r1
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	daba      	bge.n	8006050 <__ieee754_pow+0x120>
 80060da:	9b00      	ldr	r3, [sp, #0]
 80060dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80060e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80060e4:	4323      	orrs	r3, r4
 80060e6:	d108      	bne.n	80060fa <__ieee754_pow+0x1ca>
 80060e8:	465a      	mov	r2, fp
 80060ea:	4663      	mov	r3, ip
 80060ec:	4658      	mov	r0, fp
 80060ee:	4661      	mov	r1, ip
 80060f0:	f7fa f83a 	bl	8000168 <__aeabi_dsub>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	e790      	b.n	800601c <__ieee754_pow+0xec>
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d1a7      	bne.n	8006050 <__ieee754_pow+0x120>
 8006100:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006104:	469c      	mov	ip, r3
 8006106:	e7a3      	b.n	8006050 <__ieee754_pow+0x120>
 8006108:	0feb      	lsrs	r3, r5, #31
 800610a:	3b01      	subs	r3, #1
 800610c:	930c      	str	r3, [sp, #48]	; 0x30
 800610e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006110:	9b00      	ldr	r3, [sp, #0]
 8006112:	4313      	orrs	r3, r2
 8006114:	d104      	bne.n	8006120 <__ieee754_pow+0x1f0>
 8006116:	4642      	mov	r2, r8
 8006118:	464b      	mov	r3, r9
 800611a:	4640      	mov	r0, r8
 800611c:	4649      	mov	r1, r9
 800611e:	e7e7      	b.n	80060f0 <__ieee754_pow+0x1c0>
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <__ieee754_pow+0x248>)
 8006122:	429e      	cmp	r6, r3
 8006124:	f340 80f6 	ble.w	8006314 <__ieee754_pow+0x3e4>
 8006128:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800612c:	429e      	cmp	r6, r3
 800612e:	4b10      	ldr	r3, [pc, #64]	; (8006170 <__ieee754_pow+0x240>)
 8006130:	dd09      	ble.n	8006146 <__ieee754_pow+0x216>
 8006132:	429c      	cmp	r4, r3
 8006134:	dc0c      	bgt.n	8006150 <__ieee754_pow+0x220>
 8006136:	2f00      	cmp	r7, #0
 8006138:	da0c      	bge.n	8006154 <__ieee754_pow+0x224>
 800613a:	2000      	movs	r0, #0
 800613c:	b013      	add	sp, #76	; 0x4c
 800613e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006142:	f000 bce2 	b.w	8006b0a <__math_oflow>
 8006146:	429c      	cmp	r4, r3
 8006148:	dbf5      	blt.n	8006136 <__ieee754_pow+0x206>
 800614a:	4b08      	ldr	r3, [pc, #32]	; (800616c <__ieee754_pow+0x23c>)
 800614c:	429c      	cmp	r4, r3
 800614e:	dd15      	ble.n	800617c <__ieee754_pow+0x24c>
 8006150:	2f00      	cmp	r7, #0
 8006152:	dcf2      	bgt.n	800613a <__ieee754_pow+0x20a>
 8006154:	2000      	movs	r0, #0
 8006156:	b013      	add	sp, #76	; 0x4c
 8006158:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	f000 bcd0 	b.w	8006b00 <__math_uflow>
 8006160:	fff00000 	.word	0xfff00000
 8006164:	7ff00000 	.word	0x7ff00000
 8006168:	433fffff 	.word	0x433fffff
 800616c:	3ff00000 	.word	0x3ff00000
 8006170:	3fefffff 	.word	0x3fefffff
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	41e00000 	.word	0x41e00000
 800617c:	4661      	mov	r1, ip
 800617e:	2200      	movs	r2, #0
 8006180:	4658      	mov	r0, fp
 8006182:	4b5f      	ldr	r3, [pc, #380]	; (8006300 <__ieee754_pow+0x3d0>)
 8006184:	f7f9 fff0 	bl	8000168 <__aeabi_dsub>
 8006188:	a355      	add	r3, pc, #340	; (adr r3, 80062e0 <__ieee754_pow+0x3b0>)
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	4604      	mov	r4, r0
 8006190:	460d      	mov	r5, r1
 8006192:	f7fa f9a1 	bl	80004d8 <__aeabi_dmul>
 8006196:	a354      	add	r3, pc, #336	; (adr r3, 80062e8 <__ieee754_pow+0x3b8>)
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	4606      	mov	r6, r0
 800619e:	460f      	mov	r7, r1
 80061a0:	4620      	mov	r0, r4
 80061a2:	4629      	mov	r1, r5
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	2200      	movs	r2, #0
 80061aa:	4682      	mov	sl, r0
 80061ac:	468b      	mov	fp, r1
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	4b54      	ldr	r3, [pc, #336]	; (8006304 <__ieee754_pow+0x3d4>)
 80061b4:	f7fa f990 	bl	80004d8 <__aeabi_dmul>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	a14c      	add	r1, pc, #304	; (adr r1, 80062f0 <__ieee754_pow+0x3c0>)
 80061be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c2:	f7f9 ffd1 	bl	8000168 <__aeabi_dsub>
 80061c6:	4622      	mov	r2, r4
 80061c8:	462b      	mov	r3, r5
 80061ca:	f7fa f985 	bl	80004d8 <__aeabi_dmul>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	2000      	movs	r0, #0
 80061d4:	494c      	ldr	r1, [pc, #304]	; (8006308 <__ieee754_pow+0x3d8>)
 80061d6:	f7f9 ffc7 	bl	8000168 <__aeabi_dsub>
 80061da:	4622      	mov	r2, r4
 80061dc:	462b      	mov	r3, r5
 80061de:	4680      	mov	r8, r0
 80061e0:	4689      	mov	r9, r1
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7fa f977 	bl	80004d8 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4640      	mov	r0, r8
 80061f0:	4649      	mov	r1, r9
 80061f2:	f7fa f971 	bl	80004d8 <__aeabi_dmul>
 80061f6:	a340      	add	r3, pc, #256	; (adr r3, 80062f8 <__ieee754_pow+0x3c8>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7fa f96c 	bl	80004d8 <__aeabi_dmul>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4650      	mov	r0, sl
 8006206:	4659      	mov	r1, fp
 8006208:	f7f9 ffae 	bl	8000168 <__aeabi_dsub>
 800620c:	f04f 0a00 	mov.w	sl, #0
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4604      	mov	r4, r0
 8006216:	460d      	mov	r5, r1
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	f7f9 ffa6 	bl	800016c <__adddf3>
 8006220:	4632      	mov	r2, r6
 8006222:	463b      	mov	r3, r7
 8006224:	4650      	mov	r0, sl
 8006226:	468b      	mov	fp, r1
 8006228:	f7f9 ff9e 	bl	8000168 <__aeabi_dsub>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	f7f9 ff98 	bl	8000168 <__aeabi_dsub>
 8006238:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800623c:	9b00      	ldr	r3, [sp, #0]
 800623e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006240:	3b01      	subs	r3, #1
 8006242:	4313      	orrs	r3, r2
 8006244:	f04f 0600 	mov.w	r6, #0
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	bf0c      	ite	eq
 800624e:	4b2f      	ldreq	r3, [pc, #188]	; (800630c <__ieee754_pow+0x3dc>)
 8006250:	4b2b      	ldrne	r3, [pc, #172]	; (8006300 <__ieee754_pow+0x3d0>)
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
 8006256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625a:	e9cd 2300 	strd	r2, r3, [sp]
 800625e:	4632      	mov	r2, r6
 8006260:	463b      	mov	r3, r7
 8006262:	f7f9 ff81 	bl	8000168 <__aeabi_dsub>
 8006266:	4652      	mov	r2, sl
 8006268:	465b      	mov	r3, fp
 800626a:	f7fa f935 	bl	80004d8 <__aeabi_dmul>
 800626e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006272:	4680      	mov	r8, r0
 8006274:	4689      	mov	r9, r1
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa f92d 	bl	80004d8 <__aeabi_dmul>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f7f9 ff71 	bl	800016c <__adddf3>
 800628a:	4632      	mov	r2, r6
 800628c:	463b      	mov	r3, r7
 800628e:	4680      	mov	r8, r0
 8006290:	4689      	mov	r9, r1
 8006292:	4650      	mov	r0, sl
 8006294:	4659      	mov	r1, fp
 8006296:	f7fa f91f 	bl	80004d8 <__aeabi_dmul>
 800629a:	4604      	mov	r4, r0
 800629c:	460d      	mov	r5, r1
 800629e:	460b      	mov	r3, r1
 80062a0:	4602      	mov	r2, r0
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80062aa:	f7f9 ff5f 	bl	800016c <__adddf3>
 80062ae:	4b18      	ldr	r3, [pc, #96]	; (8006310 <__ieee754_pow+0x3e0>)
 80062b0:	4682      	mov	sl, r0
 80062b2:	4299      	cmp	r1, r3
 80062b4:	460f      	mov	r7, r1
 80062b6:	460e      	mov	r6, r1
 80062b8:	f340 82e5 	ble.w	8006886 <__ieee754_pow+0x956>
 80062bc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80062c0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80062c4:	4303      	orrs	r3, r0
 80062c6:	f000 81df 	beq.w	8006688 <__ieee754_pow+0x758>
 80062ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ce:	2200      	movs	r2, #0
 80062d0:	2300      	movs	r3, #0
 80062d2:	f7fa fb73 	bl	80009bc <__aeabi_dcmplt>
 80062d6:	3800      	subs	r0, #0
 80062d8:	bf18      	it	ne
 80062da:	2001      	movne	r0, #1
 80062dc:	e72e      	b.n	800613c <__ieee754_pow+0x20c>
 80062de:	bf00      	nop
 80062e0:	60000000 	.word	0x60000000
 80062e4:	3ff71547 	.word	0x3ff71547
 80062e8:	f85ddf44 	.word	0xf85ddf44
 80062ec:	3e54ae0b 	.word	0x3e54ae0b
 80062f0:	55555555 	.word	0x55555555
 80062f4:	3fd55555 	.word	0x3fd55555
 80062f8:	652b82fe 	.word	0x652b82fe
 80062fc:	3ff71547 	.word	0x3ff71547
 8006300:	3ff00000 	.word	0x3ff00000
 8006304:	3fd00000 	.word	0x3fd00000
 8006308:	3fe00000 	.word	0x3fe00000
 800630c:	bff00000 	.word	0xbff00000
 8006310:	408fffff 	.word	0x408fffff
 8006314:	4bd2      	ldr	r3, [pc, #840]	; (8006660 <__ieee754_pow+0x730>)
 8006316:	2200      	movs	r2, #0
 8006318:	402b      	ands	r3, r5
 800631a:	b943      	cbnz	r3, 800632e <__ieee754_pow+0x3fe>
 800631c:	4658      	mov	r0, fp
 800631e:	4661      	mov	r1, ip
 8006320:	4bd0      	ldr	r3, [pc, #832]	; (8006664 <__ieee754_pow+0x734>)
 8006322:	f7fa f8d9 	bl	80004d8 <__aeabi_dmul>
 8006326:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800632a:	4683      	mov	fp, r0
 800632c:	460c      	mov	r4, r1
 800632e:	1523      	asrs	r3, r4, #20
 8006330:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006334:	4413      	add	r3, r2
 8006336:	930b      	str	r3, [sp, #44]	; 0x2c
 8006338:	4bcb      	ldr	r3, [pc, #812]	; (8006668 <__ieee754_pow+0x738>)
 800633a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800633e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006342:	429c      	cmp	r4, r3
 8006344:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006348:	dd08      	ble.n	800635c <__ieee754_pow+0x42c>
 800634a:	4bc8      	ldr	r3, [pc, #800]	; (800666c <__ieee754_pow+0x73c>)
 800634c:	429c      	cmp	r4, r3
 800634e:	f340 8199 	ble.w	8006684 <__ieee754_pow+0x754>
 8006352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006354:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006358:	3301      	adds	r3, #1
 800635a:	930b      	str	r3, [sp, #44]	; 0x2c
 800635c:	2600      	movs	r6, #0
 800635e:	00f3      	lsls	r3, r6, #3
 8006360:	930d      	str	r3, [sp, #52]	; 0x34
 8006362:	4bc3      	ldr	r3, [pc, #780]	; (8006670 <__ieee754_pow+0x740>)
 8006364:	4658      	mov	r0, fp
 8006366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800636a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800636e:	4629      	mov	r1, r5
 8006370:	461a      	mov	r2, r3
 8006372:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006376:	4623      	mov	r3, r4
 8006378:	f7f9 fef6 	bl	8000168 <__aeabi_dsub>
 800637c:	46da      	mov	sl, fp
 800637e:	462b      	mov	r3, r5
 8006380:	4652      	mov	r2, sl
 8006382:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006386:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800638a:	f7f9 feef 	bl	800016c <__adddf3>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	2000      	movs	r0, #0
 8006394:	49b7      	ldr	r1, [pc, #732]	; (8006674 <__ieee754_pow+0x744>)
 8006396:	f7fa f9c9 	bl	800072c <__aeabi_ddiv>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063a6:	f7fa f897 	bl	80004d8 <__aeabi_dmul>
 80063aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063ae:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80063b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063b6:	2300      	movs	r3, #0
 80063b8:	2200      	movs	r2, #0
 80063ba:	46ab      	mov	fp, r5
 80063bc:	106d      	asrs	r5, r5, #1
 80063be:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80063c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80063cc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	f7fa f87e 	bl	80004d8 <__aeabi_dmul>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063e4:	f7f9 fec0 	bl	8000168 <__aeabi_dsub>
 80063e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	4620      	mov	r0, r4
 80063f2:	4629      	mov	r1, r5
 80063f4:	f7f9 feb8 	bl	8000168 <__aeabi_dsub>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4650      	mov	r0, sl
 80063fe:	4659      	mov	r1, fp
 8006400:	f7f9 feb2 	bl	8000168 <__aeabi_dsub>
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	f7fa f866 	bl	80004d8 <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4630      	mov	r0, r6
 8006412:	4639      	mov	r1, r7
 8006414:	f7f9 fea8 	bl	8000168 <__aeabi_dsub>
 8006418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800641c:	f7fa f85c 	bl	80004d8 <__aeabi_dmul>
 8006420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006424:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	f7fa f854 	bl	80004d8 <__aeabi_dmul>
 8006430:	a379      	add	r3, pc, #484	; (adr r3, 8006618 <__ieee754_pow+0x6e8>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	4604      	mov	r4, r0
 8006438:	460d      	mov	r5, r1
 800643a:	f7fa f84d 	bl	80004d8 <__aeabi_dmul>
 800643e:	a378      	add	r3, pc, #480	; (adr r3, 8006620 <__ieee754_pow+0x6f0>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7f9 fe92 	bl	800016c <__adddf3>
 8006448:	4622      	mov	r2, r4
 800644a:	462b      	mov	r3, r5
 800644c:	f7fa f844 	bl	80004d8 <__aeabi_dmul>
 8006450:	a375      	add	r3, pc, #468	; (adr r3, 8006628 <__ieee754_pow+0x6f8>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7f9 fe89 	bl	800016c <__adddf3>
 800645a:	4622      	mov	r2, r4
 800645c:	462b      	mov	r3, r5
 800645e:	f7fa f83b 	bl	80004d8 <__aeabi_dmul>
 8006462:	a373      	add	r3, pc, #460	; (adr r3, 8006630 <__ieee754_pow+0x700>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7f9 fe80 	bl	800016c <__adddf3>
 800646c:	4622      	mov	r2, r4
 800646e:	462b      	mov	r3, r5
 8006470:	f7fa f832 	bl	80004d8 <__aeabi_dmul>
 8006474:	a370      	add	r3, pc, #448	; (adr r3, 8006638 <__ieee754_pow+0x708>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f7f9 fe77 	bl	800016c <__adddf3>
 800647e:	4622      	mov	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	f7fa f829 	bl	80004d8 <__aeabi_dmul>
 8006486:	a36e      	add	r3, pc, #440	; (adr r3, 8006640 <__ieee754_pow+0x710>)
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f7f9 fe6e 	bl	800016c <__adddf3>
 8006490:	4622      	mov	r2, r4
 8006492:	4606      	mov	r6, r0
 8006494:	460f      	mov	r7, r1
 8006496:	462b      	mov	r3, r5
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f7fa f81c 	bl	80004d8 <__aeabi_dmul>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7fa f816 	bl	80004d8 <__aeabi_dmul>
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	f7f9 fe58 	bl	800016c <__adddf3>
 80064bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064c0:	f7fa f80a 	bl	80004d8 <__aeabi_dmul>
 80064c4:	4622      	mov	r2, r4
 80064c6:	462b      	mov	r3, r5
 80064c8:	f7f9 fe50 	bl	800016c <__adddf3>
 80064cc:	4642      	mov	r2, r8
 80064ce:	4606      	mov	r6, r0
 80064d0:	460f      	mov	r7, r1
 80064d2:	464b      	mov	r3, r9
 80064d4:	4640      	mov	r0, r8
 80064d6:	4649      	mov	r1, r9
 80064d8:	f7f9 fffe 	bl	80004d8 <__aeabi_dmul>
 80064dc:	2200      	movs	r2, #0
 80064de:	4b66      	ldr	r3, [pc, #408]	; (8006678 <__ieee754_pow+0x748>)
 80064e0:	4682      	mov	sl, r0
 80064e2:	468b      	mov	fp, r1
 80064e4:	f7f9 fe42 	bl	800016c <__adddf3>
 80064e8:	4632      	mov	r2, r6
 80064ea:	463b      	mov	r3, r7
 80064ec:	f7f9 fe3e 	bl	800016c <__adddf3>
 80064f0:	2400      	movs	r4, #0
 80064f2:	460d      	mov	r5, r1
 80064f4:	4622      	mov	r2, r4
 80064f6:	460b      	mov	r3, r1
 80064f8:	4640      	mov	r0, r8
 80064fa:	4649      	mov	r1, r9
 80064fc:	f7f9 ffec 	bl	80004d8 <__aeabi_dmul>
 8006500:	2200      	movs	r2, #0
 8006502:	4680      	mov	r8, r0
 8006504:	4689      	mov	r9, r1
 8006506:	4620      	mov	r0, r4
 8006508:	4629      	mov	r1, r5
 800650a:	4b5b      	ldr	r3, [pc, #364]	; (8006678 <__ieee754_pow+0x748>)
 800650c:	f7f9 fe2c 	bl	8000168 <__aeabi_dsub>
 8006510:	4652      	mov	r2, sl
 8006512:	465b      	mov	r3, fp
 8006514:	f7f9 fe28 	bl	8000168 <__aeabi_dsub>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	f7f9 fe22 	bl	8000168 <__aeabi_dsub>
 8006524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006528:	f7f9 ffd6 	bl	80004d8 <__aeabi_dmul>
 800652c:	4622      	mov	r2, r4
 800652e:	4606      	mov	r6, r0
 8006530:	460f      	mov	r7, r1
 8006532:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006536:	462b      	mov	r3, r5
 8006538:	f7f9 ffce 	bl	80004d8 <__aeabi_dmul>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4630      	mov	r0, r6
 8006542:	4639      	mov	r1, r7
 8006544:	f7f9 fe12 	bl	800016c <__adddf3>
 8006548:	2400      	movs	r4, #0
 800654a:	4606      	mov	r6, r0
 800654c:	460f      	mov	r7, r1
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7f9 fe09 	bl	800016c <__adddf3>
 800655a:	a33b      	add	r3, pc, #236	; (adr r3, 8006648 <__ieee754_pow+0x718>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	4620      	mov	r0, r4
 8006562:	460d      	mov	r5, r1
 8006564:	f7f9 ffb8 	bl	80004d8 <__aeabi_dmul>
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7f9 fdf8 	bl	8000168 <__aeabi_dsub>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4630      	mov	r0, r6
 800657e:	4639      	mov	r1, r7
 8006580:	f7f9 fdf2 	bl	8000168 <__aeabi_dsub>
 8006584:	a332      	add	r3, pc, #200	; (adr r3, 8006650 <__ieee754_pow+0x720>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 ffa5 	bl	80004d8 <__aeabi_dmul>
 800658e:	a332      	add	r3, pc, #200	; (adr r3, 8006658 <__ieee754_pow+0x728>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	4606      	mov	r6, r0
 8006596:	460f      	mov	r7, r1
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7f9 ff9c 	bl	80004d8 <__aeabi_dmul>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4630      	mov	r0, r6
 80065a6:	4639      	mov	r1, r7
 80065a8:	f7f9 fde0 	bl	800016c <__adddf3>
 80065ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ae:	4b33      	ldr	r3, [pc, #204]	; (800667c <__ieee754_pow+0x74c>)
 80065b0:	f04f 0a00 	mov.w	sl, #0
 80065b4:	4413      	add	r3, r2
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7f9 fdd7 	bl	800016c <__adddf3>
 80065be:	4680      	mov	r8, r0
 80065c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80065c2:	4689      	mov	r9, r1
 80065c4:	f7f9 ff1e 	bl	8000404 <__aeabi_i2d>
 80065c8:	4604      	mov	r4, r0
 80065ca:	460d      	mov	r5, r1
 80065cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ce:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <__ieee754_pow+0x750>)
 80065d0:	4413      	add	r3, r2
 80065d2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065d6:	4642      	mov	r2, r8
 80065d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065dc:	464b      	mov	r3, r9
 80065de:	f7f9 fdc5 	bl	800016c <__adddf3>
 80065e2:	4632      	mov	r2, r6
 80065e4:	463b      	mov	r3, r7
 80065e6:	f7f9 fdc1 	bl	800016c <__adddf3>
 80065ea:	4622      	mov	r2, r4
 80065ec:	462b      	mov	r3, r5
 80065ee:	f7f9 fdbd 	bl	800016c <__adddf3>
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	4650      	mov	r0, sl
 80065f8:	468b      	mov	fp, r1
 80065fa:	f7f9 fdb5 	bl	8000168 <__aeabi_dsub>
 80065fe:	4632      	mov	r2, r6
 8006600:	463b      	mov	r3, r7
 8006602:	f7f9 fdb1 	bl	8000168 <__aeabi_dsub>
 8006606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800660a:	f7f9 fdad 	bl	8000168 <__aeabi_dsub>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4640      	mov	r0, r8
 8006614:	4649      	mov	r1, r9
 8006616:	e60d      	b.n	8006234 <__ieee754_pow+0x304>
 8006618:	4a454eef 	.word	0x4a454eef
 800661c:	3fca7e28 	.word	0x3fca7e28
 8006620:	93c9db65 	.word	0x93c9db65
 8006624:	3fcd864a 	.word	0x3fcd864a
 8006628:	a91d4101 	.word	0xa91d4101
 800662c:	3fd17460 	.word	0x3fd17460
 8006630:	518f264d 	.word	0x518f264d
 8006634:	3fd55555 	.word	0x3fd55555
 8006638:	db6fabff 	.word	0xdb6fabff
 800663c:	3fdb6db6 	.word	0x3fdb6db6
 8006640:	33333303 	.word	0x33333303
 8006644:	3fe33333 	.word	0x3fe33333
 8006648:	e0000000 	.word	0xe0000000
 800664c:	3feec709 	.word	0x3feec709
 8006650:	dc3a03fd 	.word	0xdc3a03fd
 8006654:	3feec709 	.word	0x3feec709
 8006658:	145b01f5 	.word	0x145b01f5
 800665c:	be3e2fe0 	.word	0xbe3e2fe0
 8006660:	7ff00000 	.word	0x7ff00000
 8006664:	43400000 	.word	0x43400000
 8006668:	0003988e 	.word	0x0003988e
 800666c:	000bb679 	.word	0x000bb679
 8006670:	08006cd0 	.word	0x08006cd0
 8006674:	3ff00000 	.word	0x3ff00000
 8006678:	40080000 	.word	0x40080000
 800667c:	08006cf0 	.word	0x08006cf0
 8006680:	08006ce0 	.word	0x08006ce0
 8006684:	2601      	movs	r6, #1
 8006686:	e66a      	b.n	800635e <__ieee754_pow+0x42e>
 8006688:	a39d      	add	r3, pc, #628	; (adr r3, 8006900 <__ieee754_pow+0x9d0>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7f9 fd6b 	bl	800016c <__adddf3>
 8006696:	4622      	mov	r2, r4
 8006698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800669c:	462b      	mov	r3, r5
 800669e:	4650      	mov	r0, sl
 80066a0:	4639      	mov	r1, r7
 80066a2:	f7f9 fd61 	bl	8000168 <__aeabi_dsub>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ae:	f7fa f9a3 	bl	80009f8 <__aeabi_dcmpgt>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f47f ae09 	bne.w	80062ca <__ieee754_pow+0x39a>
 80066b8:	4aa3      	ldr	r2, [pc, #652]	; (8006948 <__ieee754_pow+0xa18>)
 80066ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80066be:	4293      	cmp	r3, r2
 80066c0:	f340 8101 	ble.w	80068c6 <__ieee754_pow+0x996>
 80066c4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80066c8:	2000      	movs	r0, #0
 80066ca:	151b      	asrs	r3, r3, #20
 80066cc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80066d0:	fa4a f303 	asr.w	r3, sl, r3
 80066d4:	4433      	add	r3, r6
 80066d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80066da:	4f9c      	ldr	r7, [pc, #624]	; (800694c <__ieee754_pow+0xa1c>)
 80066dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80066e0:	4117      	asrs	r7, r2
 80066e2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80066e6:	ea23 0107 	bic.w	r1, r3, r7
 80066ea:	f1c2 0214 	rsb	r2, r2, #20
 80066ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80066f2:	460b      	mov	r3, r1
 80066f4:	fa4a fa02 	asr.w	sl, sl, r2
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	4602      	mov	r2, r0
 80066fc:	4629      	mov	r1, r5
 80066fe:	4620      	mov	r0, r4
 8006700:	bfb8      	it	lt
 8006702:	f1ca 0a00 	rsblt	sl, sl, #0
 8006706:	f7f9 fd2f 	bl	8000168 <__aeabi_dsub>
 800670a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006712:	2400      	movs	r4, #0
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	f7f9 fd28 	bl	800016c <__adddf3>
 800671c:	a37a      	add	r3, pc, #488	; (adr r3, 8006908 <__ieee754_pow+0x9d8>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	4620      	mov	r0, r4
 8006724:	460d      	mov	r5, r1
 8006726:	f7f9 fed7 	bl	80004d8 <__aeabi_dmul>
 800672a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800672e:	4606      	mov	r6, r0
 8006730:	460f      	mov	r7, r1
 8006732:	4620      	mov	r0, r4
 8006734:	4629      	mov	r1, r5
 8006736:	f7f9 fd17 	bl	8000168 <__aeabi_dsub>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7f9 fd11 	bl	8000168 <__aeabi_dsub>
 8006746:	a372      	add	r3, pc, #456	; (adr r3, 8006910 <__ieee754_pow+0x9e0>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fec4 	bl	80004d8 <__aeabi_dmul>
 8006750:	a371      	add	r3, pc, #452	; (adr r3, 8006918 <__ieee754_pow+0x9e8>)
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	4680      	mov	r8, r0
 8006758:	4689      	mov	r9, r1
 800675a:	4620      	mov	r0, r4
 800675c:	4629      	mov	r1, r5
 800675e:	f7f9 febb 	bl	80004d8 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4640      	mov	r0, r8
 8006768:	4649      	mov	r1, r9
 800676a:	f7f9 fcff 	bl	800016c <__adddf3>
 800676e:	4604      	mov	r4, r0
 8006770:	460d      	mov	r5, r1
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4630      	mov	r0, r6
 8006778:	4639      	mov	r1, r7
 800677a:	f7f9 fcf7 	bl	800016c <__adddf3>
 800677e:	4632      	mov	r2, r6
 8006780:	463b      	mov	r3, r7
 8006782:	4680      	mov	r8, r0
 8006784:	4689      	mov	r9, r1
 8006786:	f7f9 fcef 	bl	8000168 <__aeabi_dsub>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7f9 fce9 	bl	8000168 <__aeabi_dsub>
 8006796:	4642      	mov	r2, r8
 8006798:	4606      	mov	r6, r0
 800679a:	460f      	mov	r7, r1
 800679c:	464b      	mov	r3, r9
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7f9 fe99 	bl	80004d8 <__aeabi_dmul>
 80067a6:	a35e      	add	r3, pc, #376	; (adr r3, 8006920 <__ieee754_pow+0x9f0>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	4604      	mov	r4, r0
 80067ae:	460d      	mov	r5, r1
 80067b0:	f7f9 fe92 	bl	80004d8 <__aeabi_dmul>
 80067b4:	a35c      	add	r3, pc, #368	; (adr r3, 8006928 <__ieee754_pow+0x9f8>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f7f9 fcd5 	bl	8000168 <__aeabi_dsub>
 80067be:	4622      	mov	r2, r4
 80067c0:	462b      	mov	r3, r5
 80067c2:	f7f9 fe89 	bl	80004d8 <__aeabi_dmul>
 80067c6:	a35a      	add	r3, pc, #360	; (adr r3, 8006930 <__ieee754_pow+0xa00>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7f9 fcce 	bl	800016c <__adddf3>
 80067d0:	4622      	mov	r2, r4
 80067d2:	462b      	mov	r3, r5
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	a357      	add	r3, pc, #348	; (adr r3, 8006938 <__ieee754_pow+0xa08>)
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f7f9 fcc3 	bl	8000168 <__aeabi_dsub>
 80067e2:	4622      	mov	r2, r4
 80067e4:	462b      	mov	r3, r5
 80067e6:	f7f9 fe77 	bl	80004d8 <__aeabi_dmul>
 80067ea:	a355      	add	r3, pc, #340	; (adr r3, 8006940 <__ieee754_pow+0xa10>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 fcbc 	bl	800016c <__adddf3>
 80067f4:	4622      	mov	r2, r4
 80067f6:	462b      	mov	r3, r5
 80067f8:	f7f9 fe6e 	bl	80004d8 <__aeabi_dmul>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7f9 fcb0 	bl	8000168 <__aeabi_dsub>
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4640      	mov	r0, r8
 8006812:	4649      	mov	r1, r9
 8006814:	f7f9 fe60 	bl	80004d8 <__aeabi_dmul>
 8006818:	2200      	movs	r2, #0
 800681a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800681e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7f9 fc9f 	bl	8000168 <__aeabi_dsub>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006832:	f7f9 ff7b 	bl	800072c <__aeabi_ddiv>
 8006836:	4632      	mov	r2, r6
 8006838:	4604      	mov	r4, r0
 800683a:	460d      	mov	r5, r1
 800683c:	463b      	mov	r3, r7
 800683e:	4640      	mov	r0, r8
 8006840:	4649      	mov	r1, r9
 8006842:	f7f9 fe49 	bl	80004d8 <__aeabi_dmul>
 8006846:	4632      	mov	r2, r6
 8006848:	463b      	mov	r3, r7
 800684a:	f7f9 fc8f 	bl	800016c <__adddf3>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4620      	mov	r0, r4
 8006854:	4629      	mov	r1, r5
 8006856:	f7f9 fc87 	bl	8000168 <__aeabi_dsub>
 800685a:	4642      	mov	r2, r8
 800685c:	464b      	mov	r3, r9
 800685e:	f7f9 fc83 	bl	8000168 <__aeabi_dsub>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	2000      	movs	r0, #0
 8006868:	4939      	ldr	r1, [pc, #228]	; (8006950 <__ieee754_pow+0xa20>)
 800686a:	f7f9 fc7d 	bl	8000168 <__aeabi_dsub>
 800686e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006872:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006876:	da29      	bge.n	80068cc <__ieee754_pow+0x99c>
 8006878:	4652      	mov	r2, sl
 800687a:	f000 f955 	bl	8006b28 <scalbn>
 800687e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006882:	f7ff bbfe 	b.w	8006082 <__ieee754_pow+0x152>
 8006886:	4b33      	ldr	r3, [pc, #204]	; (8006954 <__ieee754_pow+0xa24>)
 8006888:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800688c:	429f      	cmp	r7, r3
 800688e:	f77f af13 	ble.w	80066b8 <__ieee754_pow+0x788>
 8006892:	4b31      	ldr	r3, [pc, #196]	; (8006958 <__ieee754_pow+0xa28>)
 8006894:	440b      	add	r3, r1
 8006896:	4303      	orrs	r3, r0
 8006898:	d009      	beq.n	80068ae <__ieee754_pow+0x97e>
 800689a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800689e:	2200      	movs	r2, #0
 80068a0:	2300      	movs	r3, #0
 80068a2:	f7fa f88b 	bl	80009bc <__aeabi_dcmplt>
 80068a6:	3800      	subs	r0, #0
 80068a8:	bf18      	it	ne
 80068aa:	2001      	movne	r0, #1
 80068ac:	e453      	b.n	8006156 <__ieee754_pow+0x226>
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	f7f9 fc59 	bl	8000168 <__aeabi_dsub>
 80068b6:	4642      	mov	r2, r8
 80068b8:	464b      	mov	r3, r9
 80068ba:	f7fa f893 	bl	80009e4 <__aeabi_dcmpge>
 80068be:	2800      	cmp	r0, #0
 80068c0:	f43f aefa 	beq.w	80066b8 <__ieee754_pow+0x788>
 80068c4:	e7e9      	b.n	800689a <__ieee754_pow+0x96a>
 80068c6:	f04f 0a00 	mov.w	sl, #0
 80068ca:	e720      	b.n	800670e <__ieee754_pow+0x7de>
 80068cc:	4621      	mov	r1, r4
 80068ce:	e7d6      	b.n	800687e <__ieee754_pow+0x94e>
 80068d0:	f04f 0b00 	mov.w	fp, #0
 80068d4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006950 <__ieee754_pow+0xa20>
 80068d8:	f7ff bbba 	b.w	8006050 <__ieee754_pow+0x120>
 80068dc:	f04f 0b00 	mov.w	fp, #0
 80068e0:	f04f 0c00 	mov.w	ip, #0
 80068e4:	f7ff bbb4 	b.w	8006050 <__ieee754_pow+0x120>
 80068e8:	4640      	mov	r0, r8
 80068ea:	4649      	mov	r1, r9
 80068ec:	f7ff bb3d 	b.w	8005f6a <__ieee754_pow+0x3a>
 80068f0:	9200      	str	r2, [sp, #0]
 80068f2:	f7ff bb89 	b.w	8006008 <__ieee754_pow+0xd8>
 80068f6:	2300      	movs	r3, #0
 80068f8:	f7ff bb73 	b.w	8005fe2 <__ieee754_pow+0xb2>
 80068fc:	f3af 8000 	nop.w
 8006900:	652b82fe 	.word	0x652b82fe
 8006904:	3c971547 	.word	0x3c971547
 8006908:	00000000 	.word	0x00000000
 800690c:	3fe62e43 	.word	0x3fe62e43
 8006910:	fefa39ef 	.word	0xfefa39ef
 8006914:	3fe62e42 	.word	0x3fe62e42
 8006918:	0ca86c39 	.word	0x0ca86c39
 800691c:	be205c61 	.word	0xbe205c61
 8006920:	72bea4d0 	.word	0x72bea4d0
 8006924:	3e663769 	.word	0x3e663769
 8006928:	c5d26bf1 	.word	0xc5d26bf1
 800692c:	3ebbbd41 	.word	0x3ebbbd41
 8006930:	af25de2c 	.word	0xaf25de2c
 8006934:	3f11566a 	.word	0x3f11566a
 8006938:	16bebd93 	.word	0x16bebd93
 800693c:	3f66c16c 	.word	0x3f66c16c
 8006940:	5555553e 	.word	0x5555553e
 8006944:	3fc55555 	.word	0x3fc55555
 8006948:	3fe00000 	.word	0x3fe00000
 800694c:	000fffff 	.word	0x000fffff
 8006950:	3ff00000 	.word	0x3ff00000
 8006954:	4090cbff 	.word	0x4090cbff
 8006958:	3f6f3400 	.word	0x3f6f3400

0800695c <__ieee754_sqrt>:
 800695c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006ab8 <__ieee754_sqrt+0x15c>
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	ea3c 0c01 	bics.w	ip, ip, r1
 8006968:	4606      	mov	r6, r0
 800696a:	460d      	mov	r5, r1
 800696c:	460c      	mov	r4, r1
 800696e:	460a      	mov	r2, r1
 8006970:	4607      	mov	r7, r0
 8006972:	4603      	mov	r3, r0
 8006974:	d10f      	bne.n	8006996 <__ieee754_sqrt+0x3a>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	f7f9 fdad 	bl	80004d8 <__aeabi_dmul>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4630      	mov	r0, r6
 8006984:	4629      	mov	r1, r5
 8006986:	f7f9 fbf1 	bl	800016c <__adddf3>
 800698a:	4606      	mov	r6, r0
 800698c:	460d      	mov	r5, r1
 800698e:	4630      	mov	r0, r6
 8006990:	4629      	mov	r1, r5
 8006992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006996:	2900      	cmp	r1, #0
 8006998:	dc0e      	bgt.n	80069b8 <__ieee754_sqrt+0x5c>
 800699a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800699e:	ea5c 0707 	orrs.w	r7, ip, r7
 80069a2:	d0f4      	beq.n	800698e <__ieee754_sqrt+0x32>
 80069a4:	b141      	cbz	r1, 80069b8 <__ieee754_sqrt+0x5c>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	f7f9 fbdd 	bl	8000168 <__aeabi_dsub>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	f7f9 febb 	bl	800072c <__aeabi_ddiv>
 80069b6:	e7e8      	b.n	800698a <__ieee754_sqrt+0x2e>
 80069b8:	1521      	asrs	r1, r4, #20
 80069ba:	d075      	beq.n	8006aa8 <__ieee754_sqrt+0x14c>
 80069bc:	07cc      	lsls	r4, r1, #31
 80069be:	f04f 0400 	mov.w	r4, #0
 80069c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80069c6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80069ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80069ce:	bf5e      	ittt	pl
 80069d0:	0fd9      	lsrpl	r1, r3, #31
 80069d2:	005b      	lslpl	r3, r3, #1
 80069d4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80069d8:	0fd9      	lsrs	r1, r3, #31
 80069da:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80069de:	2516      	movs	r5, #22
 80069e0:	4620      	mov	r0, r4
 80069e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069e6:	107f      	asrs	r7, r7, #1
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	1846      	adds	r6, r0, r1
 80069ec:	4296      	cmp	r6, r2
 80069ee:	bfde      	ittt	le
 80069f0:	1b92      	suble	r2, r2, r6
 80069f2:	1870      	addle	r0, r6, r1
 80069f4:	1864      	addle	r4, r4, r1
 80069f6:	0052      	lsls	r2, r2, #1
 80069f8:	3d01      	subs	r5, #1
 80069fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80069fe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006a02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a06:	d1f0      	bne.n	80069ea <__ieee754_sqrt+0x8e>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f04f 0e20 	mov.w	lr, #32
 8006a0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006a12:	4282      	cmp	r2, r0
 8006a14:	eb06 0c05 	add.w	ip, r6, r5
 8006a18:	dc02      	bgt.n	8006a20 <__ieee754_sqrt+0xc4>
 8006a1a:	d113      	bne.n	8006a44 <__ieee754_sqrt+0xe8>
 8006a1c:	459c      	cmp	ip, r3
 8006a1e:	d811      	bhi.n	8006a44 <__ieee754_sqrt+0xe8>
 8006a20:	f1bc 0f00 	cmp.w	ip, #0
 8006a24:	eb0c 0506 	add.w	r5, ip, r6
 8006a28:	da43      	bge.n	8006ab2 <__ieee754_sqrt+0x156>
 8006a2a:	2d00      	cmp	r5, #0
 8006a2c:	db41      	blt.n	8006ab2 <__ieee754_sqrt+0x156>
 8006a2e:	f100 0801 	add.w	r8, r0, #1
 8006a32:	1a12      	subs	r2, r2, r0
 8006a34:	4640      	mov	r0, r8
 8006a36:	459c      	cmp	ip, r3
 8006a38:	bf88      	it	hi
 8006a3a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006a3e:	eba3 030c 	sub.w	r3, r3, ip
 8006a42:	4431      	add	r1, r6
 8006a44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006a48:	f1be 0e01 	subs.w	lr, lr, #1
 8006a4c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a58:	d1db      	bne.n	8006a12 <__ieee754_sqrt+0xb6>
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	d006      	beq.n	8006a6c <__ieee754_sqrt+0x110>
 8006a5e:	1c48      	adds	r0, r1, #1
 8006a60:	bf0b      	itete	eq
 8006a62:	4671      	moveq	r1, lr
 8006a64:	3101      	addne	r1, #1
 8006a66:	3401      	addeq	r4, #1
 8006a68:	f021 0101 	bicne.w	r1, r1, #1
 8006a6c:	1063      	asrs	r3, r4, #1
 8006a6e:	0849      	lsrs	r1, r1, #1
 8006a70:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006a74:	07e2      	lsls	r2, r4, #31
 8006a76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006a7a:	bf48      	it	mi
 8006a7c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006a80:	460e      	mov	r6, r1
 8006a82:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006a86:	e782      	b.n	800698e <__ieee754_sqrt+0x32>
 8006a88:	0ada      	lsrs	r2, r3, #11
 8006a8a:	3815      	subs	r0, #21
 8006a8c:	055b      	lsls	r3, r3, #21
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	d0fa      	beq.n	8006a88 <__ieee754_sqrt+0x12c>
 8006a92:	02d5      	lsls	r5, r2, #11
 8006a94:	d50a      	bpl.n	8006aac <__ieee754_sqrt+0x150>
 8006a96:	f1c1 0420 	rsb	r4, r1, #32
 8006a9a:	fa23 f404 	lsr.w	r4, r3, r4
 8006a9e:	1e4d      	subs	r5, r1, #1
 8006aa0:	408b      	lsls	r3, r1
 8006aa2:	4322      	orrs	r2, r4
 8006aa4:	1b41      	subs	r1, r0, r5
 8006aa6:	e789      	b.n	80069bc <__ieee754_sqrt+0x60>
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	e7f0      	b.n	8006a8e <__ieee754_sqrt+0x132>
 8006aac:	0052      	lsls	r2, r2, #1
 8006aae:	3101      	adds	r1, #1
 8006ab0:	e7ef      	b.n	8006a92 <__ieee754_sqrt+0x136>
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	e7bd      	b.n	8006a32 <__ieee754_sqrt+0xd6>
 8006ab6:	bf00      	nop
 8006ab8:	7ff00000 	.word	0x7ff00000

08006abc <with_errno>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	4616      	mov	r6, r2
 8006ac4:	f7fe fd0e 	bl	80054e4 <__errno>
 8006ac8:	4629      	mov	r1, r5
 8006aca:	6006      	str	r6, [r0, #0]
 8006acc:	4620      	mov	r0, r4
 8006ace:	bd70      	pop	{r4, r5, r6, pc}

08006ad0 <xflow>:
 8006ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ad2:	4615      	mov	r5, r2
 8006ad4:	461c      	mov	r4, r3
 8006ad6:	b180      	cbz	r0, 8006afa <xflow+0x2a>
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ade:	e9cd 0100 	strd	r0, r1, [sp]
 8006ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	4621      	mov	r1, r4
 8006aea:	f7f9 fcf5 	bl	80004d8 <__aeabi_dmul>
 8006aee:	2222      	movs	r2, #34	; 0x22
 8006af0:	b003      	add	sp, #12
 8006af2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006af6:	f7ff bfe1 	b.w	8006abc <with_errno>
 8006afa:	4610      	mov	r0, r2
 8006afc:	4619      	mov	r1, r3
 8006afe:	e7ee      	b.n	8006ade <xflow+0xe>

08006b00 <__math_uflow>:
 8006b00:	2200      	movs	r2, #0
 8006b02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b06:	f7ff bfe3 	b.w	8006ad0 <xflow>

08006b0a <__math_oflow>:
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006b10:	f7ff bfde 	b.w	8006ad0 <xflow>

08006b14 <fabs>:
 8006b14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006b18:	4770      	bx	lr

08006b1a <finite>:
 8006b1a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006b1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006b22:	0fc0      	lsrs	r0, r0, #31
 8006b24:	4770      	bx	lr
	...

08006b28 <scalbn>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	4617      	mov	r7, r2
 8006b34:	460b      	mov	r3, r1
 8006b36:	b996      	cbnz	r6, 8006b5e <scalbn+0x36>
 8006b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b3c:	4303      	orrs	r3, r0
 8006b3e:	d039      	beq.n	8006bb4 <scalbn+0x8c>
 8006b40:	4b33      	ldr	r3, [pc, #204]	; (8006c10 <scalbn+0xe8>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	f7f9 fcc8 	bl	80004d8 <__aeabi_dmul>
 8006b48:	4b32      	ldr	r3, [pc, #200]	; (8006c14 <scalbn+0xec>)
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	429f      	cmp	r7, r3
 8006b4e:	460d      	mov	r5, r1
 8006b50:	da0f      	bge.n	8006b72 <scalbn+0x4a>
 8006b52:	a32b      	add	r3, pc, #172	; (adr r3, 8006c00 <scalbn+0xd8>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fcbe 	bl	80004d8 <__aeabi_dmul>
 8006b5c:	e006      	b.n	8006b6c <scalbn+0x44>
 8006b5e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006b62:	4296      	cmp	r6, r2
 8006b64:	d10a      	bne.n	8006b7c <scalbn+0x54>
 8006b66:	4602      	mov	r2, r0
 8006b68:	f7f9 fb00 	bl	800016c <__adddf3>
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	460d      	mov	r5, r1
 8006b70:	e020      	b.n	8006bb4 <scalbn+0x8c>
 8006b72:	460b      	mov	r3, r1
 8006b74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006b78:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006b7c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006b80:	19b9      	adds	r1, r7, r6
 8006b82:	4291      	cmp	r1, r2
 8006b84:	dd0e      	ble.n	8006ba4 <scalbn+0x7c>
 8006b86:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006b8a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006b8e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006b92:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006b96:	4820      	ldr	r0, [pc, #128]	; (8006c18 <scalbn+0xf0>)
 8006b98:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006b9c:	a31a      	add	r3, pc, #104	; (adr r3, 8006c08 <scalbn+0xe0>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	e7d9      	b.n	8006b58 <scalbn+0x30>
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	dd08      	ble.n	8006bba <scalbn+0x92>
 8006ba8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bba:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006bbe:	da12      	bge.n	8006be6 <scalbn+0xbe>
 8006bc0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006bc4:	429f      	cmp	r7, r3
 8006bc6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006bca:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006bce:	dcdc      	bgt.n	8006b8a <scalbn+0x62>
 8006bd0:	a30b      	add	r3, pc, #44	; (adr r3, 8006c00 <scalbn+0xd8>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006bda:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006bde:	480f      	ldr	r0, [pc, #60]	; (8006c1c <scalbn+0xf4>)
 8006be0:	f041 011f 	orr.w	r1, r1, #31
 8006be4:	e7b8      	b.n	8006b58 <scalbn+0x30>
 8006be6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bea:	3136      	adds	r1, #54	; 0x36
 8006bec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bf0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <scalbn+0xf8>)
 8006bfc:	e7ac      	b.n	8006b58 <scalbn+0x30>
 8006bfe:	bf00      	nop
 8006c00:	c2f8f359 	.word	0xc2f8f359
 8006c04:	01a56e1f 	.word	0x01a56e1f
 8006c08:	8800759c 	.word	0x8800759c
 8006c0c:	7e37e43c 	.word	0x7e37e43c
 8006c10:	43500000 	.word	0x43500000
 8006c14:	ffff3cb0 	.word	0xffff3cb0
 8006c18:	8800759c 	.word	0x8800759c
 8006c1c:	c2f8f359 	.word	0xc2f8f359
 8006c20:	3c900000 	.word	0x3c900000

08006c24 <_init>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr

08006c30 <_fini>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr
