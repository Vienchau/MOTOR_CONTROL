
MotorControlF407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000716c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007300  08007300  00017300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b0  080073b0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b8  080073b8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080073c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000b4c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bc8  20000bc8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010750  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000272a  00000000  00000000  000307fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00032f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00033ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022332  00000000  00000000  00034920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129bb  00000000  00000000  00056c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf28  00000000  00000000  0006960d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135535  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000401c  00000000  00000000  00135588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072e4 	.word	0x080072e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080072e4 	.word	0x080072e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f8a:	f001 ff51 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000fa8:	f001 fda6 	bl	8002af8 <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f001 fb5c 	bl	8002684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 fb34 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f7ff ff94 	bl	8000efc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fd4:	f001 f8ee 	bl	80021b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fd8:	f001 f938 	bl	800224c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fdc:	f001 f990 	bl	8002300 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fe0:	f001 faac 	bl	800253c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 8000fe4:	f000 ff68 	bl	8001eb8 <SerialInit>
  MotorInit();
 8000fe8:	f000 fc06 	bl	80017f8 <MotorInit>
  tProcess = NONE;
 8000fec:	4bb0      	ldr	r3, [pc, #704]	; (80012b0 <main+0x2f0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(g_bDataAvailable == true)
 8000ff2:	4bb0      	ldr	r3, [pc, #704]	; (80012b4 <main+0x2f4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d04d      	beq.n	8001096 <main+0xd6>
	  	      {
	  	        if(StrCompare(g_strCommand, (uint8_t*)"SPID", 4))
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	49ae      	ldr	r1, [pc, #696]	; (80012b8 <main+0x2f8>)
 8000ffe:	48af      	ldr	r0, [pc, #700]	; (80012bc <main+0x2fc>)
 8001000:	f000 ff36 	bl	8001e70 <StrCompare>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <main+0x52>
	  	        {
	  	          tProcess = SPID;
 800100a:	4ba9      	ldr	r3, [pc, #676]	; (80012b0 <main+0x2f0>)
 800100c:	2202      	movs	r2, #2
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e03e      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CTUN", 4))
 8001012:	2204      	movs	r2, #4
 8001014:	49aa      	ldr	r1, [pc, #680]	; (80012c0 <main+0x300>)
 8001016:	48a9      	ldr	r0, [pc, #676]	; (80012bc <main+0x2fc>)
 8001018:	f000 ff2a 	bl	8001e70 <StrCompare>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <main+0x6a>
	  	        {
	  	          tProcess = CTUN_RES;
 8001022:	4ba3      	ldr	r3, [pc, #652]	; (80012b0 <main+0x2f0>)
 8001024:	2204      	movs	r2, #4
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e032      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GPID", 4))
 800102a:	2204      	movs	r2, #4
 800102c:	49a5      	ldr	r1, [pc, #660]	; (80012c4 <main+0x304>)
 800102e:	48a3      	ldr	r0, [pc, #652]	; (80012bc <main+0x2fc>)
 8001030:	f000 ff1e 	bl	8001e70 <StrCompare>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <main+0x82>
	  	        {
	  	          tProcess = GPID;
 800103a:	4b9d      	ldr	r3, [pc, #628]	; (80012b0 <main+0x2f0>)
 800103c:	2205      	movs	r2, #5
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e026      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CSET", 4))
 8001042:	2204      	movs	r2, #4
 8001044:	49a0      	ldr	r1, [pc, #640]	; (80012c8 <main+0x308>)
 8001046:	489d      	ldr	r0, [pc, #628]	; (80012bc <main+0x2fc>)
 8001048:	f000 ff12 	bl	8001e70 <StrCompare>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <main+0x9a>
	  	        {
	  	          tProcess = CSET;
 8001052:	4b97      	ldr	r3, [pc, #604]	; (80012b0 <main+0x2f0>)
 8001054:	2206      	movs	r2, #6
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e01a      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CRUN", 4))
 800105a:	2204      	movs	r2, #4
 800105c:	499b      	ldr	r1, [pc, #620]	; (80012cc <main+0x30c>)
 800105e:	4897      	ldr	r0, [pc, #604]	; (80012bc <main+0x2fc>)
 8001060:	f000 ff06 	bl	8001e70 <StrCompare>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <main+0xb2>
	  	        {
	  	          tProcess = CRUN_RES;
 800106a:	4b91      	ldr	r3, [pc, #580]	; (80012b0 <main+0x2f0>)
 800106c:	2208      	movs	r2, #8
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e00e      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GRMS", 4))
 8001072:	2204      	movs	r2, #4
 8001074:	4996      	ldr	r1, [pc, #600]	; (80012d0 <main+0x310>)
 8001076:	4891      	ldr	r0, [pc, #580]	; (80012bc <main+0x2fc>)
 8001078:	f000 fefa 	bl	8001e70 <StrCompare>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <main+0xca>
	  	        {
	  	          tProcess = GRMS;
 8001082:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <main+0x2f0>)
 8001084:	2209      	movs	r2, #9
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e002      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else
	  	        {
	  	          tProcess = NONE;
 800108a:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <main+0x2f0>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
	  	        }
	  	        g_bDataAvailable = false;
 8001090:	4b88      	ldr	r3, [pc, #544]	; (80012b4 <main+0x2f4>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	  	      }

	  	      switch(tProcess)
 8001096:	4b86      	ldr	r3, [pc, #536]	; (80012b0 <main+0x2f0>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	2b08      	cmp	r3, #8
 800109e:	d8a8      	bhi.n	8000ff2 <main+0x32>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <main+0xe8>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010cd 	.word	0x080010cd
 80010ac:	080010d3 	.word	0x080010d3
 80010b0:	08000ff3 	.word	0x08000ff3
 80010b4:	080011e5 	.word	0x080011e5
 80010b8:	080011f7 	.word	0x080011f7
 80010bc:	08001305 	.word	0x08001305
 80010c0:	08001503 	.word	0x08001503
 80010c4:	080014d5 	.word	0x080014d5
 80010c8:	0800150f 	.word	0x0800150f
	  	      {
	  	        case NONE:
	  	          SerialAcceptReceive();
 80010cc:	f000 ff02 	bl	8001ed4 <SerialAcceptReceive>
	  	          break;
 80010d0:	e28e      	b.n	80015f0 <main+0x630>
	  	        case SPID:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80010d2:	4a80      	ldr	r2, [pc, #512]	; (80012d4 <main+0x314>)
 80010d4:	4980      	ldr	r1, [pc, #512]	; (80012d8 <main+0x318>)
 80010d6:	4879      	ldr	r0, [pc, #484]	; (80012bc <main+0x2fc>)
 80010d8:	f000 ff0a 	bl	8001ef0 <SerialWriteComm>
	  	          g_nCmdPulse = 0;
 80010dc:	4b7f      	ldr	r3, [pc, #508]	; (80012dc <main+0x31c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
	  	          PIDReset(&tPIDControl);
 80010e2:	487f      	ldr	r0, [pc, #508]	; (80012e0 <main+0x320>)
 80010e4:	f000 fdf0 	bl	8001cc8 <PIDReset>
	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 80010e8:	4b7e      	ldr	r3, [pc, #504]	; (80012e4 <main+0x324>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
	  	          g_nIndex = 0;
 80010f2:	4b7d      	ldr	r3, [pc, #500]	; (80012e8 <main+0x328>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]

	  	          //get PID params
	  	          tPIDControl.dKp = (float)g_nData[0] + (float)g_nData[1]/10;
 80010f8:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <main+0x314>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001104:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <main+0x314>)
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001110:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001114:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <main+0x320>)
 800111e:	edc3 7a00 	vstr	s15, [r3]
	  	          tPIDControl.dKi = (float)g_nData[2] + (float)g_nData[3]/100;
 8001122:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <main+0x314>)
 8001124:	789b      	ldrb	r3, [r3, #2]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <main+0x314>)
 8001130:	78db      	ldrb	r3, [r3, #3]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800113a:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 80012ec <main+0x32c>
 800113e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001146:	4b66      	ldr	r3, [pc, #408]	; (80012e0 <main+0x320>)
 8001148:	edc3 7a01 	vstr	s15, [r3, #4]
	  	          tPIDControl.dKd = ((float)g_nData[4] + (float)g_nData[5]/(pow((float)10,(float)g_nData[6])))/100;
 800114c:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <main+0x314>)
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001158:	ee17 0a90 	vmov	r0, s15
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <main+0x314>)
 8001166:	795b      	ldrb	r3, [r3, #5]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001170:	ee17 0a90 	vmov	r0, s15
 8001174:	f7ff f9e8 	bl	8000548 <__aeabi_f2d>
 8001178:	4680      	mov	r8, r0
 800117a:	4689      	mov	r9, r1
 800117c:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <main+0x314>)
 800117e:	799b      	ldrb	r3, [r3, #6]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	ec43 2b11 	vmov	d1, r2, r3
 8001198:	ed9f 0b43 	vldr	d0, [pc, #268]	; 80012a8 <main+0x2e8>
 800119c:	f005 f988 	bl	80064b0 <pow>
 80011a0:	ec53 2b10 	vmov	r2, r3, d0
 80011a4:	4640      	mov	r0, r8
 80011a6:	4649      	mov	r1, r9
 80011a8:	f7ff fb50 	bl	800084c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff f86a 	bl	800028c <__adddf3>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <main+0x330>)
 80011c6:	f7ff fb41 	bl	800084c <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fcc1 	bl	8000b58 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a41      	ldr	r2, [pc, #260]	; (80012e0 <main+0x320>)
 80011da:	6093      	str	r3, [r2, #8]

	  	          tProcess = NONE;
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <main+0x2f0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
	  	          break;
 80011e2:	e205      	b.n	80015f0 <main+0x630>
	  	        case CTUN_RES:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80011e4:	4a3b      	ldr	r2, [pc, #236]	; (80012d4 <main+0x314>)
 80011e6:	493c      	ldr	r1, [pc, #240]	; (80012d8 <main+0x318>)
 80011e8:	4834      	ldr	r0, [pc, #208]	; (80012bc <main+0x2fc>)
 80011ea:	f000 fe81 	bl	8001ef0 <SerialWriteComm>
	  	          tProcess = CTUN;
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <main+0x2f0>)
 80011f0:	2203      	movs	r2, #3
 80011f2:	701a      	strb	r2, [r3, #0]
	  	          break;
 80011f4:	e1fc      	b.n	80015f0 <main+0x630>
	  	        case CTUN:
	  	          break;
	  	        case GPID:
	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	e046      	b.n	800128a <main+0x2ca>
	  	          {
	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 80011fc:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <main+0x2fc>)
 80011fe:	493d      	ldr	r1, [pc, #244]	; (80012f4 <main+0x334>)
 8001200:	483d      	ldr	r0, [pc, #244]	; (80012f8 <main+0x338>)
 8001202:	f004 fde5 	bl	8005dd0 <siprintf>
	  	            memset(g_nTxOption, '\0', 3);
 8001206:	2203      	movs	r2, #3
 8001208:	2100      	movs	r1, #0
 800120a:	483c      	ldr	r0, [pc, #240]	; (80012fc <main+0x33c>)
 800120c:	f004 fce8 	bl	8005be0 <memset>
	  	            g_nTxData[6] = (tPIDControl.nSampleTuningPID[index]&0xFF00) >>8;
 8001210:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <main+0x320>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3308      	adds	r3, #8
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <main+0x340>)
 8001224:	719a      	strb	r2, [r3, #6]
	  	            g_nTxData[7] = (tPIDControl.nSampleTuningPID[index]&0xFF);
 8001226:	4a2e      	ldr	r2, [pc, #184]	; (80012e0 <main+0x320>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3308      	adds	r3, #8
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	889b      	ldrh	r3, [r3, #4]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <main+0x340>)
 8001236:	71da      	strb	r2, [r3, #7]
	  	            g_nTxData[2] = (index&0xFF00) >>8;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	121b      	asrs	r3, r3, #8
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <main+0x340>)
 8001240:	709a      	strb	r2, [r3, #2]
	  	            g_nTxData[3] = (index&0xFF);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <main+0x340>)
 8001248:	70da      	strb	r2, [r3, #3]
	  	            g_nTxData[0] = 0;
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <main+0x340>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
	  	            g_nTxData[1] = 199;
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <main+0x340>)
 8001252:	22c7      	movs	r2, #199	; 0xc7
 8001254:	705a      	strb	r2, [r3, #1]

	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 8001256:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <main+0x340>)
 8001258:	4928      	ldr	r1, [pc, #160]	; (80012fc <main+0x33c>)
 800125a:	4827      	ldr	r0, [pc, #156]	; (80012f8 <main+0x338>)
 800125c:	f000 fe48 	bl	8001ef0 <SerialWriteComm>
	  	            memset(g_strTxCommand, '\0', 4);
 8001260:	2204      	movs	r2, #4
 8001262:	2100      	movs	r1, #0
 8001264:	4824      	ldr	r0, [pc, #144]	; (80012f8 <main+0x338>)
 8001266:	f004 fcbb 	bl	8005be0 <memset>
	  	            memset(g_nTxOption, '\0', 3);
 800126a:	2203      	movs	r2, #3
 800126c:	2100      	movs	r1, #0
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <main+0x33c>)
 8001270:	f004 fcb6 	bl	8005be0 <memset>
	  	            memset(g_nTxData, '\0', 8);
 8001274:	2208      	movs	r2, #8
 8001276:	2100      	movs	r1, #0
 8001278:	4821      	ldr	r0, [pc, #132]	; (8001300 <main+0x340>)
 800127a:	f004 fcb1 	bl	8005be0 <memset>

	  	            HAL_Delay(30);
 800127e:	201e      	movs	r0, #30
 8001280:	f001 fa72 	bl	8002768 <HAL_Delay>
	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <main+0x328>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	3b01      	subs	r3, #1
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	dbb2      	blt.n	80011fc <main+0x23c>
	  	          }
	  	          g_bDataAvailable = false;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <main+0x2f4>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	  	          SerialAcceptReceive();
 800129c:	f000 fe1a 	bl	8001ed4 <SerialAcceptReceive>
	  	          tProcess = NONE;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <main+0x2f0>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
	  	          break;
 80012a6:	e1a3      	b.n	80015f0 <main+0x630>
 80012a8:	00000000 	.word	0x00000000
 80012ac:	40240000 	.word	0x40240000
 80012b0:	200000a8 	.word	0x200000a8
 80012b4:	20000a90 	.word	0x20000a90
 80012b8:	08007300 	.word	0x08007300
 80012bc:	20000a80 	.word	0x20000a80
 80012c0:	08007308 	.word	0x08007308
 80012c4:	08007310 	.word	0x08007310
 80012c8:	08007318 	.word	0x08007318
 80012cc:	08007320 	.word	0x08007320
 80012d0:	08007328 	.word	0x08007328
 80012d4:	20000a88 	.word	0x20000a88
 80012d8:	20000a84 	.word	0x20000a84
 80012dc:	20000a60 	.word	0x20000a60
 80012e0:	200000ac 	.word	0x200000ac
 80012e4:	20000b28 	.word	0x20000b28
 80012e8:	20000a64 	.word	0x20000a64
 80012ec:	42c80000 	.word	0x42c80000
 80012f0:	40590000 	.word	0x40590000
 80012f4:	08007330 	.word	0x08007330
 80012f8:	20000098 	.word	0x20000098
 80012fc:	2000009c 	.word	0x2000009c
 8001300:	200000a0 	.word	0x200000a0
	  	        case CSET:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 8001304:	4abb      	ldr	r2, [pc, #748]	; (80015f4 <main+0x634>)
 8001306:	49bc      	ldr	r1, [pc, #752]	; (80015f8 <main+0x638>)
 8001308:	48bc      	ldr	r0, [pc, #752]	; (80015fc <main+0x63c>)
 800130a:	f000 fdf1 	bl	8001ef0 <SerialWriteComm>

	  	          PIDReset(&tPIDControl);
 800130e:	48bc      	ldr	r0, [pc, #752]	; (8001600 <main+0x640>)
 8001310:	f000 fcda 	bl	8001cc8 <PIDReset>
	  	          g_nActPulse = 0;
 8001314:	4bbb      	ldr	r3, [pc, #748]	; (8001604 <main+0x644>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
	  	          g_nCmdPulse = 0 ;
 800131a:	4bbb      	ldr	r3, [pc, #748]	; (8001608 <main+0x648>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

	  	          //Get Pmax, Vmax, Amax
	  	          tProfile.dAccelMax = (float)(g_nData[2])*256 + (float)(g_nData[3]);
 8001320:	4bb4      	ldr	r3, [pc, #720]	; (80015f4 <main+0x634>)
 8001322:	789b      	ldrb	r3, [r3, #2]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800160c <main+0x64c>
 8001330:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001334:	4baf      	ldr	r3, [pc, #700]	; (80015f4 <main+0x634>)
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	4bb2      	ldr	r3, [pc, #712]	; (8001610 <main+0x650>)
 8001346:	edc3 7a00 	vstr	s15, [r3]
	  	          tProfile.dVelMax = (float)(g_nData[4])*256 + (float)(g_nData[5]);
 800134a:	4baa      	ldr	r3, [pc, #680]	; (80015f4 <main+0x634>)
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001356:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800160c <main+0x64c>
 800135a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800135e:	4ba5      	ldr	r3, [pc, #660]	; (80015f4 <main+0x634>)
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	4ba8      	ldr	r3, [pc, #672]	; (8001610 <main+0x650>)
 8001370:	edc3 7a01 	vstr	s15, [r3, #4]
	  	          tProfile.dPosMax = (float)(g_nData[6])*256 + (float)(g_nData[7]);
 8001374:	4b9f      	ldr	r3, [pc, #636]	; (80015f4 <main+0x634>)
 8001376:	799b      	ldrb	r3, [r3, #6]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001380:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800160c <main+0x64c>
 8001384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001388:	4b9a      	ldr	r3, [pc, #616]	; (80015f4 <main+0x634>)
 800138a:	79db      	ldrb	r3, [r3, #7]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	4b9d      	ldr	r3, [pc, #628]	; (8001610 <main+0x650>)
 800139a:	edc3 7a02 	vstr	s15, [r3, #8]
	  	          //Calculate params for trapezoidal speed
	  	          tProfile.dA1 = 0.5f * tProfile.dAccelMax;
 800139e:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <main+0x650>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	4b98      	ldr	r3, [pc, #608]	; (8001610 <main+0x650>)
 80013ae:	edc3 7a03 	vstr	s15, [r3, #12]
	  	          tProfile.dA2 = tProfile.dVelMax;
 80013b2:	4b97      	ldr	r3, [pc, #604]	; (8001610 <main+0x650>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a96      	ldr	r2, [pc, #600]	; (8001610 <main+0x650>)
 80013b8:	6113      	str	r3, [r2, #16]
	  	          tProfile.dB2 = -0.5f * tProfile.dVelMax * tProfile.dVelMax / tProfile.dAccelMax;
 80013ba:	4b95      	ldr	r3, [pc, #596]	; (8001610 <main+0x650>)
 80013bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c8:	4b91      	ldr	r3, [pc, #580]	; (8001610 <main+0x650>)
 80013ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013d2:	4b8f      	ldr	r3, [pc, #572]	; (8001610 <main+0x650>)
 80013d4:	ed93 7a00 	vldr	s14, [r3]
 80013d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013dc:	4b8c      	ldr	r3, [pc, #560]	; (8001610 <main+0x650>)
 80013de:	edc3 7a05 	vstr	s15, [r3, #20]
	  	          tProfile.dA3 = -0.5f * tProfile.dAccelMax;
 80013e2:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <main+0x650>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	4b87      	ldr	r3, [pc, #540]	; (8001610 <main+0x650>)
 80013f2:	edc3 7a06 	vstr	s15, [r3, #24]
	  	          tProfile.dB3 = tProfile.dPosMax * tProfile.dAccelMax / tProfile.dVelMax + tProfile.dVelMax;
 80013f6:	4b86      	ldr	r3, [pc, #536]	; (8001610 <main+0x650>)
 80013f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80013fc:	4b84      	ldr	r3, [pc, #528]	; (8001610 <main+0x650>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001406:	4b82      	ldr	r3, [pc, #520]	; (8001610 <main+0x650>)
 8001408:	edd3 7a01 	vldr	s15, [r3, #4]
 800140c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001410:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <main+0x650>)
 8001412:	edd3 7a01 	vldr	s15, [r3, #4]
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4b7d      	ldr	r3, [pc, #500]	; (8001610 <main+0x650>)
 800141c:	edc3 7a07 	vstr	s15, [r3, #28]
	  	          tProfile.dC3 = -0.5f * tProfile.dPosMax*tProfile.dPosMax*tProfile.dAccelMax/ (tProfile.dVelMax * tProfile.dVelMax) - 0.5f *tProfile.dVelMax * tProfile.dVelMax/tProfile.dAccelMax;
 8001420:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <main+0x650>)
 8001422:	edd3 7a02 	vldr	s15, [r3, #8]
 8001426:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800142a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800142e:	4b78      	ldr	r3, [pc, #480]	; (8001610 <main+0x650>)
 8001430:	edd3 7a02 	vldr	s15, [r3, #8]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	4b75      	ldr	r3, [pc, #468]	; (8001610 <main+0x650>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <main+0x650>)
 8001444:	ed93 7a01 	vldr	s14, [r3, #4]
 8001448:	4b71      	ldr	r3, [pc, #452]	; (8001610 <main+0x650>)
 800144a:	edd3 7a01 	vldr	s15, [r3, #4]
 800144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001456:	4b6e      	ldr	r3, [pc, #440]	; (8001610 <main+0x650>)
 8001458:	edd3 7a01 	vldr	s15, [r3, #4]
 800145c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001460:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001464:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <main+0x650>)
 8001466:	edd3 7a01 	vldr	s15, [r3, #4]
 800146a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800146e:	4b68      	ldr	r3, [pc, #416]	; (8001610 <main+0x650>)
 8001470:	edd3 6a00 	vldr	s13, [r3]
 8001474:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	4b64      	ldr	r3, [pc, #400]	; (8001610 <main+0x650>)
 800147e:	edc3 7a08 	vstr	s15, [r3, #32]


	  	          tProfile.dMidStep1 = tProfile.dVelMax / tProfile.dAccelMax;
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <main+0x650>)
 8001484:	edd3 6a01 	vldr	s13, [r3, #4]
 8001488:	4b61      	ldr	r3, [pc, #388]	; (8001610 <main+0x650>)
 800148a:	ed93 7a00 	vldr	s14, [r3]
 800148e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <main+0x650>)
 8001494:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	  	          tProfile.dMidStep2 = tProfile.dPosMax / tProfile.dVelMax;
 8001498:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <main+0x650>)
 800149a:	edd3 6a02 	vldr	s13, [r3, #8]
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <main+0x650>)
 80014a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80014a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <main+0x650>)
 80014aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  	          tProfile.dMidStep3 = tProfile.dMidStep1 / tProfile.dMidStep2;
 80014ae:	4b58      	ldr	r3, [pc, #352]	; (8001610 <main+0x650>)
 80014b0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80014b4:	4b56      	ldr	r3, [pc, #344]	; (8001610 <main+0x650>)
 80014b6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014be:	4b54      	ldr	r3, [pc, #336]	; (8001610 <main+0x650>)
 80014c0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	  	          tProfile.nTime = 0;
 80014c4:	4b52      	ldr	r3, [pc, #328]	; (8001610 <main+0x650>)
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
	  	          tProcess = NONE;
 80014cc:	4b51      	ldr	r3, [pc, #324]	; (8001614 <main+0x654>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
	  	          break;
 80014d2:	e08d      	b.n	80015f0 <main+0x630>

	  	        case CRUN_RES:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80014d4:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <main+0x634>)
 80014d6:	4948      	ldr	r1, [pc, #288]	; (80015f8 <main+0x638>)
 80014d8:	4848      	ldr	r0, [pc, #288]	; (80015fc <main+0x63c>)
 80014da:	f000 fd09 	bl	8001ef0 <SerialWriteComm>
	  	          g_nCmdPulse = 0;
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <main+0x648>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
	  	          PIDReset(&tPIDControl);
 80014e4:	4846      	ldr	r0, [pc, #280]	; (8001600 <main+0x640>)
 80014e6:	f000 fbef 	bl	8001cc8 <PIDReset>
	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 80014ea:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <main+0x658>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
	  	          g_nIndex = 0 ;
 80014f4:	4b49      	ldr	r3, [pc, #292]	; (800161c <main+0x65c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	801a      	strh	r2, [r3, #0]
	  	          tProcess = CRUN;
 80014fa:	4b46      	ldr	r3, [pc, #280]	; (8001614 <main+0x654>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	701a      	strb	r2, [r3, #0]
	  	          break;
 8001500:	e076      	b.n	80015f0 <main+0x630>
	  	        case CRUN:
	  	          g_bDataAvailable = false;
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <main+0x660>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
	  	          SerialAcceptReceive();
 8001508:	f000 fce4 	bl	8001ed4 <SerialAcceptReceive>
	  	          break;
 800150c:	e070      	b.n	80015f0 <main+0x630>
	  	        case GRMS:
	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	e05e      	b.n	80015d2 <main+0x612>
	  	          {
	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 8001514:	4a39      	ldr	r2, [pc, #228]	; (80015fc <main+0x63c>)
 8001516:	4943      	ldr	r1, [pc, #268]	; (8001624 <main+0x664>)
 8001518:	4843      	ldr	r0, [pc, #268]	; (8001628 <main+0x668>)
 800151a:	f004 fc59 	bl	8005dd0 <siprintf>
	  	            memset(g_nTxOption, '\0', 3);
 800151e:	2203      	movs	r2, #3
 8001520:	2100      	movs	r1, #0
 8001522:	4842      	ldr	r0, [pc, #264]	; (800162c <main+0x66c>)
 8001524:	f004 fb5c 	bl	8005be0 <memset>
	  	            g_nTxData[6] = (tPIDControl.nActPosSample[index]&0xFF00) >>8;
 8001528:	4a35      	ldr	r2, [pc, #212]	; (8001600 <main+0x640>)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	33d0      	adds	r3, #208	; 0xd0
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	889b      	ldrh	r3, [r3, #4]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	b29b      	uxth	r3, r3
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <main+0x670>)
 800153c:	719a      	strb	r2, [r3, #6]
	  	            g_nTxData[7] = (tPIDControl.nActPosSample[index]&0xFF);
 800153e:	4a30      	ldr	r2, [pc, #192]	; (8001600 <main+0x640>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	33d0      	adds	r3, #208	; 0xd0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	889b      	ldrh	r3, [r3, #4]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b38      	ldr	r3, [pc, #224]	; (8001630 <main+0x670>)
 800154e:	71da      	strb	r2, [r3, #7]
	  	            g_nTxData[4] = ((uint16_t)g_dPIDError&0xFF00)>>8;
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <main+0x674>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155a:	ee17 3a90 	vmov	r3, s15
 800155e:	b29b      	uxth	r3, r3
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <main+0x670>)
 8001568:	711a      	strb	r2, [r3, #4]
	  	            g_nTxData[5] = ((uint16_t)g_dPIDError&0xFF)>>8;
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <main+0x670>)
 800156c:	2200      	movs	r2, #0
 800156e:	715a      	strb	r2, [r3, #5]
	  	            g_nTxData[2] = (index&0xFF00) >>8;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	121b      	asrs	r3, r3, #8
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <main+0x670>)
 8001578:	709a      	strb	r2, [r3, #2]
	  	            g_nTxData[3] = (index&0xFF);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <main+0x670>)
 8001580:	70da      	strb	r2, [r3, #3]
	  	            g_nTxData[0] = ((g_nIndex -2)&0xFF00)>>8;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <main+0x65c>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	3b02      	subs	r3, #2
 8001588:	121b      	asrs	r3, r3, #8
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <main+0x670>)
 800158e:	701a      	strb	r2, [r3, #0]
	  	            g_nTxData[1] = ((g_nIndex -2)&0xFF);
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <main+0x65c>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3b02      	subs	r3, #2
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b25      	ldr	r3, [pc, #148]	; (8001630 <main+0x670>)
 800159c:	705a      	strb	r2, [r3, #1]

	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 800159e:	4a24      	ldr	r2, [pc, #144]	; (8001630 <main+0x670>)
 80015a0:	4922      	ldr	r1, [pc, #136]	; (800162c <main+0x66c>)
 80015a2:	4821      	ldr	r0, [pc, #132]	; (8001628 <main+0x668>)
 80015a4:	f000 fca4 	bl	8001ef0 <SerialWriteComm>
	  	            memset(g_strTxCommand, '\0', 4);
 80015a8:	2204      	movs	r2, #4
 80015aa:	2100      	movs	r1, #0
 80015ac:	481e      	ldr	r0, [pc, #120]	; (8001628 <main+0x668>)
 80015ae:	f004 fb17 	bl	8005be0 <memset>
	  	            memset(g_nTxOption, '\0', 3);
 80015b2:	2203      	movs	r2, #3
 80015b4:	2100      	movs	r1, #0
 80015b6:	481d      	ldr	r0, [pc, #116]	; (800162c <main+0x66c>)
 80015b8:	f004 fb12 	bl	8005be0 <memset>
	  	            memset(g_nTxData, '\0', 8);
 80015bc:	2208      	movs	r2, #8
 80015be:	2100      	movs	r1, #0
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <main+0x670>)
 80015c2:	f004 fb0d 	bl	8005be0 <memset>

	  	            HAL_Delay(30);
 80015c6:	201e      	movs	r0, #30
 80015c8:	f001 f8ce 	bl	8002768 <HAL_Delay>
	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <main+0x65c>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	db9a      	blt.n	8001514 <main+0x554>
	  	          }
	  	          g_bDataAvailable = false;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <main+0x660>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
	  	          SerialAcceptReceive();
 80015e4:	f000 fc76 	bl	8001ed4 <SerialAcceptReceive>
	  	          tProcess = NONE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <main+0x654>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
	  	          break;
 80015ee:	bf00      	nop
	  if(g_bDataAvailable == true)
 80015f0:	e4ff      	b.n	8000ff2 <main+0x32>
 80015f2:	bf00      	nop
 80015f4:	20000a88 	.word	0x20000a88
 80015f8:	20000a84 	.word	0x20000a84
 80015fc:	20000a80 	.word	0x20000a80
 8001600:	200000ac 	.word	0x200000ac
 8001604:	20000a5c 	.word	0x20000a5c
 8001608:	20000a60 	.word	0x20000a60
 800160c:	43800000 	.word	0x43800000
 8001610:	20000a20 	.word	0x20000a20
 8001614:	200000a8 	.word	0x200000a8
 8001618:	20000b28 	.word	0x20000b28
 800161c:	20000a64 	.word	0x20000a64
 8001620:	20000a90 	.word	0x20000a90
 8001624:	08007330 	.word	0x08007330
 8001628:	20000098 	.word	0x20000098
 800162c:	2000009c 	.word	0x2000009c
 8001630:	200000a0 	.word	0x200000a0
 8001634:	20000a68 	.word	0x20000a68

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b094      	sub	sp, #80	; 0x50
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f004 faca 	bl	8005be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <SystemClock_Config+0xc8>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	4a26      	ldr	r2, [pc, #152]	; (8001700 <SystemClock_Config+0xc8>)
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166a:	6413      	str	r3, [r2, #64]	; 0x40
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <SystemClock_Config+0xc8>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <SystemClock_Config+0xcc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a20      	ldr	r2, [pc, #128]	; (8001704 <SystemClock_Config+0xcc>)
 8001682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <SystemClock_Config+0xcc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016ac:	2348      	movs	r3, #72	; 0x48
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fbd1 	bl	8002e64 <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016c8:	f000 f85e 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d0:	2302      	movs	r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2102      	movs	r1, #2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fe33 	bl	8003354 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016f4:	f000 f848 	bl	8001788 <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3750      	adds	r7, #80	; 0x50
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d128      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0x66>
  {
    switch(tProcess)
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	2b08      	cmp	r3, #8
 8001724:	d826      	bhi.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001726:	a201      	add	r2, pc, #4	; (adr r2, 800172c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	08001773 	.word	0x08001773
 8001730:	08001773 	.word	0x08001773
 8001734:	08001751 	.word	0x08001751
 8001738:	08001773 	.word	0x08001773
 800173c:	08001773 	.word	0x08001773
 8001740:	08001773 	.word	0x08001773
 8001744:	08001769 	.word	0x08001769
 8001748:	08001773 	.word	0x08001773
 800174c:	08001773 	.word	0x08001773
      case SPID:
        break;
      case CTUN_RES:
        break;
      case CTUN:
        if(g_nIndex <= 200)
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2bc8      	cmp	r3, #200	; 0xc8
 8001756:	d803      	bhi.n	8001760 <HAL_TIM_PeriodElapsedCallback+0x58>
        {
          MotorTuning(25);
 8001758:	2019      	movs	r0, #25
 800175a:	f000 fa3d 	bl	8001bd8 <MotorTuning>
        }
        else
        {
          tProcess = NONE;
        }
        break;
 800175e:	e009      	b.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x6c>
          tProcess = NONE;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
        break;
 8001766:	e005      	b.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case CSET:
        break;
	  case CRUN_RES:
		break;
      case CRUN:
        MotorMovePos();
 8001768:	f000 f8d2 	bl	8001910 <MotorMovePos>
        break;
 800176c:	e002      	b.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case GRMS:
		break;
    }
  }
 800176e:	bf00      	nop
 8001770:	e000      	b.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x6c>
        break;
 8001772:	bf00      	nop
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000a98 	.word	0x20000a98
 8001780:	200000a8 	.word	0x200000a8
 8001784:	20000a64 	.word	0x20000a64

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <MotorSetDir>:
uint32_t g_nCmdPulse;
uint16_t g_nIndex =0 ;

//set motor's direction
void MotorSetDir(int8_t nDir)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
    switch(nDir)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <MotorSetDir+0x18>
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d007      	beq.n	80017ba <MotorSetDir+0x26>
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
            break;
        default:
            break;
 80017aa:	e00d      	b.n	80017c8 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <MotorSetDir+0x3c>)
 80017b4:	f001 fb3c 	bl	8002e30 <HAL_GPIO_WritePin>
            break;
 80017b8:	e006      	b.n	80017c8 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <MotorSetDir+0x3c>)
 80017c2:	f001 fb35 	bl	8002e30 <HAL_GPIO_WritePin>
            break;
 80017c6:	bf00      	nop
    }
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40020400 	.word	0x40020400

080017d4 <MotorSetDuty>:

//duty cycle of motor
void MotorSetDuty(uint16_t nDuty)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <MotorSetDuty+0x20>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000ae0 	.word	0x20000ae0

080017f8 <MotorInit>:

//init params for timer interrupt...
void MotorInit(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim2);
 80017fc:	4811      	ldr	r0, [pc, #68]	; (8001844 <MotorInit+0x4c>)
 80017fe:	f002 f819 	bl	8003834 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001802:	2100      	movs	r1, #0
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <MotorInit+0x50>)
 8001806:	f002 f8d5 	bl	80039b4 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800180a:	2100      	movs	r1, #0
 800180c:	480f      	ldr	r0, [pc, #60]	; (800184c <MotorInit+0x54>)
 800180e:	f002 fa3f 	bl	8003c90 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001812:	2104      	movs	r1, #4
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <MotorInit+0x54>)
 8001816:	f002 fa3b 	bl	8003c90 <HAL_TIM_Encoder_Start>

    PIDReset(&tPIDControl);
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <MotorInit+0x58>)
 800181c:	f000 fa54 	bl	8001cc8 <PIDReset>
    PIDInit(&tPIDControl, 1., 0., 0.00);
 8001820:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001854 <MotorInit+0x5c>
 8001824:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001854 <MotorInit+0x5c>
 8001828:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <MotorInit+0x58>)
 800182e:	f000 fa63 	bl	8001cf8 <PIDInit>
    MotorSetDir(0);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff ffae 	bl	8001794 <MotorSetDir>
    MotorSetDuty(0);
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ffcb 	bl	80017d4 <MotorSetDuty>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000a98 	.word	0x20000a98
 8001848:	20000ae0 	.word	0x20000ae0
 800184c:	20000b28 	.word	0x20000b28
 8001850:	200000ac 	.word	0x200000ac
 8001854:	00000000 	.word	0x00000000

08001858 <ConvertDegToPulse>:

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * 4 * 11 * 30 / 360;
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <ConvertDegToPulse+0x48>)
 800186e:	fb82 1203 	smull	r1, r2, r2, r3
 8001872:	441a      	add	r2, r3
 8001874:	1212      	asrs	r2, r2, #8
 8001876:	17db      	asrs	r3, r3, #31
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	edc7 7a03 	vstr	s15, [r7, #12]

    return (uint16_t) dPulse;
 8001886:	edd7 7a03 	vldr	s15, [r7, #12]
 800188a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188e:	ee17 3a90 	vmov	r3, s15
 8001892:	b29b      	uxth	r3, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	b60b60b7 	.word	0xb60b60b7

080018a4 <ConvertPulseToDeg>:

uint16_t ConvertPulseToDeg(uint16_t nPulse)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
    float dDeg = nPulse * 360 / 4 / 11 / 30;
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	225a      	movs	r2, #90	; 0x5a
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <ConvertPulseToDeg+0x44>)
 80018b8:	fb82 1203 	smull	r1, r2, r2, r3
 80018bc:	11d2      	asrs	r2, r2, #7
 80018be:	17db      	asrs	r3, r3, #31
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	edc7 7a03 	vstr	s15, [r7, #12]
    return (uint16_t) dDeg;
 80018ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d6:	ee17 3a90 	vmov	r3, s15
 80018da:	b29b      	uxth	r3, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	634c0635 	.word	0x634c0635

080018ec <MotorGetPulse>:

void MotorGetPulse(uint32_t *nPulse)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    *nPulse = __HAL_TIM_GetCounter(&htim4);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <MotorGetPulse+0x20>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000b28 	.word	0x20000b28

08001910 <MotorMovePos>:

void MotorMovePos(void)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001916:	463b      	mov	r3, r7
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffe7 	bl	80018ec <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001924:	4aa2      	ldr	r2, [pc, #648]	; (8001bb0 <MotorMovePos+0x2a0>)
 8001926:	6013      	str	r3, [r2, #0]
    float dPosTemp = 0;
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	607b      	str	r3, [r7, #4]

    //Profile trapezoidal Speed
    if(tProfile.nTime <= tProfile.dMidStep1)
 800192e:	4ba1      	ldr	r3, [pc, #644]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001930:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001934:	4b9f      	ldr	r3, [pc, #636]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001936:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800193a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	d820      	bhi.n	8001986 <MotorMovePos+0x76>
    {
        dPosTemp = (int32_t)(tProfile.dA1 * tProfile.nTime * tProfile.nTime);
 8001944:	4b9b      	ldr	r3, [pc, #620]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001946:	ed93 7a03 	vldr	s14, [r3, #12]
 800194a:	4b9a      	ldr	r3, [pc, #616]	; (8001bb4 <MotorMovePos+0x2a4>)
 800194c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001954:	4b97      	ldr	r3, [pc, #604]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001956:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800195a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001966:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = 2 * tProfile.dA1 * tProfile.nTime;
 800196a:	4b92      	ldr	r3, [pc, #584]	; (8001bb4 <MotorMovePos+0x2a4>)
 800196c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001970:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001974:	4b8f      	ldr	r3, [pc, #572]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001976:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <MotorMovePos+0x2a8>)
 8001980:	edc3 7a00 	vstr	s15, [r3]
 8001984:	e065      	b.n	8001a52 <MotorMovePos+0x142>
    }
    else if(tProfile.nTime <= tProfile.dMidStep2)
 8001986:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001988:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800198c:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <MotorMovePos+0x2a4>)
 800198e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	d817      	bhi.n	80019cc <MotorMovePos+0xbc>
    {
        dPosTemp = (int32_t)(tProfile.dA2 * tProfile.nTime + tProfile.dB2);
 800199c:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <MotorMovePos+0x2a4>)
 800199e:	ed93 7a04 	vldr	s14, [r3, #16]
 80019a2:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ac:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019be:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = tProfile.dA2;
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	4a7c      	ldr	r2, [pc, #496]	; (8001bb8 <MotorMovePos+0x2a8>)
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e042      	b.n	8001a52 <MotorMovePos+0x142>
    }
    else if(tProfile.nTime <= tProfile.dMidStep3)
 80019cc:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019ce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019d2:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d834      	bhi.n	8001a4c <MotorMovePos+0x13c>
    {
        dPosTemp = (int32_t)(tProfile.dA3 * tProfile.nTime * tProfile.nTime + tProfile.dB3 * tProfile.nTime + tProfile.dC3);
 80019e2:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f2:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fc:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <MotorMovePos+0x2a4>)
 80019fe:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001a04:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001a12:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a22:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = 2*tProfile.dA3 * tProfile.nTime + tProfile.dB3;
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001a28:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a2c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a30:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001a32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001a3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <MotorMovePos+0x2a8>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
 8001a4a:	e002      	b.n	8001a52 <MotorMovePos+0x142>
    }
    else
    {
        dPosTemp = tProfile.dPosMax;
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	607b      	str	r3, [r7, #4]
    }

    //Control PID
    g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 8001a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5a:	ee17 3a90 	vmov	r3, s15
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fef9 	bl	8001858 <ConvertDegToPulse>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <MotorMovePos+0x2ac>)
 8001a6c:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001a6e:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <MotorMovePos+0x2ac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7a:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <MotorMovePos+0x2a0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	ee07 3a10 	vmov	s14, r3
 8001a82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001a86:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8001bc0 <MotorMovePos+0x2b0>
 8001a8a:	eef0 0a47 	vmov.f32	s1, s14
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	484c      	ldr	r0, [pc, #304]	; (8001bc4 <MotorMovePos+0x2b4>)
 8001a94:	f000 f952 	bl	8001d3c <PIDCompute>
 8001a98:	eef0 7a40 	vmov.f32	s15, s0
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <MotorMovePos+0x2b8>)
 8001aaa:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <MotorMovePos+0x2b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0c      	blt.n	8001ace <MotorMovePos+0x1be>
    {
        MotorSetDir(1);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff fe6d 	bl	8001794 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <MotorMovePos+0x2b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bfb8      	it	lt
 8001ac2:	425b      	neglt	r3, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fe84 	bl	80017d4 <MotorSetDuty>
 8001acc:	e00f      	b.n	8001aee <MotorMovePos+0x1de>
    }
    else if(g_nDutyCycle < 0)
 8001ace:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <MotorMovePos+0x2b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da0b      	bge.n	8001aee <MotorMovePos+0x1de>
    {
        MotorSetDir(0);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fe5c 	bl	8001794 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <MotorMovePos+0x2b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bfb8      	it	lt
 8001ae4:	425b      	neglt	r3, r3
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe73 	bl	80017d4 <MotorSetDuty>
    }

    if (tProfile.nTime > tProfile.dMidStep3)
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001af0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001af6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	dd1f      	ble.n	8001b44 <MotorMovePos+0x234>
    {
        __HAL_TIM_SetCounter(&htim4, 32768);
 8001b04:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <MotorMovePos+0x2bc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
        dPosTemp = 0;
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	607b      	str	r3, [r7, #4]
        g_nDutyCycle = 0;
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <MotorMovePos+0x2b8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
        g_dCmdVel = 0;
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <MotorMovePos+0x2a8>)
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
        tProfile.nTime = 0;
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
        tProcess = NONE;
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <MotorMovePos+0x2c0>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
        MotorSetDuty(abs(g_nDutyCycle));
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <MotorMovePos+0x2b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bfb8      	it	lt
 8001b38:	425b      	neglt	r3, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fe49 	bl	80017d4 <MotorSetDuty>
 8001b42:	e017      	b.n	8001b74 <MotorMovePos+0x264>
    }
    else
    {
        tPIDControl.nActPosSample[g_nIndex] = ConvertPulseToDeg(g_nActPulse);
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MotorMovePos+0x2a0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <MotorMovePos+0x2c4>)
 8001b4c:	8812      	ldrh	r2, [r2, #0]
 8001b4e:	4614      	mov	r4, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fea7 	bl	80018a4 <ConvertPulseToDeg>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4a1a      	ldr	r2, [pc, #104]	; (8001bc4 <MotorMovePos+0x2b4>)
 8001b5c:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	460a      	mov	r2, r1
 8001b66:	809a      	strh	r2, [r3, #4]
        g_nIndex ++;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MotorMovePos+0x2c4>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MotorMovePos+0x2c4>)
 8001b72:	801a      	strh	r2, [r3, #0]
    }

    tProfile.nTime += 0.01;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fce5 	bl	8000548 <__aeabi_f2d>
 8001b7e:	a30a      	add	r3, pc, #40	; (adr r3, 8001ba8 <MotorMovePos+0x298>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fb82 	bl	800028c <__adddf3>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe ffe2 	bl	8000b58 <__aeabi_d2f>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <MotorMovePos+0x2a4>)
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	47ae147b 	.word	0x47ae147b
 8001bac:	3f847ae1 	.word	0x3f847ae1
 8001bb0:	20000a5c 	.word	0x20000a5c
 8001bb4:	20000a20 	.word	0x20000a20
 8001bb8:	20000a58 	.word	0x20000a58
 8001bbc:	20000a60 	.word	0x20000a60
 8001bc0:	3c23d70a 	.word	0x3c23d70a
 8001bc4:	200000ac 	.word	0x200000ac
 8001bc8:	20000a54 	.word	0x20000a54
 8001bcc:	20000b28 	.word	0x20000b28
 8001bd0:	200000a8 	.word	0x200000a8
 8001bd4:	20000a64 	.word	0x20000a64

08001bd8 <MotorTuning>:

void MotorTuning(uint16_t nPos)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fe80 	bl	80018ec <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001bf2:	4a2f      	ldr	r2, [pc, #188]	; (8001cb0 <MotorTuning+0xd8>)
 8001bf4:	6013      	str	r3, [r2, #0]

    g_nCmdPulse = ConvertDegToPulse(nPos);
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe2d 	bl	8001858 <ConvertDegToPulse>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <MotorTuning+0xdc>)
 8001c04:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <MotorTuning+0xdc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <MotorTuning+0xd8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	ee07 3a10 	vmov	s14, r3
 8001c1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001c1e:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001cb8 <MotorTuning+0xe0>
 8001c22:	eef0 0a47 	vmov.f32	s1, s14
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	4824      	ldr	r0, [pc, #144]	; (8001cbc <MotorTuning+0xe4>)
 8001c2c:	f000 f886 	bl	8001d3c <PIDCompute>
 8001c30:	eef0 7a40 	vmov.f32	s15, s0
 8001c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c38:	ee17 3a90 	vmov	r3, s15
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MotorTuning+0xe8>)
 8001c42:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MotorTuning+0xe8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0c      	blt.n	8001c66 <MotorTuning+0x8e>
    {
        MotorSetDir(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff fda1 	bl	8001794 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <MotorTuning+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bfb8      	it	lt
 8001c5a:	425b      	neglt	r3, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fdb8 	bl	80017d4 <MotorSetDuty>
 8001c64:	e00f      	b.n	8001c86 <MotorTuning+0xae>
    }
    else if(g_nDutyCycle < 0)
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MotorTuning+0xe8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da0b      	bge.n	8001c86 <MotorTuning+0xae>
    {
        MotorSetDir(0);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff fd90 	bl	8001794 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MotorTuning+0xe8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bfb8      	it	lt
 8001c7c:	425b      	neglt	r3, r3
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fda7 	bl	80017d4 <MotorSetDuty>
    }

    //Store Data

    tPIDControl.nSampleTuningPID[g_nIndex] = g_nActPulse;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <MotorTuning+0xd8>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MotorTuning+0xec>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b291      	uxth	r1, r2
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <MotorTuning+0xe4>)
 8001c92:	3308      	adds	r3, #8
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	460a      	mov	r2, r1
 8001c9a:	809a      	strh	r2, [r3, #4]
    g_nIndex++;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MotorTuning+0xec>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MotorTuning+0xec>)
 8001ca6:	801a      	strh	r2, [r3, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000a5c 	.word	0x20000a5c
 8001cb4:	20000a60 	.word	0x20000a60
 8001cb8:	3c23d70a 	.word	0x3c23d70a
 8001cbc:	200000ac 	.word	0x200000ac
 8001cc0:	20000a54 	.word	0x20000a54
 8001cc4:	20000a64 	.word	0x20000a64

08001cc8 <PIDReset>:

float g_dPIDError = 0;

//reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <PIDReset+0x2c>)
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	20000a68 	.word	0x20000a68

08001cf8 <PIDInit>:

//init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d04:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d08:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7ff ffdb 	bl	8001cc8 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	609a      	str	r2, [r3, #8]
    __HAL_TIM_SetCounter(&htim4, 32768);
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <PIDInit+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000b28 	.word	0x20000b28

08001d3c <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

//Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d48:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d4c:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001d50:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <PIDCompute+0xe0>)
 8001d5e:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl -> dKp *g_dPIDError;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <PIDCompute+0xe0>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	edc7 7a07 	vstr	s15, [r7, #28]
    PID_Ctrl -> dIntergral += g_dPIDError;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <PIDCompute+0xe0>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001da4:	edd7 7a00 	vldr	s15, [r7]
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001db0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	edc7 7a06 	vstr	s15, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) /dTs;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <PIDCompute+0xe0>)
 8001dca:	edd3 6a00 	vldr	s13, [r3]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dd4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dd8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ddc:	ed97 7a00 	vldr	s14, [r7]
 8001de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de4:	edc7 7a05 	vstr	s15, [r7, #20]
    dPIDResult = dP + dI + dD;
 8001de8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfc:	edc7 7a04 	vstr	s15, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <PIDCompute+0xe0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	ee07 3a90 	vmov	s15, r3
}
 8001e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e12:	3724      	adds	r7, #36	; 0x24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20000a68 	.word	0x20000a68

08001e20 <subString>:
uint8_t ACK[] = {0x06U};
uint8_t SYN[] = {0x16U};

//cut the string
uint8_t *subString(uint8_t *pBuff, int nPos, int nIndex)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
    uint8_t *t = &pBuff[nPos];
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
    pBuff[nPos -1] = '\0';
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e007      	b.n	8001e56 <subString+0x36>
    {
        t[i] = '\0';
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	6938      	ldr	r0, [r7, #16]
 8001e58:	f7fe f9ba 	bl	80001d0 <strlen>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d8ef      	bhi.n	8001e46 <subString+0x26>
    }
    return t;
 8001e66:	693b      	ldr	r3, [r7, #16]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <StrCompare>:


//Compare 2 string
bool StrCompare(uint8_t *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e00e      	b.n	8001ea2 <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	440b      	add	r3, r1
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <StrCompare+0x2c>
        {
            return false;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e007      	b.n	8001eac <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dbec      	blt.n	8001e84 <StrCompare+0x14>
        }
    }
    return true;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <SerialInit>:


//receive data
void SerialInit(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_nRxBuff, MAX_LEN);
 8001ebc:	2212      	movs	r2, #18
 8001ebe:	4903      	ldr	r1, [pc, #12]	; (8001ecc <SerialInit+0x14>)
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <SerialInit+0x18>)
 8001ec2:	f002 feac 	bl	8004c1e <HAL_UART_Receive_IT>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000a6c 	.word	0x20000a6c
 8001ed0:	20000b70 	.word	0x20000b70

08001ed4 <SerialAcceptReceive>:

//receive data
void SerialAcceptReceive(void)
{	HAL_UART_Receive_IT(&huart1, (uint8_t*)g_nRxBuff, MAX_LEN);
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	2212      	movs	r2, #18
 8001eda:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <SerialAcceptReceive+0x14>)
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <SerialAcceptReceive+0x18>)
 8001ede:	f002 fe9e 	bl	8004c1e <HAL_UART_Receive_IT>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000a6c 	.word	0x20000a6c
 8001eec:	20000b70 	.word	0x20000b70

08001ef0 <SerialWriteComm>:

//send data to GUI
void SerialWriteComm(uint8_t *pStrCmd, uint8_t *pOpt, uint8_t *pData)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
    uint8_t *pBuff;
    pBuff = (uint8_t *)malloc(18);
 8001efc:	2012      	movs	r0, #18
 8001efe:	f003 fe51 	bl	8005ba4 <malloc>
 8001f02:	4603      	mov	r3, r0
 8001f04:	617b      	str	r3, [r7, #20]
    uint8_t nIndex = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	74fb      	strb	r3, [r7, #19]

    memcpy(pBuff + nIndex, STX, 1);
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <SerialWriteComm+0xa4>)
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8001f16:	7cfb      	ldrb	r3, [r7, #19]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pStrCmd, 4);
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4413      	add	r3, r2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	601a      	str	r2, [r3, #0]
    nIndex += 4;
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pOpt, 3);
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4413      	add	r3, r2
 8001f34:	2203      	movs	r2, #3
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 fe43 	bl	8005bc4 <memcpy>
    nIndex += 3;
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]
 8001f40:	3303      	adds	r3, #3
 8001f42:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pData, 8);
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4413      	add	r3, r2
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fe38 	bl	8005bc4 <memcpy>
    nIndex += 8;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	3308      	adds	r3, #8
 8001f58:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ACK, 1);
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <SerialWriteComm+0xa8>)
 8001f62:	7812      	ldrb	r2, [r2, #0]
 8001f64:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ETX, 1);
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SerialWriteComm+0xac>)
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, pBuff, MAX_LEN, 1000);
 8001f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7c:	2212      	movs	r2, #18
 8001f7e:	6979      	ldr	r1, [r7, #20]
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <SerialWriteComm+0xb0>)
 8001f82:	f002 fdba 	bl	8004afa <HAL_UART_Transmit>

    free(pBuff);
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f003 fe14 	bl	8005bb4 <free>

}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	20000b70 	.word	0x20000b70

08001fa4 <SerialParse>:

//parse data to Command, Option, Data
void SerialParse(uint8_t *pBuff)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    if((pBuff[0] == STX[0] && (pBuff[17] == ETX[0])))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <SerialParse+0x68>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d125      	bne.n	8002004 <SerialParse+0x60>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3311      	adds	r3, #17
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <SerialParse+0x6c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d11e      	bne.n	8002004 <SerialParse+0x60>
  {
    memcpy(g_strCommand, subString(g_nRxBuff, 1,4), 4);
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4812      	ldr	r0, [pc, #72]	; (8002014 <SerialParse+0x70>)
 8001fcc:	f7ff ff28 	bl	8001e20 <subString>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <SerialParse+0x74>)
 8001fd8:	601a      	str	r2, [r3, #0]
    memcpy(g_nOption, subString(g_nRxBuff, 5,3), 3);
 8001fda:	2203      	movs	r2, #3
 8001fdc:	2105      	movs	r1, #5
 8001fde:	480d      	ldr	r0, [pc, #52]	; (8002014 <SerialParse+0x70>)
 8001fe0:	f7ff ff1e 	bl	8001e20 <subString>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <SerialParse+0x78>)
 8001fe8:	8811      	ldrh	r1, [r2, #0]
 8001fea:	7892      	ldrb	r2, [r2, #2]
 8001fec:	8019      	strh	r1, [r3, #0]
 8001fee:	709a      	strb	r2, [r3, #2]
    memcpy(g_nData, subString(g_nRxBuff, 8,8), 8);
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <SerialParse+0x70>)
 8001ff6:	f7ff ff13 	bl	8001e20 <subString>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <SerialParse+0x7c>)
 8001ffe:	6810      	ldr	r0, [r2, #0]
 8002000:	6851      	ldr	r1, [r2, #4]
 8002002:	c303      	stmia	r3!, {r0, r1}
  }
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004
 8002014:	20000a6c 	.word	0x20000a6c
 8002018:	20000a80 	.word	0x20000a80
 800201c:	20000a84 	.word	0x20000a84
 8002020:	20000a88 	.word	0x20000a88

08002024 <HAL_UART_RxCpltCallback>:

//interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    if(huart ->Instance == huart1.Instance)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_UART_RxCpltCallback+0x28>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d105      	bne.n	8002044 <HAL_UART_RxCpltCallback+0x20>
  {
    g_bDataAvailable = true;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_UART_RxCpltCallback+0x2c>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
    SerialParse(g_nRxBuff);
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_UART_RxCpltCallback+0x30>)
 8002040:	f7ff ffb0 	bl	8001fa4 <SerialParse>
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000b70 	.word	0x20000b70
 8002050:	20000a90 	.word	0x20000a90
 8002054:	20000a6c 	.word	0x20000a6c

08002058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_MspInit+0x4c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <HAL_MspInit+0x4c>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_MspInit+0x4c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_MspInit+0x4c>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <NMI_Handler+0x4>

080020ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <MemManage_Handler+0x4>

080020ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f4:	f000 fb18 	bl	8002728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM2_IRQHandler+0x10>)
 8002102:	f001 fe53 	bl	8003dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000a98 	.word	0x20000a98

08002110 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <USART1_IRQHandler+0x10>)
 8002116:	f002 fdb3 	bl	8004c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000b70 	.word	0x20000b70

08002124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <_sbrk+0x5c>)
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <_sbrk+0x60>)
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <_sbrk+0x64>)
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <_sbrk+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002154:	f003 fcfc 	bl	8005b50 <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	220c      	movs	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002162:	e009      	b.n	8002178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <_sbrk+0x64>)
 8002174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20020000 	.word	0x20020000
 8002184:	00000400 	.word	0x00000400
 8002188:	20000a94 	.word	0x20000a94
 800218c:	20000bc8 	.word	0x20000bc8

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <SystemInit+0x20>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <SystemInit+0x20>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <MX_TIM2_Init+0x94>)
 80021d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_TIM2_Init+0x94>)
 80021da:	2263      	movs	r2, #99	; 0x63
 80021dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <MX_TIM2_Init+0x94>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <MX_TIM2_Init+0x94>)
 80021e6:	f640 620f 	movw	r2, #3599	; 0xe0f
 80021ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <MX_TIM2_Init+0x94>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <MX_TIM2_Init+0x94>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021f8:	4813      	ldr	r0, [pc, #76]	; (8002248 <MX_TIM2_Init+0x94>)
 80021fa:	f001 facb 	bl	8003794 <HAL_TIM_Base_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002204:	f7ff fac0 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <MX_TIM2_Init+0x94>)
 8002216:	f001 ff93 	bl	8004140 <HAL_TIM_ConfigClockSource>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002220:	f7ff fab2 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222c:	463b      	mov	r3, r7
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_TIM2_Init+0x94>)
 8002232:	f002 fb85 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800223c:	f7ff faa4 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000a98 	.word	0x20000a98

0800224c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]
 800226a:	615a      	str	r2, [r3, #20]
 800226c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <MX_TIM3_Init+0xac>)
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <MX_TIM3_Init+0xb0>)
 8002272:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <MX_TIM3_Init+0xac>)
 8002276:	2209      	movs	r2, #9
 8002278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <MX_TIM3_Init+0xac>)
 800227c:	2260      	movs	r2, #96	; 0x60
 800227e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <MX_TIM3_Init+0xac>)
 8002282:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_TIM3_Init+0xac>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_TIM3_Init+0xac>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002294:	4818      	ldr	r0, [pc, #96]	; (80022f8 <MX_TIM3_Init+0xac>)
 8002296:	f001 fb3d 	bl	8003914 <HAL_TIM_PWM_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022a0:	f7ff fa72 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ac:	f107 0320 	add.w	r3, r7, #32
 80022b0:	4619      	mov	r1, r3
 80022b2:	4811      	ldr	r0, [pc, #68]	; (80022f8 <MX_TIM3_Init+0xac>)
 80022b4:	f002 fb44 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022be:	f7ff fa63 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c2:	2360      	movs	r3, #96	; 0x60
 80022c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2200      	movs	r2, #0
 80022d6:	4619      	mov	r1, r3
 80022d8:	4807      	ldr	r0, [pc, #28]	; (80022f8 <MX_TIM3_Init+0xac>)
 80022da:	f001 fe6f 	bl	8003fbc <HAL_TIM_PWM_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80022e4:	f7ff fa50 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <MX_TIM3_Init+0xac>)
 80022ea:	f000 f8ed 	bl	80024c8 <HAL_TIM_MspPostInit>

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000ae0 	.word	0x20000ae0
 80022fc:	40000400 	.word	0x40000400

08002300 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fc66 	bl	8005be0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800231c:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800231e:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <MX_TIM4_Init+0xa4>)
 8002320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <MX_TIM4_Init+0xa0>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <MX_TIM4_Init+0xa0>)
 8002330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002334:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <MX_TIM4_Init+0xa0>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002342:	2303      	movs	r3, #3
 8002344:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800234a:	2301      	movs	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800235a:	2301      	movs	r3, #1
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	4619      	mov	r1, r3
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800236e:	f001 fbe9 	bl	8003b44 <HAL_TIM_Encoder_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002378:	f7ff fa06 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_TIM4_Init+0xa0>)
 800238a:	f002 fad9 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002394:	f7ff f9f8 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	3730      	adds	r7, #48	; 0x30
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000b28 	.word	0x20000b28
 80023a4:	40000800 	.word	0x40000800

080023a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d115      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_TIM_Base_MspInit+0x48>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_TIM_Base_MspInit+0x48>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_TIM_Base_MspInit+0x48>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2101      	movs	r1, #1
 80023da:	201c      	movs	r0, #28
 80023dc:	f000 fac3 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023e0:	201c      	movs	r0, #28
 80023e2:	f000 fadc 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800

080023f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_TIM_PWM_MspInit+0x3c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10d      	bne.n	8002422 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_TIM_PWM_MspInit+0x40>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_TIM_PWM_MspInit+0x40>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_TIM_PWM_MspInit+0x40>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40000400 	.word	0x40000400
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_TIM_Encoder_MspInit+0x84>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d12c      	bne.n	80024b4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002492:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024a4:	2302      	movs	r3, #2
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80024b0:	f000 fb22 	bl	8002af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024b4:	bf00      	nop
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_TIM_MspPostInit+0x68>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d11d      	bne.n	8002526 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_TIM_MspPostInit+0x6c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_TIM_MspPostInit+0x6c>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_TIM_MspPostInit+0x6c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002506:	2340      	movs	r3, #64	; 0x40
 8002508:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002516:	2302      	movs	r3, #2
 8002518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <HAL_TIM_MspPostInit+0x70>)
 8002522:	f000 fae9 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40000400 	.word	0x40000400
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000

0800253c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <MX_USART1_UART_Init+0x50>)
 8002544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800254c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002562:	220c      	movs	r2, #12
 8002564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002574:	f002 fa74 	bl	8004a60 <HAL_UART_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800257e:	f7ff f903 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000b70 	.word	0x20000b70
 800258c:	40011000 	.word	0x40011000

08002590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_UART_MspInit+0x94>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d133      	bne.n	800261a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025bc:	f043 0310 	orr.w	r3, r3, #16
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a14      	ldr	r2, [pc, #80]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_UART_MspInit+0x98>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ea:	23c0      	movs	r3, #192	; 0xc0
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025fa:	2307      	movs	r3, #7
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <HAL_UART_MspInit+0x9c>)
 8002606:	f000 fa77 	bl	8002af8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2025      	movs	r0, #37	; 0x25
 8002610:	f000 f9a9 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002614:	2025      	movs	r0, #37	; 0x25
 8002616:	f000 f9c2 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800261a:	bf00      	nop
 800261c:	3728      	adds	r7, #40	; 0x28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40011000 	.word	0x40011000
 8002628:	40023800 	.word	0x40023800
 800262c:	40020400 	.word	0x40020400

08002630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002634:	480d      	ldr	r0, [pc, #52]	; (800266c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002636:	490e      	ldr	r1, [pc, #56]	; (8002670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002638:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800263c:	e002      	b.n	8002644 <LoopCopyDataInit>

0800263e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002642:	3304      	adds	r3, #4

08002644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002648:	d3f9      	bcc.n	800263e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264a:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800264c:	4c0b      	ldr	r4, [pc, #44]	; (800267c <LoopFillZerobss+0x26>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002650:	e001      	b.n	8002656 <LoopFillZerobss>

08002652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002654:	3204      	adds	r2, #4

08002656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002658:	d3fb      	bcc.n	8002652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800265a:	f7ff fd99 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265e:	f003 fa7d 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002662:	f7fe fcad 	bl	8000fc0 <main>
  bx  lr    
 8002666:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002670:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002674:	080073c0 	.word	0x080073c0
  ldr r2, =_sbss
 8002678:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800267c:	20000bc8 	.word	0x20000bc8

08002680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC_IRQHandler>
	...

08002684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_Init+0x40>)
 800268e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_Init+0x40>)
 800269a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_Init+0x40>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 f94f 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b2:	200f      	movs	r0, #15
 80026b4:	f000 f808 	bl	80026c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b8:	f7ff fcce 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x54>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026de:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f967 	bl	80029ba <HAL_SYSTICK_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00e      	b.n	8002714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d80a      	bhi.n	8002712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002704:	f000 f92f 	bl	8002966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_InitTick+0x5c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000000c 	.word	0x2000000c
 8002720:	20000014 	.word	0x20000014
 8002724:	20000010 	.word	0x20000010

08002728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x20>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x24>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_IncTick+0x24>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000014 	.word	0x20000014
 800274c:	20000bb4 	.word	0x20000bb4

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_GetTick+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000bb4 	.word	0x20000bb4

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff ffee 	bl	8002750 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_Delay+0x44>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffde 	bl	8002750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000014 	.word	0x20000014

080027b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002930:	f7ff ff8e 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff29 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002978:	f7ff ff3e 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 800297c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff ff8e 	bl	80028a4 <NVIC_EncodePriority>
 8002988:	4602      	mov	r2, r0
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff5d 	bl	8002850 <__NVIC_SetPriority>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff31 	bl	8002814 <__NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffa2 	bl	800290c <SysTick_Config>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff feb6 	bl	8002750 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d008      	beq.n	8002a04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e052      	b.n	8002aaa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0216 	bic.w	r2, r2, #22
 8002a12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <HAL_DMA_Abort+0x62>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0208 	bic.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	e013      	b.n	8002a7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a56:	f7ff fe7b 	bl	8002750 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d90c      	bls.n	8002a7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e015      	b.n	8002aaa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e4      	bne.n	8002a56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	223f      	movs	r2, #63	; 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00c      	b.n	8002aea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e16b      	b.n	8002dec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 815a 	bne.w	8002de6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d005      	beq.n	8002b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d130      	bne.n	8002bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d017      	beq.n	8002be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d123      	bne.n	8002c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	08da      	lsrs	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3208      	adds	r2, #8
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80b4 	beq.w	8002de6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b60      	ldr	r3, [pc, #384]	; (8002e04 <HAL_GPIO_Init+0x30c>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	4a5f      	ldr	r2, [pc, #380]	; (8002e04 <HAL_GPIO_Init+0x30c>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_GPIO_Init+0x30c>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9a:	4a5b      	ldr	r2, [pc, #364]	; (8002e08 <HAL_GPIO_Init+0x310>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_GPIO_Init+0x314>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d02b      	beq.n	8002d1e <HAL_GPIO_Init+0x226>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_GPIO_Init+0x318>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d025      	beq.n	8002d1a <HAL_GPIO_Init+0x222>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <HAL_GPIO_Init+0x31c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01f      	beq.n	8002d16 <HAL_GPIO_Init+0x21e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4f      	ldr	r2, [pc, #316]	; (8002e18 <HAL_GPIO_Init+0x320>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d019      	beq.n	8002d12 <HAL_GPIO_Init+0x21a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4e      	ldr	r2, [pc, #312]	; (8002e1c <HAL_GPIO_Init+0x324>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_GPIO_Init+0x216>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <HAL_GPIO_Init+0x328>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00d      	beq.n	8002d0a <HAL_GPIO_Init+0x212>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <HAL_GPIO_Init+0x32c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <HAL_GPIO_Init+0x20e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <HAL_GPIO_Init+0x330>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_GPIO_Init+0x20a>
 8002cfe:	2307      	movs	r3, #7
 8002d00:	e00e      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d02:	2308      	movs	r3, #8
 8002d04:	e00c      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d06:	2306      	movs	r3, #6
 8002d08:	e00a      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d0a:	2305      	movs	r3, #5
 8002d0c:	e008      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d12:	2303      	movs	r3, #3
 8002d14:	e004      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e002      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_GPIO_Init+0x228>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	f002 0203 	and.w	r2, r2, #3
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	4093      	lsls	r3, r2
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d30:	4935      	ldr	r1, [pc, #212]	; (8002e08 <HAL_GPIO_Init+0x310>)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d62:	4a32      	ldr	r2, [pc, #200]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d8c:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d92:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	f67f ae90 	bls.w	8002b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40021400 	.word	0x40021400
 8002e24:	40021800 	.word	0x40021800
 8002e28:	40021c00 	.word	0x40021c00
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e267      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d075      	beq.n	8002f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8e:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d112      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	4b7e      	ldr	r3, [pc, #504]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05b      	beq.n	8002f6c <HAL_RCC_OscConfig+0x108>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d157      	bne.n	8002f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e242      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d106      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x74>
 8002eca:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a75      	ldr	r2, [pc, #468]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e01d      	b.n	8002f14 <HAL_RCC_OscConfig+0xb0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x98>
 8002ee2:	4b70      	ldr	r3, [pc, #448]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6f      	ldr	r2, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6c      	ldr	r2, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0xb0>
 8002efc:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a68      	ldr	r2, [pc, #416]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a65      	ldr	r2, [pc, #404]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fc18 	bl	8002750 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7ff fc14 	bl	8002750 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e207      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0xc0>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff fc04 	bl	8002750 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7ff fc00 	bl	8002750 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1f3      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5e:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0xe8>
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d11c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	4b41      	ldr	r3, [pc, #260]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x152>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e1c7      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4937      	ldr	r1, [pc, #220]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	e03a      	b.n	8003042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd4:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_OscConfig+0x244>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7ff fbb9 	bl	8002750 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7ff fbb5 	bl	8002750 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e1a8      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff4:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4925      	ldr	r1, [pc, #148]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
 8003014:	e015      	b.n	8003042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_OscConfig+0x244>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7ff fb98 	bl	8002750 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003024:	f7ff fb94 	bl	8002750 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e187      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d036      	beq.n	80030bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_RCC_OscConfig+0x248>)
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7ff fb78 	bl	8002750 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003064:	f7ff fb74 	bl	8002750 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e167      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_OscConfig+0x240>)
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x200>
 8003082:	e01b      	b.n	80030bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_OscConfig+0x248>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7ff fb61 	bl	8002750 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	e00e      	b.n	80030b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003092:	f7ff fb5d 	bl	8002750 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d907      	bls.n	80030b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e150      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	42470000 	.word	0x42470000
 80030ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ea      	bne.n	8003092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8097 	beq.w	80031f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b7d      	ldr	r3, [pc, #500]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a7c      	ldr	r2, [pc, #496]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b7a      	ldr	r3, [pc, #488]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b77      	ldr	r3, [pc, #476]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d118      	bne.n	8003138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003106:	4b74      	ldr	r3, [pc, #464]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a73      	ldr	r2, [pc, #460]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003112:	f7ff fb1d 	bl	8002750 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7ff fb19 	bl	8002750 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e10c      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <HAL_RCC_OscConfig+0x474>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x2ea>
 8003140:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x324>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x30c>
 8003156:	4b5f      	ldr	r3, [pc, #380]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	4b5c      	ldr	r3, [pc, #368]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0x324>
 8003170:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	4b55      	ldr	r3, [pc, #340]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a54      	ldr	r2, [pc, #336]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7ff fade 	bl	8002750 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7ff fada 	bl	8002750 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0cb      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	4b49      	ldr	r3, [pc, #292]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0ee      	beq.n	8003198 <HAL_RCC_OscConfig+0x334>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031bc:	f7ff fac8 	bl	8002750 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7ff fac4 	bl	8002750 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e0b5      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ee      	bne.n	80031c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ec:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a1 	beq.w	8003344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003202:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	d05c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d141      	bne.n	800329a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_OscConfig+0x478>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff fa98 	bl	8002750 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7ff fa94 	bl	8002750 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e087      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	3b01      	subs	r3, #1
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	491b      	ldr	r1, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326c:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x478>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7ff fa6d 	bl	8002750 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327a:	f7ff fa69 	bl	8002750 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e05c      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x416>
 8003298:	e054      	b.n	8003344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_RCC_OscConfig+0x478>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff fa56 	bl	8002750 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7ff fa52 	bl	8002750 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e045      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_OscConfig+0x470>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x444>
 80032c6:	e03d      	b.n	8003344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e038      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000
 80032dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x4ec>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d028      	beq.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d121      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d11a      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003318:	4293      	cmp	r3, r2
 800331a:	d111      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0cc      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d90c      	bls.n	8003390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b65      	ldr	r3, [pc, #404]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b63      	ldr	r3, [pc, #396]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0b8      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a8:	4b59      	ldr	r3, [pc, #356]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a58      	ldr	r2, [pc, #352]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c0:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a52      	ldr	r2, [pc, #328]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	494d      	ldr	r1, [pc, #308]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d044      	beq.n	8003474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d119      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e07f      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d003      	beq.n	8003412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	2b03      	cmp	r3, #3
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e06f      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e067      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4934      	ldr	r1, [pc, #208]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003444:	f7ff f984 	bl	8002750 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7ff f980 	bl	8002750 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e04f      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d20c      	bcs.n	800349c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e032      	b.n	8003502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4916      	ldr	r1, [pc, #88]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	490e      	ldr	r1, [pc, #56]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034da:	f000 f821 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	490a      	ldr	r1, [pc, #40]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	5ccb      	ldrb	r3, [r1, r3]
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff f8e4 	bl	80026c8 <HAL_InitTick>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023c00 	.word	0x40023c00
 8003510:	40023800 	.word	0x40023800
 8003514:	08007334 	.word	0x08007334
 8003518:	2000000c 	.word	0x2000000c
 800351c:	20000010 	.word	0x20000010

08003520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b094      	sub	sp, #80	; 0x50
 8003526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	647b      	str	r3, [r7, #68]	; 0x44
 800352c:	2300      	movs	r3, #0
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003530:	2300      	movs	r3, #0
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003538:	4b79      	ldr	r3, [pc, #484]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b08      	cmp	r3, #8
 8003542:	d00d      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x40>
 8003544:	2b08      	cmp	r3, #8
 8003546:	f200 80e1 	bhi.w	800370c <HAL_RCC_GetSysClockFreq+0x1ec>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x34>
 800354e:	2b04      	cmp	r3, #4
 8003550:	d003      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x3a>
 8003552:	e0db      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_GetSysClockFreq+0x204>)
 8003556:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003558:	e0db      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800355a:	4b73      	ldr	r3, [pc, #460]	; (8003728 <HAL_RCC_GetSysClockFreq+0x208>)
 800355c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800355e:	e0d8      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800356a:	4b6d      	ldr	r3, [pc, #436]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003576:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	099b      	lsrs	r3, r3, #6
 800357c:	2200      	movs	r2, #0
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003588:	633b      	str	r3, [r7, #48]	; 0x30
 800358a:	2300      	movs	r3, #0
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
 800358e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003592:	4622      	mov	r2, r4
 8003594:	462b      	mov	r3, r5
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	0159      	lsls	r1, r3, #5
 80035a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a4:	0150      	lsls	r0, r2, #5
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4621      	mov	r1, r4
 80035ac:	1a51      	subs	r1, r2, r1
 80035ae:	6139      	str	r1, [r7, #16]
 80035b0:	4629      	mov	r1, r5
 80035b2:	eb63 0301 	sbc.w	r3, r3, r1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c4:	4659      	mov	r1, fp
 80035c6:	018b      	lsls	r3, r1, #6
 80035c8:	4651      	mov	r1, sl
 80035ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ce:	4651      	mov	r1, sl
 80035d0:	018a      	lsls	r2, r1, #6
 80035d2:	4651      	mov	r1, sl
 80035d4:	ebb2 0801 	subs.w	r8, r2, r1
 80035d8:	4659      	mov	r1, fp
 80035da:	eb63 0901 	sbc.w	r9, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb18 0303 	adds.w	r3, r8, r3
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	462b      	mov	r3, r5
 8003600:	eb49 0303 	adc.w	r3, r9, r3
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003612:	4629      	mov	r1, r5
 8003614:	024b      	lsls	r3, r1, #9
 8003616:	4621      	mov	r1, r4
 8003618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800361c:	4621      	mov	r1, r4
 800361e:	024a      	lsls	r2, r1, #9
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	2200      	movs	r2, #0
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
 800362a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800362c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003630:	f7fd fae2 	bl	8000bf8 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363c:	e058      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	4618      	mov	r0, r3
 8003648:	4611      	mov	r1, r2
 800364a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	2300      	movs	r3, #0
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	f04f 0000 	mov.w	r0, #0
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	0159      	lsls	r1, r3, #5
 8003666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366a:	0150      	lsls	r0, r2, #5
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4641      	mov	r1, r8
 8003672:	ebb2 0a01 	subs.w	sl, r2, r1
 8003676:	4649      	mov	r1, r9
 8003678:	eb63 0b01 	sbc.w	fp, r3, r1
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800368c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003690:	ebb2 040a 	subs.w	r4, r2, sl
 8003694:	eb63 050b 	sbc.w	r5, r3, fp
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	00eb      	lsls	r3, r5, #3
 80036a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a6:	00e2      	lsls	r2, r4, #3
 80036a8:	4614      	mov	r4, r2
 80036aa:	461d      	mov	r5, r3
 80036ac:	4643      	mov	r3, r8
 80036ae:	18e3      	adds	r3, r4, r3
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	464b      	mov	r3, r9
 80036b4:	eb45 0303 	adc.w	r3, r5, r3
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036c6:	4629      	mov	r1, r5
 80036c8:	028b      	lsls	r3, r1, #10
 80036ca:	4621      	mov	r1, r4
 80036cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036d0:	4621      	mov	r1, r4
 80036d2:	028a      	lsls	r2, r1, #10
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	61fa      	str	r2, [r7, #28]
 80036e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e4:	f7fd fa88 	bl	8000bf8 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	3301      	adds	r3, #1
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800370a:	e002      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetSysClockFreq+0x204>)
 800370e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003714:	4618      	mov	r0, r3
 8003716:	3750      	adds	r7, #80	; 0x50
 8003718:	46bd      	mov	sp, r7
 800371a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	00f42400 	.word	0x00f42400
 8003728:	007a1200 	.word	0x007a1200

0800372c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <HAL_RCC_GetHCLKFreq+0x14>)
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000000c 	.word	0x2000000c

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003748:	f7ff fff0 	bl	800372c <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0a9b      	lsrs	r3, r3, #10
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	08007344 	.word	0x08007344

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003770:	f7ff ffdc 	bl	800372c <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0b5b      	lsrs	r3, r3, #13
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	08007344 	.word	0x08007344

08003794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e041      	b.n	800382a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe fdf4 	bl	80023a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f000 fda4 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d001      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e04e      	b.n	80038ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a23      	ldr	r2, [pc, #140]	; (80038f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d022      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d01d      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <HAL_TIM_Base_Start_IT+0xc8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d018      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_TIM_Base_Start_IT+0xcc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d013      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_TIM_Base_Start_IT+0xd0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00e      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_TIM_Base_Start_IT+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <HAL_TIM_Base_Start_IT+0xd8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIM_Base_Start_IT+0xdc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d111      	bne.n	80038d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d010      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d6:	e007      	b.n	80038e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00
 8003908:	40010400 	.word	0x40010400
 800390c:	40014000 	.word	0x40014000
 8003910:	40001800 	.word	0x40001800

08003914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e041      	b.n	80039aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fe fd5a 	bl	80023f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f000 fce4 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_TIM_PWM_Start+0x24>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e022      	b.n	8003a1e <HAL_TIM_PWM_Start+0x6a>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d109      	bne.n	80039f2 <HAL_TIM_PWM_Start+0x3e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e015      	b.n	8003a1e <HAL_TIM_PWM_Start+0x6a>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d109      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x58>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e008      	b.n	8003a1e <HAL_TIM_PWM_Start+0x6a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07c      	b.n	8003b20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_PWM_Start+0x82>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a34:	e013      	b.n	8003a5e <HAL_TIM_PWM_Start+0xaa>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d104      	bne.n	8003a46 <HAL_TIM_PWM_Start+0x92>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a44:	e00b      	b.n	8003a5e <HAL_TIM_PWM_Start+0xaa>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d104      	bne.n	8003a56 <HAL_TIM_PWM_Start+0xa2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a54:	e003      	b.n	8003a5e <HAL_TIM_PWM_Start+0xaa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2201      	movs	r2, #1
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 ff44 	bl	80048f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <HAL_TIM_PWM_Start+0x174>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_PWM_Start+0xcc>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2c      	ldr	r2, [pc, #176]	; (8003b2c <HAL_TIM_PWM_Start+0x178>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIM_PWM_Start+0xd0>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_TIM_PWM_Start+0xd2>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <HAL_TIM_PWM_Start+0x174>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_TIM_PWM_Start+0x136>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d01d      	beq.n	8003aea <HAL_TIM_PWM_Start+0x136>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <HAL_TIM_PWM_Start+0x17c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d018      	beq.n	8003aea <HAL_TIM_PWM_Start+0x136>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_TIM_PWM_Start+0x180>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_TIM_PWM_Start+0x136>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_TIM_PWM_Start+0x184>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_TIM_PWM_Start+0x136>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_TIM_PWM_Start+0x178>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_TIM_PWM_Start+0x136>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_TIM_PWM_Start+0x188>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_TIM_PWM_Start+0x136>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <HAL_TIM_PWM_Start+0x18c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d111      	bne.n	8003b0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d010      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0c:	e007      	b.n	8003b1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40001800 	.word	0x40001800

08003b44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e097      	b.n	8003c88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fe fc63 	bl	8002438 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b88:	f023 0307 	bic.w	r3, r3, #7
 8003b8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f000 fbc1 	bl	8004320 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003be4:	f023 030c 	bic.w	r3, r3, #12
 8003be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	4313      	orrs	r3, r2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	011a      	lsls	r2, r3, #4
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	031b      	lsls	r3, r3, #12
 8003c14:	4313      	orrs	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4313      	orrs	r3, r2
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ca8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d110      	bne.n	8003ce2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cc6:	7b7b      	ldrb	r3, [r7, #13]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d001      	beq.n	8003cd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e069      	b.n	8003da4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce0:	e031      	b.n	8003d46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d110      	bne.n	8003d0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ce8:	7bbb      	ldrb	r3, [r7, #14]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d102      	bne.n	8003cf4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cee:	7b3b      	ldrb	r3, [r7, #12]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d001      	beq.n	8003cf8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e055      	b.n	8003da4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d08:	e01d      	b.n	8003d46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d108      	bne.n	8003d22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d10:	7bbb      	ldrb	r3, [r7, #14]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d16:	7b7b      	ldrb	r3, [r7, #13]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d102      	bne.n	8003d22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d1c:	7b3b      	ldrb	r3, [r7, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d001      	beq.n	8003d26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e03e      	b.n	8003da4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_TIM_Encoder_Start+0xc4>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d008      	beq.n	8003d64 <HAL_TIM_Encoder_Start+0xd4>
 8003d52:	e00f      	b.n	8003d74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fdc9 	bl	80048f4 <TIM_CCxChannelCmd>
      break;
 8003d62:	e016      	b.n	8003d92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fdc1 	bl	80048f4 <TIM_CCxChannelCmd>
      break;
 8003d72:	e00e      	b.n	8003d92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fdb9 	bl	80048f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2201      	movs	r2, #1
 8003d88:	2104      	movs	r1, #4
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fdb2 	bl	80048f4 <TIM_CCxChannelCmd>
      break;
 8003d90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0202 	mvn.w	r2, #2
 8003dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa77 	bl	80042e2 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa69 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fa7a 	bl	80042f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d122      	bne.n	8003e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d11b      	bne.n	8003e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0204 	mvn.w	r2, #4
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa4d 	bl	80042e2 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa3f 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fa50 	bl	80042f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d122      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0208 	mvn.w	r2, #8
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2204      	movs	r2, #4
 8003e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa23 	bl	80042e2 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa15 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fa26 	bl	80042f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0210 	mvn.w	r2, #16
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f9f9 	bl	80042e2 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9eb 	bl	80042ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f9fc 	bl	80042f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0201 	mvn.w	r2, #1
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd fbec 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d10e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b80      	cmp	r3, #128	; 0x80
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fd78 	bl	8004a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d10e      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d107      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9c1 	bl	800430a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d10e      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d107      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0220 	mvn.w	r2, #32
 8003fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fd42 	bl	8004a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e0ae      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	f200 809f 	bhi.w	8004128 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	08004129 	.word	0x08004129
 8003ff8:	08004129 	.word	0x08004129
 8003ffc:	08004129 	.word	0x08004129
 8004000:	08004065 	.word	0x08004065
 8004004:	08004129 	.word	0x08004129
 8004008:	08004129 	.word	0x08004129
 800400c:	08004129 	.word	0x08004129
 8004010:	080040a7 	.word	0x080040a7
 8004014:	08004129 	.word	0x08004129
 8004018:	08004129 	.word	0x08004129
 800401c:	08004129 	.word	0x08004129
 8004020:	080040e7 	.word	0x080040e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa18 	bl	8004460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0204 	bic.w	r2, r2, #4
 800404e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	619a      	str	r2, [r3, #24]
      break;
 8004062:	e064      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fa68 	bl	8004540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6999      	ldr	r1, [r3, #24]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	619a      	str	r2, [r3, #24]
      break;
 80040a4:	e043      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fabd 	bl	800462c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0208 	orr.w	r2, r2, #8
 80040c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0204 	bic.w	r2, r2, #4
 80040d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	61da      	str	r2, [r3, #28]
      break;
 80040e4:	e023      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fb11 	bl	8004714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69d9      	ldr	r1, [r3, #28]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	021a      	lsls	r2, r3, #8
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	61da      	str	r2, [r3, #28]
      break;
 8004126:	e002      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
      break;
 800412c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_TIM_ConfigClockSource+0x1c>
 8004158:	2302      	movs	r3, #2
 800415a:	e0b4      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x186>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800417a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004194:	d03e      	beq.n	8004214 <HAL_TIM_ConfigClockSource+0xd4>
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419a:	f200 8087 	bhi.w	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a2:	f000 8086 	beq.w	80042b2 <HAL_TIM_ConfigClockSource+0x172>
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041aa:	d87f      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b70      	cmp	r3, #112	; 0x70
 80041ae:	d01a      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0xa6>
 80041b0:	2b70      	cmp	r3, #112	; 0x70
 80041b2:	d87b      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041b4:	2b60      	cmp	r3, #96	; 0x60
 80041b6:	d050      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x11a>
 80041b8:	2b60      	cmp	r3, #96	; 0x60
 80041ba:	d877      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041bc:	2b50      	cmp	r3, #80	; 0x50
 80041be:	d03c      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xfa>
 80041c0:	2b50      	cmp	r3, #80	; 0x50
 80041c2:	d873      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d058      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x13a>
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d86f      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d064      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041d0:	2b30      	cmp	r3, #48	; 0x30
 80041d2:	d86b      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d060      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d867      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05c      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d05a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	e062      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6899      	ldr	r1, [r3, #8]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f000 fb5d 	bl	80048b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	609a      	str	r2, [r3, #8]
      break;
 8004212:	e04f      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f000 fb46 	bl	80048b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004236:	609a      	str	r2, [r3, #8]
      break;
 8004238:	e03c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	461a      	mov	r2, r3
 8004248:	f000 faba 	bl	80047c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2150      	movs	r1, #80	; 0x50
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fb13 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8004258:	e02c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	461a      	mov	r2, r3
 8004268:	f000 fad9 	bl	800481e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2160      	movs	r1, #96	; 0x60
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb03 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8004278:	e01c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	461a      	mov	r2, r3
 8004288:	f000 fa9a 	bl	80047c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2140      	movs	r1, #64	; 0x40
 8004292:	4618      	mov	r0, r3
 8004294:	f000 faf3 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8004298:	e00c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f000 faea 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 80042aa:	e003      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e000      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <TIM_Base_SetConfig+0x114>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d00f      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3d      	ldr	r2, [pc, #244]	; (8004438 <TIM_Base_SetConfig+0x118>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00b      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3c      	ldr	r2, [pc, #240]	; (800443c <TIM_Base_SetConfig+0x11c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <TIM_Base_SetConfig+0x120>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3a      	ldr	r2, [pc, #232]	; (8004444 <TIM_Base_SetConfig+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <TIM_Base_SetConfig+0x114>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02b      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d027      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <TIM_Base_SetConfig+0x118>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d023      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2b      	ldr	r2, [pc, #172]	; (800443c <TIM_Base_SetConfig+0x11c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01f      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <TIM_Base_SetConfig+0x120>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01b      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <TIM_Base_SetConfig+0x124>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d017      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a28      	ldr	r2, [pc, #160]	; (8004448 <TIM_Base_SetConfig+0x128>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a27      	ldr	r2, [pc, #156]	; (800444c <TIM_Base_SetConfig+0x12c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00f      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <TIM_Base_SetConfig+0x130>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a25      	ldr	r2, [pc, #148]	; (8004454 <TIM_Base_SetConfig+0x134>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a24      	ldr	r2, [pc, #144]	; (8004458 <TIM_Base_SetConfig+0x138>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a23      	ldr	r2, [pc, #140]	; (800445c <TIM_Base_SetConfig+0x13c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <TIM_Base_SetConfig+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <TIM_Base_SetConfig+0x124>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	615a      	str	r2, [r3, #20]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800
 8004454:	40001800 	.word	0x40001800
 8004458:	40001c00 	.word	0x40001c00
 800445c:	40002000 	.word	0x40002000

08004460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 0302 	bic.w	r3, r3, #2
 80044a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a20      	ldr	r2, [pc, #128]	; (8004538 <TIM_OC1_SetConfig+0xd8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC1_SetConfig+0x64>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <TIM_OC1_SetConfig+0xdc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10c      	bne.n	80044de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0308 	bic.w	r3, r3, #8
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a15      	ldr	r2, [pc, #84]	; (8004538 <TIM_OC1_SetConfig+0xd8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_OC1_SetConfig+0x8e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <TIM_OC1_SetConfig+0xdc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d111      	bne.n	8004512 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	621a      	str	r2, [r3, #32]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40010000 	.word	0x40010000
 800453c:	40010400 	.word	0x40010400

08004540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0210 	bic.w	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0320 	bic.w	r3, r3, #32
 800458a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a22      	ldr	r2, [pc, #136]	; (8004624 <TIM_OC2_SetConfig+0xe4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC2_SetConfig+0x68>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <TIM_OC2_SetConfig+0xe8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10d      	bne.n	80045c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a17      	ldr	r2, [pc, #92]	; (8004624 <TIM_OC2_SetConfig+0xe4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_OC2_SetConfig+0x94>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a16      	ldr	r2, [pc, #88]	; (8004628 <TIM_OC2_SetConfig+0xe8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d113      	bne.n	80045fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000
 8004628:	40010400 	.word	0x40010400

0800462c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a21      	ldr	r2, [pc, #132]	; (800470c <TIM_OC3_SetConfig+0xe0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_OC3_SetConfig+0x66>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a20      	ldr	r2, [pc, #128]	; (8004710 <TIM_OC3_SetConfig+0xe4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10d      	bne.n	80046ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a16      	ldr	r2, [pc, #88]	; (800470c <TIM_OC3_SetConfig+0xe0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC3_SetConfig+0x92>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <TIM_OC3_SetConfig+0xe4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d113      	bne.n	80046e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	621a      	str	r2, [r3, #32]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40010000 	.word	0x40010000
 8004710:	40010400 	.word	0x40010400

08004714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	031b      	lsls	r3, r3, #12
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <TIM_OC4_SetConfig+0xa4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC4_SetConfig+0x68>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a11      	ldr	r2, [pc, #68]	; (80047bc <TIM_OC4_SetConfig+0xa8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d109      	bne.n	8004790 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40010400 	.word	0x40010400

080047c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f023 0201 	bic.w	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 030a 	bic.w	r3, r3, #10
 80047fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481e:	b480      	push	{r7}
 8004820:	b087      	sub	sp, #28
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0210 	bic.w	r2, r3, #16
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	031b      	lsls	r3, r3, #12
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800485a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	f043 0307 	orr.w	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2201      	movs	r2, #1
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	43db      	mvns	r3, r3
 8004916:	401a      	ands	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e05a      	b.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a4:	d01d      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10c      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40010400 	.word	0x40010400
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40001800 	.word	0x40001800

08004a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e03f      	b.n	8004af2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fd82 	bl	8002590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fddf 	bl	8005668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b08a      	sub	sp, #40	; 0x28
 8004afe:	af02      	add	r7, sp, #8
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d17c      	bne.n	8004c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_UART_Transmit+0x2c>
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e075      	b.n	8004c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_UART_Transmit+0x3e>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e06e      	b.n	8004c16 <HAL_UART_Transmit+0x11c>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2221      	movs	r2, #33	; 0x21
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4e:	f7fd fdff 	bl	8002750 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b68:	d108      	bne.n	8004b7c <HAL_UART_Transmit+0x82>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	e003      	b.n	8004b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b8c:	e02a      	b.n	8004be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fb1f 	bl	80051dc <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e036      	b.n	8004c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	e007      	b.n	8004bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1cf      	bne.n	8004b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2140      	movs	r1, #64	; 0x40
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 faef 	bl	80051dc <UART_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e006      	b.n	8004c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	e000      	b.n	8004c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
  }
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d11d      	bne.n	8004c74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_UART_Receive_IT+0x26>
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e016      	b.n	8004c76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Receive_IT+0x38>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e00f      	b.n	8004c76 <HAL_UART_Receive_IT+0x58>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	461a      	mov	r2, r3
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fb24 	bl	80052b8 <UART_Start_Receive_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	e000      	b.n	8004c76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b0ba      	sub	sp, #232	; 0xe8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x66>
 8004cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fc07 	bl	80054f2 <UART_Receive_IT>
      return;
 8004ce4:	e256      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80de 	beq.w	8004eac <HAL_UART_IRQHandler+0x22c>
 8004cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80d1 	beq.w	8004eac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_UART_IRQHandler+0xae>
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
 8004d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_UART_IRQHandler+0xf6>
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0204 	orr.w	r2, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d011      	beq.n	8004da6 <HAL_UART_IRQHandler+0x126>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d105      	bne.n	8004d9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f043 0208 	orr.w	r2, r3, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 81ed 	beq.w	800518a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_UART_IRQHandler+0x14e>
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fb92 	bl	80054f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <HAL_UART_IRQHandler+0x17a>
 8004df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d04f      	beq.n	8004e9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa9a 	bl	8005334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d141      	bne.n	8004e92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3314      	adds	r3, #20
 8004e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1d9      	bne.n	8004e0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d013      	beq.n	8004e8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4a7d      	ldr	r2, [pc, #500]	; (800505c <HAL_UART_IRQHandler+0x3dc>)
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd fe1f 	bl	8002ab2 <HAL_DMA_Abort_IT>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e84:	4610      	mov	r0, r2
 8004e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	e00e      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f990 	bl	80051b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	e00a      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f98c 	bl	80051b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f988 	bl	80051b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ea6:	e170      	b.n	800518a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	bf00      	nop
    return;
 8004eaa:	e16e      	b.n	800518a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f040 814a 	bne.w	800514a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8143 	beq.w	800514a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 813c 	beq.w	800514a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	f040 80b4 	bne.w	8005060 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8140 	beq.w	800518e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f16:	429a      	cmp	r2, r3
 8004f18:	f080 8139 	bcs.w	800518e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2e:	f000 8088 	beq.w	8005042 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1d9      	bne.n	8004f32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3314      	adds	r3, #20
 8004f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3314      	adds	r3, #20
 8004f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e1      	bne.n	8004f7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3314      	adds	r3, #20
 8004fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e3      	bne.n	8004fba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005012:	f023 0310 	bic.w	r3, r3, #16
 8005016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005024:	65ba      	str	r2, [r7, #88]	; 0x58
 8005026:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800502a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e3      	bne.n	8005000 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	4618      	mov	r0, r3
 800503e:	f7fd fcc8 	bl	80029d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800504a:	b29b      	uxth	r3, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	b29b      	uxth	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8b6 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005058:	e099      	b.n	800518e <HAL_UART_IRQHandler+0x50e>
 800505a:	bf00      	nop
 800505c:	080053fb 	.word	0x080053fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005068:	b29b      	uxth	r3, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 808b 	beq.w	8005192 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800507c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8086 	beq.w	8005192 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050aa:	647a      	str	r2, [r7, #68]	; 0x44
 80050ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e3      	bne.n	8005086 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	623b      	str	r3, [r7, #32]
   return(result);
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3314      	adds	r3, #20
 80050de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050e2:	633a      	str	r2, [r7, #48]	; 0x30
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e3      	bne.n	80050be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	60fb      	str	r3, [r7, #12]
   return(result);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	69b9      	ldr	r1, [r7, #24]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	617b      	str	r3, [r7, #20]
   return(result);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e3      	bne.n	8005104 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f83e 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005148:	e023      	b.n	8005192 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_UART_IRQHandler+0x4ea>
 8005156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f95d 	bl	8005422 <UART_Transmit_IT>
    return;
 8005168:	e014      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00e      	beq.n	8005194 <HAL_UART_IRQHandler+0x514>
 8005176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f99d 	bl	80054c2 <UART_EndTransmit_IT>
    return;
 8005188:	e004      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
    return;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
      return;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_UART_IRQHandler+0x514>
      return;
 8005192:	bf00      	nop
  }
}
 8005194:	37e8      	adds	r7, #232	; 0xe8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop

0800519c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b090      	sub	sp, #64	; 0x40
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ec:	e050      	b.n	8005290 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f4:	d04c      	beq.n	8005290 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <UART_WaitOnFlagUntilTimeout+0x30>
 80051fc:	f7fd faa8 	bl	8002750 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005208:	429a      	cmp	r2, r3
 800520a:	d241      	bcs.n	8005290 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800522c:	637a      	str	r2, [r7, #52]	; 0x34
 800522e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e5      	bne.n	800520c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3314      	adds	r3, #20
 8005246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	613b      	str	r3, [r7, #16]
   return(result);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005260:	623a      	str	r2, [r7, #32]
 8005262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	6a3a      	ldr	r2, [r7, #32]
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	61bb      	str	r3, [r7, #24]
   return(result);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e00f      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d09f      	beq.n	80051ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3740      	adds	r7, #64	; 0x40
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2222      	movs	r2, #34	; 0x22
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005304:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0220 	orr.w	r2, r2, #32
 8005324:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b095      	sub	sp, #84	; 0x54
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800535c:	643a      	str	r2, [r7, #64]	; 0x40
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3314      	adds	r3, #20
 8005376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005390:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d119      	bne.n	80053e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f023 0310 	bic.w	r3, r3, #16
 80053c2:	647b      	str	r3, [r7, #68]	; 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053cc:	61ba      	str	r2, [r7, #24]
 80053ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6979      	ldr	r1, [r7, #20]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	613b      	str	r3, [r7, #16]
   return(result);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053ee:	bf00      	nop
 80053f0:	3754      	adds	r7, #84	; 0x54
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff fecb 	bl	80051b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b21      	cmp	r3, #33	; 0x21
 8005434:	d13e      	bne.n	80054b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543e:	d114      	bne.n	800546a <UART_Transmit_IT+0x48>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d110      	bne.n	800546a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800545c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	1c9a      	adds	r2, r3, #2
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]
 8005468:	e008      	b.n	800547c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	1c59      	adds	r1, r3, #1
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6211      	str	r1, [r2, #32]
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29b      	uxth	r3, r3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4619      	mov	r1, r3
 800548a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10f      	bne.n	80054b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fe5a 	bl	800519c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b08c      	sub	sp, #48	; 0x30
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	f040 80ab 	bne.w	800565e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d117      	bne.n	8005542 <UART_Receive_IT+0x50>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d113      	bne.n	8005542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005530:	b29a      	uxth	r2, r3
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	1c9a      	adds	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
 8005540:	e026      	b.n	8005590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005554:	d007      	beq.n	8005566 <UART_Receive_IT+0x74>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <UART_Receive_IT+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e008      	b.n	8005586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	b2da      	uxtb	r2, r3
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29b      	uxth	r3, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4619      	mov	r1, r3
 800559e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d15a      	bne.n	800565a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0220 	bic.w	r2, r2, #32
 80055b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d135      	bne.n	8005650 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	613b      	str	r3, [r7, #16]
   return(result);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f023 0310 	bic.w	r3, r3, #16
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560a:	623a      	str	r2, [r7, #32]
 800560c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69f9      	ldr	r1, [r7, #28]
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	61bb      	str	r3, [r7, #24]
   return(result);
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b10      	cmp	r3, #16
 800562a:	d10a      	bne.n	8005642 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fdbb 	bl	80051c4 <HAL_UARTEx_RxEventCallback>
 800564e:	e002      	b.n	8005656 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fc fce7 	bl	8002024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	e002      	b.n	8005660 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	e000      	b.n	8005660 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800565e:	2302      	movs	r3, #2
  }
}
 8005660:	4618      	mov	r0, r3
 8005662:	3730      	adds	r7, #48	; 0x30
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800566c:	b0c0      	sub	sp, #256	; 0x100
 800566e:	af00      	add	r7, sp, #0
 8005670:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	68d9      	ldr	r1, [r3, #12]
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	ea40 0301 	orr.w	r3, r0, r1
 8005690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	431a      	orrs	r2, r3
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056c0:	f021 010c 	bic.w	r1, r1, #12
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056ce:	430b      	orrs	r3, r1
 80056d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	6999      	ldr	r1, [r3, #24]
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	ea40 0301 	orr.w	r3, r0, r1
 80056ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b8f      	ldr	r3, [pc, #572]	; (8005934 <UART_SetConfig+0x2cc>)
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d005      	beq.n	8005708 <UART_SetConfig+0xa0>
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b8d      	ldr	r3, [pc, #564]	; (8005938 <UART_SetConfig+0x2d0>)
 8005704:	429a      	cmp	r2, r3
 8005706:	d104      	bne.n	8005712 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005708:	f7fe f830 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 800570c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005710:	e003      	b.n	800571a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005712:	f7fe f817 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 8005716:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005724:	f040 810c 	bne.w	8005940 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800572c:	2200      	movs	r2, #0
 800572e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005732:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005736:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800573a:	4622      	mov	r2, r4
 800573c:	462b      	mov	r3, r5
 800573e:	1891      	adds	r1, r2, r2
 8005740:	65b9      	str	r1, [r7, #88]	; 0x58
 8005742:	415b      	adcs	r3, r3
 8005744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005746:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800574a:	4621      	mov	r1, r4
 800574c:	eb12 0801 	adds.w	r8, r2, r1
 8005750:	4629      	mov	r1, r5
 8005752:	eb43 0901 	adc.w	r9, r3, r1
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576a:	4690      	mov	r8, r2
 800576c:	4699      	mov	r9, r3
 800576e:	4623      	mov	r3, r4
 8005770:	eb18 0303 	adds.w	r3, r8, r3
 8005774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005778:	462b      	mov	r3, r5
 800577a:	eb49 0303 	adc.w	r3, r9, r3
 800577e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800578e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005796:	460b      	mov	r3, r1
 8005798:	18db      	adds	r3, r3, r3
 800579a:	653b      	str	r3, [r7, #80]	; 0x50
 800579c:	4613      	mov	r3, r2
 800579e:	eb42 0303 	adc.w	r3, r2, r3
 80057a2:	657b      	str	r3, [r7, #84]	; 0x54
 80057a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057ac:	f7fb fa24 	bl	8000bf8 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4b61      	ldr	r3, [pc, #388]	; (800593c <UART_SetConfig+0x2d4>)
 80057b6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	011c      	lsls	r4, r3, #4
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80057d8:	415b      	adcs	r3, r3
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057e0:	4641      	mov	r1, r8
 80057e2:	eb12 0a01 	adds.w	sl, r2, r1
 80057e6:	4649      	mov	r1, r9
 80057e8:	eb43 0b01 	adc.w	fp, r3, r1
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005800:	4692      	mov	sl, r2
 8005802:	469b      	mov	fp, r3
 8005804:	4643      	mov	r3, r8
 8005806:	eb1a 0303 	adds.w	r3, sl, r3
 800580a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800580e:	464b      	mov	r3, r9
 8005810:	eb4b 0303 	adc.w	r3, fp, r3
 8005814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005824:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005828:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800582c:	460b      	mov	r3, r1
 800582e:	18db      	adds	r3, r3, r3
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
 8005832:	4613      	mov	r3, r2
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800583e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005842:	f7fb f9d9 	bl	8000bf8 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4611      	mov	r1, r2
 800584c:	4b3b      	ldr	r3, [pc, #236]	; (800593c <UART_SetConfig+0x2d4>)
 800584e:	fba3 2301 	umull	r2, r3, r3, r1
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2264      	movs	r2, #100	; 0x64
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	1acb      	subs	r3, r1, r3
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <UART_SetConfig+0x2d4>)
 8005864:	fba3 2302 	umull	r2, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005870:	441c      	add	r4, r3
 8005872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005876:	2200      	movs	r2, #0
 8005878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800587c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005880:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	63b9      	str	r1, [r7, #56]	; 0x38
 800588c:	415b      	adcs	r3, r3
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005894:	4641      	mov	r1, r8
 8005896:	1851      	adds	r1, r2, r1
 8005898:	6339      	str	r1, [r7, #48]	; 0x30
 800589a:	4649      	mov	r1, r9
 800589c:	414b      	adcs	r3, r1
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058ac:	4659      	mov	r1, fp
 80058ae:	00cb      	lsls	r3, r1, #3
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b6:	4651      	mov	r1, sl
 80058b8:	00ca      	lsls	r2, r1, #3
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	4642      	mov	r2, r8
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058c8:	464b      	mov	r3, r9
 80058ca:	460a      	mov	r2, r1
 80058cc:	eb42 0303 	adc.w	r3, r2, r3
 80058d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058e8:	460b      	mov	r3, r1
 80058ea:	18db      	adds	r3, r3, r3
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ee:	4613      	mov	r3, r2
 80058f0:	eb42 0303 	adc.w	r3, r2, r3
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058fe:	f7fb f97b 	bl	8000bf8 <__aeabi_uldivmod>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4b0d      	ldr	r3, [pc, #52]	; (800593c <UART_SetConfig+0x2d4>)
 8005908:	fba3 1302 	umull	r1, r3, r3, r2
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	2164      	movs	r1, #100	; 0x64
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	3332      	adds	r3, #50	; 0x32
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <UART_SetConfig+0x2d4>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	f003 0207 	and.w	r2, r3, #7
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4422      	add	r2, r4
 800592e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005930:	e105      	b.n	8005b3e <UART_SetConfig+0x4d6>
 8005932:	bf00      	nop
 8005934:	40011000 	.word	0x40011000
 8005938:	40011400 	.word	0x40011400
 800593c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005944:	2200      	movs	r2, #0
 8005946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800594a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800594e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005952:	4642      	mov	r2, r8
 8005954:	464b      	mov	r3, r9
 8005956:	1891      	adds	r1, r2, r2
 8005958:	6239      	str	r1, [r7, #32]
 800595a:	415b      	adcs	r3, r3
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005962:	4641      	mov	r1, r8
 8005964:	1854      	adds	r4, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb43 0501 	adc.w	r5, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	00eb      	lsls	r3, r5, #3
 8005976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800597a:	00e2      	lsls	r2, r4, #3
 800597c:	4614      	mov	r4, r2
 800597e:	461d      	mov	r5, r3
 8005980:	4643      	mov	r3, r8
 8005982:	18e3      	adds	r3, r4, r3
 8005984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005988:	464b      	mov	r3, r9
 800598a:	eb45 0303 	adc.w	r3, r5, r3
 800598e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800599e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059ae:	4629      	mov	r1, r5
 80059b0:	008b      	lsls	r3, r1, #2
 80059b2:	4621      	mov	r1, r4
 80059b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b8:	4621      	mov	r1, r4
 80059ba:	008a      	lsls	r2, r1, #2
 80059bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059c0:	f7fb f91a 	bl	8000bf8 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4b60      	ldr	r3, [pc, #384]	; (8005b4c <UART_SetConfig+0x4e4>)
 80059ca:	fba3 2302 	umull	r2, r3, r3, r2
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	011c      	lsls	r4, r3, #4
 80059d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	1891      	adds	r1, r2, r2
 80059ea:	61b9      	str	r1, [r7, #24]
 80059ec:	415b      	adcs	r3, r3
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f4:	4641      	mov	r1, r8
 80059f6:	1851      	adds	r1, r2, r1
 80059f8:	6139      	str	r1, [r7, #16]
 80059fa:	4649      	mov	r1, r9
 80059fc:	414b      	adcs	r3, r1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	00cb      	lsls	r3, r1, #3
 8005a10:	4651      	mov	r1, sl
 8005a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a16:	4651      	mov	r1, sl
 8005a18:	00ca      	lsls	r2, r1, #3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4642      	mov	r2, r8
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a28:	464b      	mov	r3, r9
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	eb42 0303 	adc.w	r3, r2, r3
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	008b      	lsls	r3, r1, #2
 8005a50:	4641      	mov	r1, r8
 8005a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a56:	4641      	mov	r1, r8
 8005a58:	008a      	lsls	r2, r1, #2
 8005a5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a5e:	f7fb f8cb 	bl	8000bf8 <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005a68:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	2164      	movs	r1, #100	; 0x64
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	3332      	adds	r3, #50	; 0x32
 8005a7a:	4a34      	ldr	r2, [pc, #208]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a86:	441c      	add	r4, r3
 8005a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a90:	677a      	str	r2, [r7, #116]	; 0x74
 8005a92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a96:	4642      	mov	r2, r8
 8005a98:	464b      	mov	r3, r9
 8005a9a:	1891      	adds	r1, r2, r2
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	415b      	adcs	r3, r3
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	1851      	adds	r1, r2, r1
 8005aaa:	6039      	str	r1, [r7, #0]
 8005aac:	4649      	mov	r1, r9
 8005aae:	414b      	adcs	r3, r1
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005abe:	4659      	mov	r1, fp
 8005ac0:	00cb      	lsls	r3, r1, #3
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac8:	4651      	mov	r1, sl
 8005aca:	00ca      	lsls	r2, r1, #3
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4642      	mov	r2, r8
 8005ad4:	189b      	adds	r3, r3, r2
 8005ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad8:	464b      	mov	r3, r9
 8005ada:	460a      	mov	r2, r1
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	663b      	str	r3, [r7, #96]	; 0x60
 8005aec:	667a      	str	r2, [r7, #100]	; 0x64
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005afa:	4649      	mov	r1, r9
 8005afc:	008b      	lsls	r3, r1, #2
 8005afe:	4641      	mov	r1, r8
 8005b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b04:	4641      	mov	r1, r8
 8005b06:	008a      	lsls	r2, r1, #2
 8005b08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b0c:	f7fb f874 	bl	8000bf8 <__aeabi_uldivmod>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005b16:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	2164      	movs	r1, #100	; 0x64
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	3332      	adds	r3, #50	; 0x32
 8005b28:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <UART_SetConfig+0x4e4>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	f003 020f 	and.w	r2, r3, #15
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4422      	add	r2, r4
 8005b3c:	609a      	str	r2, [r3, #8]
}
 8005b3e:	bf00      	nop
 8005b40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b44:	46bd      	mov	sp, r7
 8005b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4a:	bf00      	nop
 8005b4c:	51eb851f 	.word	0x51eb851f

08005b50 <__errno>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	; (8005b58 <__errno+0x8>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000018 	.word	0x20000018

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4d0d      	ldr	r5, [pc, #52]	; (8005b94 <__libc_init_array+0x38>)
 8005b60:	4c0d      	ldr	r4, [pc, #52]	; (8005b98 <__libc_init_array+0x3c>)
 8005b62:	1b64      	subs	r4, r4, r5
 8005b64:	10a4      	asrs	r4, r4, #2
 8005b66:	2600      	movs	r6, #0
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	4d0b      	ldr	r5, [pc, #44]	; (8005b9c <__libc_init_array+0x40>)
 8005b6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ba0 <__libc_init_array+0x44>)
 8005b70:	f001 fbb8 	bl	80072e4 <_init>
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	2600      	movs	r6, #0
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	080073b8 	.word	0x080073b8
 8005b98:	080073b8 	.word	0x080073b8
 8005b9c:	080073b8 	.word	0x080073b8
 8005ba0:	080073bc 	.word	0x080073bc

08005ba4 <malloc>:
 8005ba4:	4b02      	ldr	r3, [pc, #8]	; (8005bb0 <malloc+0xc>)
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f000 b88d 	b.w	8005cc8 <_malloc_r>
 8005bae:	bf00      	nop
 8005bb0:	20000018 	.word	0x20000018

08005bb4 <free>:
 8005bb4:	4b02      	ldr	r3, [pc, #8]	; (8005bc0 <free+0xc>)
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	f000 b819 	b.w	8005bf0 <_free_r>
 8005bbe:	bf00      	nop
 8005bc0:	20000018 	.word	0x20000018

08005bc4 <memcpy>:
 8005bc4:	440a      	add	r2, r1
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005bcc:	d100      	bne.n	8005bd0 <memcpy+0xc>
 8005bce:	4770      	bx	lr
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	d1f9      	bne.n	8005bd2 <memcpy+0xe>
 8005bde:	bd10      	pop	{r4, pc}

08005be0 <memset>:
 8005be0:	4402      	add	r2, r0
 8005be2:	4603      	mov	r3, r0
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d100      	bne.n	8005bea <memset+0xa>
 8005be8:	4770      	bx	lr
 8005bea:	f803 1b01 	strb.w	r1, [r3], #1
 8005bee:	e7f9      	b.n	8005be4 <memset+0x4>

08005bf0 <_free_r>:
 8005bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d044      	beq.n	8005c80 <_free_r+0x90>
 8005bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfa:	9001      	str	r0, [sp, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8005c02:	bfb8      	it	lt
 8005c04:	18e4      	addlt	r4, r4, r3
 8005c06:	f000 f903 	bl	8005e10 <__malloc_lock>
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <_free_r+0x94>)
 8005c0c:	9801      	ldr	r0, [sp, #4]
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	b933      	cbnz	r3, 8005c20 <_free_r+0x30>
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	6014      	str	r4, [r2, #0]
 8005c16:	b003      	add	sp, #12
 8005c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c1c:	f000 b8fe 	b.w	8005e1c <__malloc_unlock>
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d908      	bls.n	8005c36 <_free_r+0x46>
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf01      	itttt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	1949      	addeq	r1, r1, r5
 8005c32:	6021      	streq	r1, [r4, #0]
 8005c34:	e7ed      	b.n	8005c12 <_free_r+0x22>
 8005c36:	461a      	mov	r2, r3
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b10b      	cbz	r3, 8005c40 <_free_r+0x50>
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d9fa      	bls.n	8005c36 <_free_r+0x46>
 8005c40:	6811      	ldr	r1, [r2, #0]
 8005c42:	1855      	adds	r5, r2, r1
 8005c44:	42a5      	cmp	r5, r4
 8005c46:	d10b      	bne.n	8005c60 <_free_r+0x70>
 8005c48:	6824      	ldr	r4, [r4, #0]
 8005c4a:	4421      	add	r1, r4
 8005c4c:	1854      	adds	r4, r2, r1
 8005c4e:	42a3      	cmp	r3, r4
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	d1e0      	bne.n	8005c16 <_free_r+0x26>
 8005c54:	681c      	ldr	r4, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	6053      	str	r3, [r2, #4]
 8005c5a:	4421      	add	r1, r4
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	e7da      	b.n	8005c16 <_free_r+0x26>
 8005c60:	d902      	bls.n	8005c68 <_free_r+0x78>
 8005c62:	230c      	movs	r3, #12
 8005c64:	6003      	str	r3, [r0, #0]
 8005c66:	e7d6      	b.n	8005c16 <_free_r+0x26>
 8005c68:	6825      	ldr	r5, [r4, #0]
 8005c6a:	1961      	adds	r1, r4, r5
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	bf04      	itt	eq
 8005c70:	6819      	ldreq	r1, [r3, #0]
 8005c72:	685b      	ldreq	r3, [r3, #4]
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	bf04      	itt	eq
 8005c78:	1949      	addeq	r1, r1, r5
 8005c7a:	6021      	streq	r1, [r4, #0]
 8005c7c:	6054      	str	r4, [r2, #4]
 8005c7e:	e7ca      	b.n	8005c16 <_free_r+0x26>
 8005c80:	b003      	add	sp, #12
 8005c82:	bd30      	pop	{r4, r5, pc}
 8005c84:	20000bb8 	.word	0x20000bb8

08005c88 <sbrk_aligned>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4e0e      	ldr	r6, [pc, #56]	; (8005cc4 <sbrk_aligned+0x3c>)
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	6831      	ldr	r1, [r6, #0]
 8005c90:	4605      	mov	r5, r0
 8005c92:	b911      	cbnz	r1, 8005c9a <sbrk_aligned+0x12>
 8005c94:	f000 f88c 	bl	8005db0 <_sbrk_r>
 8005c98:	6030      	str	r0, [r6, #0]
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 f887 	bl	8005db0 <_sbrk_r>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	d00a      	beq.n	8005cbc <sbrk_aligned+0x34>
 8005ca6:	1cc4      	adds	r4, r0, #3
 8005ca8:	f024 0403 	bic.w	r4, r4, #3
 8005cac:	42a0      	cmp	r0, r4
 8005cae:	d007      	beq.n	8005cc0 <sbrk_aligned+0x38>
 8005cb0:	1a21      	subs	r1, r4, r0
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 f87c 	bl	8005db0 <_sbrk_r>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d101      	bne.n	8005cc0 <sbrk_aligned+0x38>
 8005cbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	20000bbc 	.word	0x20000bbc

08005cc8 <_malloc_r>:
 8005cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	1ccd      	adds	r5, r1, #3
 8005cce:	f025 0503 	bic.w	r5, r5, #3
 8005cd2:	3508      	adds	r5, #8
 8005cd4:	2d0c      	cmp	r5, #12
 8005cd6:	bf38      	it	cc
 8005cd8:	250c      	movcc	r5, #12
 8005cda:	2d00      	cmp	r5, #0
 8005cdc:	4607      	mov	r7, r0
 8005cde:	db01      	blt.n	8005ce4 <_malloc_r+0x1c>
 8005ce0:	42a9      	cmp	r1, r5
 8005ce2:	d905      	bls.n	8005cf0 <_malloc_r+0x28>
 8005ce4:	230c      	movs	r3, #12
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	2600      	movs	r6, #0
 8005cea:	4630      	mov	r0, r6
 8005cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf0:	4e2e      	ldr	r6, [pc, #184]	; (8005dac <_malloc_r+0xe4>)
 8005cf2:	f000 f88d 	bl	8005e10 <__malloc_lock>
 8005cf6:	6833      	ldr	r3, [r6, #0]
 8005cf8:	461c      	mov	r4, r3
 8005cfa:	bb34      	cbnz	r4, 8005d4a <_malloc_r+0x82>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f7ff ffc2 	bl	8005c88 <sbrk_aligned>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	4604      	mov	r4, r0
 8005d08:	d14d      	bne.n	8005da6 <_malloc_r+0xde>
 8005d0a:	6834      	ldr	r4, [r6, #0]
 8005d0c:	4626      	mov	r6, r4
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	d140      	bne.n	8005d94 <_malloc_r+0xcc>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	4631      	mov	r1, r6
 8005d16:	4638      	mov	r0, r7
 8005d18:	eb04 0803 	add.w	r8, r4, r3
 8005d1c:	f000 f848 	bl	8005db0 <_sbrk_r>
 8005d20:	4580      	cmp	r8, r0
 8005d22:	d13a      	bne.n	8005d9a <_malloc_r+0xd2>
 8005d24:	6821      	ldr	r1, [r4, #0]
 8005d26:	3503      	adds	r5, #3
 8005d28:	1a6d      	subs	r5, r5, r1
 8005d2a:	f025 0503 	bic.w	r5, r5, #3
 8005d2e:	3508      	adds	r5, #8
 8005d30:	2d0c      	cmp	r5, #12
 8005d32:	bf38      	it	cc
 8005d34:	250c      	movcc	r5, #12
 8005d36:	4629      	mov	r1, r5
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff ffa5 	bl	8005c88 <sbrk_aligned>
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d02b      	beq.n	8005d9a <_malloc_r+0xd2>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	442b      	add	r3, r5
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	e00e      	b.n	8005d68 <_malloc_r+0xa0>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	1b52      	subs	r2, r2, r5
 8005d4e:	d41e      	bmi.n	8005d8e <_malloc_r+0xc6>
 8005d50:	2a0b      	cmp	r2, #11
 8005d52:	d916      	bls.n	8005d82 <_malloc_r+0xba>
 8005d54:	1961      	adds	r1, r4, r5
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	6025      	str	r5, [r4, #0]
 8005d5a:	bf18      	it	ne
 8005d5c:	6059      	strne	r1, [r3, #4]
 8005d5e:	6863      	ldr	r3, [r4, #4]
 8005d60:	bf08      	it	eq
 8005d62:	6031      	streq	r1, [r6, #0]
 8005d64:	5162      	str	r2, [r4, r5]
 8005d66:	604b      	str	r3, [r1, #4]
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f104 060b 	add.w	r6, r4, #11
 8005d6e:	f000 f855 	bl	8005e1c <__malloc_unlock>
 8005d72:	f026 0607 	bic.w	r6, r6, #7
 8005d76:	1d23      	adds	r3, r4, #4
 8005d78:	1af2      	subs	r2, r6, r3
 8005d7a:	d0b6      	beq.n	8005cea <_malloc_r+0x22>
 8005d7c:	1b9b      	subs	r3, r3, r6
 8005d7e:	50a3      	str	r3, [r4, r2]
 8005d80:	e7b3      	b.n	8005cea <_malloc_r+0x22>
 8005d82:	6862      	ldr	r2, [r4, #4]
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	bf0c      	ite	eq
 8005d88:	6032      	streq	r2, [r6, #0]
 8005d8a:	605a      	strne	r2, [r3, #4]
 8005d8c:	e7ec      	b.n	8005d68 <_malloc_r+0xa0>
 8005d8e:	4623      	mov	r3, r4
 8005d90:	6864      	ldr	r4, [r4, #4]
 8005d92:	e7b2      	b.n	8005cfa <_malloc_r+0x32>
 8005d94:	4634      	mov	r4, r6
 8005d96:	6876      	ldr	r6, [r6, #4]
 8005d98:	e7b9      	b.n	8005d0e <_malloc_r+0x46>
 8005d9a:	230c      	movs	r3, #12
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f000 f83c 	bl	8005e1c <__malloc_unlock>
 8005da4:	e7a1      	b.n	8005cea <_malloc_r+0x22>
 8005da6:	6025      	str	r5, [r4, #0]
 8005da8:	e7de      	b.n	8005d68 <_malloc_r+0xa0>
 8005daa:	bf00      	nop
 8005dac:	20000bb8 	.word	0x20000bb8

08005db0 <_sbrk_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d06      	ldr	r5, [pc, #24]	; (8005dcc <_sbrk_r+0x1c>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	f7fc f9b2 	bl	8002124 <_sbrk>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_sbrk_r+0x1a>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_sbrk_r+0x1a>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000bc0 	.word	0x20000bc0

08005dd0 <siprintf>:
 8005dd0:	b40e      	push	{r1, r2, r3}
 8005dd2:	b500      	push	{lr}
 8005dd4:	b09c      	sub	sp, #112	; 0x70
 8005dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8005dd8:	9002      	str	r0, [sp, #8]
 8005dda:	9006      	str	r0, [sp, #24]
 8005ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005de0:	4809      	ldr	r0, [pc, #36]	; (8005e08 <siprintf+0x38>)
 8005de2:	9107      	str	r1, [sp, #28]
 8005de4:	9104      	str	r1, [sp, #16]
 8005de6:	4909      	ldr	r1, [pc, #36]	; (8005e0c <siprintf+0x3c>)
 8005de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dec:	9105      	str	r1, [sp, #20]
 8005dee:	6800      	ldr	r0, [r0, #0]
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	a902      	add	r1, sp, #8
 8005df4:	f000 f874 	bl	8005ee0 <_svfiprintf_r>
 8005df8:	9b02      	ldr	r3, [sp, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	b01c      	add	sp, #112	; 0x70
 8005e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e04:	b003      	add	sp, #12
 8005e06:	4770      	bx	lr
 8005e08:	20000018 	.word	0x20000018
 8005e0c:	ffff0208 	.word	0xffff0208

08005e10 <__malloc_lock>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__malloc_lock+0x8>)
 8005e12:	f000 baf9 	b.w	8006408 <__retarget_lock_acquire_recursive>
 8005e16:	bf00      	nop
 8005e18:	20000bc4 	.word	0x20000bc4

08005e1c <__malloc_unlock>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__malloc_unlock+0x8>)
 8005e1e:	f000 baf4 	b.w	800640a <__retarget_lock_release_recursive>
 8005e22:	bf00      	nop
 8005e24:	20000bc4 	.word	0x20000bc4

08005e28 <__ssputs_r>:
 8005e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	688e      	ldr	r6, [r1, #8]
 8005e2e:	429e      	cmp	r6, r3
 8005e30:	4682      	mov	sl, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	4690      	mov	r8, r2
 8005e36:	461f      	mov	r7, r3
 8005e38:	d838      	bhi.n	8005eac <__ssputs_r+0x84>
 8005e3a:	898a      	ldrh	r2, [r1, #12]
 8005e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e40:	d032      	beq.n	8005ea8 <__ssputs_r+0x80>
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	6909      	ldr	r1, [r1, #16]
 8005e46:	eba5 0901 	sub.w	r9, r5, r1
 8005e4a:	6965      	ldr	r5, [r4, #20]
 8005e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e54:	3301      	adds	r3, #1
 8005e56:	444b      	add	r3, r9
 8005e58:	106d      	asrs	r5, r5, #1
 8005e5a:	429d      	cmp	r5, r3
 8005e5c:	bf38      	it	cc
 8005e5e:	461d      	movcc	r5, r3
 8005e60:	0553      	lsls	r3, r2, #21
 8005e62:	d531      	bpl.n	8005ec8 <__ssputs_r+0xa0>
 8005e64:	4629      	mov	r1, r5
 8005e66:	f7ff ff2f 	bl	8005cc8 <_malloc_r>
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	b950      	cbnz	r0, 8005e84 <__ssputs_r+0x5c>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	f8ca 3000 	str.w	r3, [sl]
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	6921      	ldr	r1, [r4, #16]
 8005e86:	464a      	mov	r2, r9
 8005e88:	f7ff fe9c 	bl	8005bc4 <memcpy>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	6126      	str	r6, [r4, #16]
 8005e9a:	6165      	str	r5, [r4, #20]
 8005e9c:	444e      	add	r6, r9
 8005e9e:	eba5 0509 	sub.w	r5, r5, r9
 8005ea2:	6026      	str	r6, [r4, #0]
 8005ea4:	60a5      	str	r5, [r4, #8]
 8005ea6:	463e      	mov	r6, r7
 8005ea8:	42be      	cmp	r6, r7
 8005eaa:	d900      	bls.n	8005eae <__ssputs_r+0x86>
 8005eac:	463e      	mov	r6, r7
 8005eae:	6820      	ldr	r0, [r4, #0]
 8005eb0:	4632      	mov	r2, r6
 8005eb2:	4641      	mov	r1, r8
 8005eb4:	f000 faaa 	bl	800640c <memmove>
 8005eb8:	68a3      	ldr	r3, [r4, #8]
 8005eba:	1b9b      	subs	r3, r3, r6
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	4433      	add	r3, r6
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	e7db      	b.n	8005e80 <__ssputs_r+0x58>
 8005ec8:	462a      	mov	r2, r5
 8005eca:	f000 fab9 	bl	8006440 <_realloc_r>
 8005ece:	4606      	mov	r6, r0
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1e1      	bne.n	8005e98 <__ssputs_r+0x70>
 8005ed4:	6921      	ldr	r1, [r4, #16]
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	f7ff fe8a 	bl	8005bf0 <_free_r>
 8005edc:	e7c7      	b.n	8005e6e <__ssputs_r+0x46>
	...

08005ee0 <_svfiprintf_r>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	4698      	mov	r8, r3
 8005ee6:	898b      	ldrh	r3, [r1, #12]
 8005ee8:	061b      	lsls	r3, r3, #24
 8005eea:	b09d      	sub	sp, #116	; 0x74
 8005eec:	4607      	mov	r7, r0
 8005eee:	460d      	mov	r5, r1
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	d50e      	bpl.n	8005f12 <_svfiprintf_r+0x32>
 8005ef4:	690b      	ldr	r3, [r1, #16]
 8005ef6:	b963      	cbnz	r3, 8005f12 <_svfiprintf_r+0x32>
 8005ef8:	2140      	movs	r1, #64	; 0x40
 8005efa:	f7ff fee5 	bl	8005cc8 <_malloc_r>
 8005efe:	6028      	str	r0, [r5, #0]
 8005f00:	6128      	str	r0, [r5, #16]
 8005f02:	b920      	cbnz	r0, 8005f0e <_svfiprintf_r+0x2e>
 8005f04:	230c      	movs	r3, #12
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f0c:	e0d1      	b.n	80060b2 <_svfiprintf_r+0x1d2>
 8005f0e:	2340      	movs	r3, #64	; 0x40
 8005f10:	616b      	str	r3, [r5, #20]
 8005f12:	2300      	movs	r3, #0
 8005f14:	9309      	str	r3, [sp, #36]	; 0x24
 8005f16:	2320      	movs	r3, #32
 8005f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f20:	2330      	movs	r3, #48	; 0x30
 8005f22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060cc <_svfiprintf_r+0x1ec>
 8005f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f2a:	f04f 0901 	mov.w	r9, #1
 8005f2e:	4623      	mov	r3, r4
 8005f30:	469a      	mov	sl, r3
 8005f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f36:	b10a      	cbz	r2, 8005f3c <_svfiprintf_r+0x5c>
 8005f38:	2a25      	cmp	r2, #37	; 0x25
 8005f3a:	d1f9      	bne.n	8005f30 <_svfiprintf_r+0x50>
 8005f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f40:	d00b      	beq.n	8005f5a <_svfiprintf_r+0x7a>
 8005f42:	465b      	mov	r3, fp
 8005f44:	4622      	mov	r2, r4
 8005f46:	4629      	mov	r1, r5
 8005f48:	4638      	mov	r0, r7
 8005f4a:	f7ff ff6d 	bl	8005e28 <__ssputs_r>
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f000 80aa 	beq.w	80060a8 <_svfiprintf_r+0x1c8>
 8005f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f56:	445a      	add	r2, fp
 8005f58:	9209      	str	r2, [sp, #36]	; 0x24
 8005f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80a2 	beq.w	80060a8 <_svfiprintf_r+0x1c8>
 8005f64:	2300      	movs	r3, #0
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f6e:	f10a 0a01 	add.w	sl, sl, #1
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	9307      	str	r3, [sp, #28]
 8005f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f7c:	4654      	mov	r4, sl
 8005f7e:	2205      	movs	r2, #5
 8005f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f84:	4851      	ldr	r0, [pc, #324]	; (80060cc <_svfiprintf_r+0x1ec>)
 8005f86:	f7fa f92b 	bl	80001e0 <memchr>
 8005f8a:	9a04      	ldr	r2, [sp, #16]
 8005f8c:	b9d8      	cbnz	r0, 8005fc6 <_svfiprintf_r+0xe6>
 8005f8e:	06d0      	lsls	r0, r2, #27
 8005f90:	bf44      	itt	mi
 8005f92:	2320      	movmi	r3, #32
 8005f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f98:	0711      	lsls	r1, r2, #28
 8005f9a:	bf44      	itt	mi
 8005f9c:	232b      	movmi	r3, #43	; 0x2b
 8005f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa8:	d015      	beq.n	8005fd6 <_svfiprintf_r+0xf6>
 8005faa:	9a07      	ldr	r2, [sp, #28]
 8005fac:	4654      	mov	r4, sl
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f04f 0c0a 	mov.w	ip, #10
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fba:	3b30      	subs	r3, #48	; 0x30
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d94e      	bls.n	800605e <_svfiprintf_r+0x17e>
 8005fc0:	b1b0      	cbz	r0, 8005ff0 <_svfiprintf_r+0x110>
 8005fc2:	9207      	str	r2, [sp, #28]
 8005fc4:	e014      	b.n	8005ff0 <_svfiprintf_r+0x110>
 8005fc6:	eba0 0308 	sub.w	r3, r0, r8
 8005fca:	fa09 f303 	lsl.w	r3, r9, r3
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	46a2      	mov	sl, r4
 8005fd4:	e7d2      	b.n	8005f7c <_svfiprintf_r+0x9c>
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	1d19      	adds	r1, r3, #4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	9103      	str	r1, [sp, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bfbb      	ittet	lt
 8005fe2:	425b      	neglt	r3, r3
 8005fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fe8:	9307      	strge	r3, [sp, #28]
 8005fea:	9307      	strlt	r3, [sp, #28]
 8005fec:	bfb8      	it	lt
 8005fee:	9204      	strlt	r2, [sp, #16]
 8005ff0:	7823      	ldrb	r3, [r4, #0]
 8005ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff4:	d10c      	bne.n	8006010 <_svfiprintf_r+0x130>
 8005ff6:	7863      	ldrb	r3, [r4, #1]
 8005ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffa:	d135      	bne.n	8006068 <_svfiprintf_r+0x188>
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	1d1a      	adds	r2, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	9203      	str	r2, [sp, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	bfb8      	it	lt
 8006008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800600c:	3402      	adds	r4, #2
 800600e:	9305      	str	r3, [sp, #20]
 8006010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060dc <_svfiprintf_r+0x1fc>
 8006014:	7821      	ldrb	r1, [r4, #0]
 8006016:	2203      	movs	r2, #3
 8006018:	4650      	mov	r0, sl
 800601a:	f7fa f8e1 	bl	80001e0 <memchr>
 800601e:	b140      	cbz	r0, 8006032 <_svfiprintf_r+0x152>
 8006020:	2340      	movs	r3, #64	; 0x40
 8006022:	eba0 000a 	sub.w	r0, r0, sl
 8006026:	fa03 f000 	lsl.w	r0, r3, r0
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	4303      	orrs	r3, r0
 800602e:	3401      	adds	r4, #1
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006036:	4826      	ldr	r0, [pc, #152]	; (80060d0 <_svfiprintf_r+0x1f0>)
 8006038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800603c:	2206      	movs	r2, #6
 800603e:	f7fa f8cf 	bl	80001e0 <memchr>
 8006042:	2800      	cmp	r0, #0
 8006044:	d038      	beq.n	80060b8 <_svfiprintf_r+0x1d8>
 8006046:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <_svfiprintf_r+0x1f4>)
 8006048:	bb1b      	cbnz	r3, 8006092 <_svfiprintf_r+0x1b2>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	3307      	adds	r3, #7
 800604e:	f023 0307 	bic.w	r3, r3, #7
 8006052:	3308      	adds	r3, #8
 8006054:	9303      	str	r3, [sp, #12]
 8006056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006058:	4433      	add	r3, r6
 800605a:	9309      	str	r3, [sp, #36]	; 0x24
 800605c:	e767      	b.n	8005f2e <_svfiprintf_r+0x4e>
 800605e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006062:	460c      	mov	r4, r1
 8006064:	2001      	movs	r0, #1
 8006066:	e7a5      	b.n	8005fb4 <_svfiprintf_r+0xd4>
 8006068:	2300      	movs	r3, #0
 800606a:	3401      	adds	r4, #1
 800606c:	9305      	str	r3, [sp, #20]
 800606e:	4619      	mov	r1, r3
 8006070:	f04f 0c0a 	mov.w	ip, #10
 8006074:	4620      	mov	r0, r4
 8006076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800607a:	3a30      	subs	r2, #48	; 0x30
 800607c:	2a09      	cmp	r2, #9
 800607e:	d903      	bls.n	8006088 <_svfiprintf_r+0x1a8>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0c5      	beq.n	8006010 <_svfiprintf_r+0x130>
 8006084:	9105      	str	r1, [sp, #20]
 8006086:	e7c3      	b.n	8006010 <_svfiprintf_r+0x130>
 8006088:	fb0c 2101 	mla	r1, ip, r1, r2
 800608c:	4604      	mov	r4, r0
 800608e:	2301      	movs	r3, #1
 8006090:	e7f0      	b.n	8006074 <_svfiprintf_r+0x194>
 8006092:	ab03      	add	r3, sp, #12
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	462a      	mov	r2, r5
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <_svfiprintf_r+0x1f8>)
 800609a:	a904      	add	r1, sp, #16
 800609c:	4638      	mov	r0, r7
 800609e:	f3af 8000 	nop.w
 80060a2:	1c42      	adds	r2, r0, #1
 80060a4:	4606      	mov	r6, r0
 80060a6:	d1d6      	bne.n	8006056 <_svfiprintf_r+0x176>
 80060a8:	89ab      	ldrh	r3, [r5, #12]
 80060aa:	065b      	lsls	r3, r3, #25
 80060ac:	f53f af2c 	bmi.w	8005f08 <_svfiprintf_r+0x28>
 80060b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060b2:	b01d      	add	sp, #116	; 0x74
 80060b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b8:	ab03      	add	r3, sp, #12
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	462a      	mov	r2, r5
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <_svfiprintf_r+0x1f8>)
 80060c0:	a904      	add	r1, sp, #16
 80060c2:	4638      	mov	r0, r7
 80060c4:	f000 f87a 	bl	80061bc <_printf_i>
 80060c8:	e7eb      	b.n	80060a2 <_svfiprintf_r+0x1c2>
 80060ca:	bf00      	nop
 80060cc:	0800734c 	.word	0x0800734c
 80060d0:	08007356 	.word	0x08007356
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e29 	.word	0x08005e29
 80060dc:	08007352 	.word	0x08007352

080060e0 <_printf_common>:
 80060e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	4616      	mov	r6, r2
 80060e6:	4699      	mov	r9, r3
 80060e8:	688a      	ldr	r2, [r1, #8]
 80060ea:	690b      	ldr	r3, [r1, #16]
 80060ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	bfb8      	it	lt
 80060f4:	4613      	movlt	r3, r2
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060fc:	4607      	mov	r7, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	b10a      	cbz	r2, 8006106 <_printf_common+0x26>
 8006102:	3301      	adds	r3, #1
 8006104:	6033      	str	r3, [r6, #0]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	0699      	lsls	r1, r3, #26
 800610a:	bf42      	ittt	mi
 800610c:	6833      	ldrmi	r3, [r6, #0]
 800610e:	3302      	addmi	r3, #2
 8006110:	6033      	strmi	r3, [r6, #0]
 8006112:	6825      	ldr	r5, [r4, #0]
 8006114:	f015 0506 	ands.w	r5, r5, #6
 8006118:	d106      	bne.n	8006128 <_printf_common+0x48>
 800611a:	f104 0a19 	add.w	sl, r4, #25
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	6832      	ldr	r2, [r6, #0]
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	42ab      	cmp	r3, r5
 8006126:	dc26      	bgt.n	8006176 <_printf_common+0x96>
 8006128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800612c:	1e13      	subs	r3, r2, #0
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	bf18      	it	ne
 8006132:	2301      	movne	r3, #1
 8006134:	0692      	lsls	r2, r2, #26
 8006136:	d42b      	bmi.n	8006190 <_printf_common+0xb0>
 8006138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800613c:	4649      	mov	r1, r9
 800613e:	4638      	mov	r0, r7
 8006140:	47c0      	blx	r8
 8006142:	3001      	adds	r0, #1
 8006144:	d01e      	beq.n	8006184 <_printf_common+0xa4>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	68e5      	ldr	r5, [r4, #12]
 800614a:	6832      	ldr	r2, [r6, #0]
 800614c:	f003 0306 	and.w	r3, r3, #6
 8006150:	2b04      	cmp	r3, #4
 8006152:	bf08      	it	eq
 8006154:	1aad      	subeq	r5, r5, r2
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	6922      	ldr	r2, [r4, #16]
 800615a:	bf0c      	ite	eq
 800615c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006160:	2500      	movne	r5, #0
 8006162:	4293      	cmp	r3, r2
 8006164:	bfc4      	itt	gt
 8006166:	1a9b      	subgt	r3, r3, r2
 8006168:	18ed      	addgt	r5, r5, r3
 800616a:	2600      	movs	r6, #0
 800616c:	341a      	adds	r4, #26
 800616e:	42b5      	cmp	r5, r6
 8006170:	d11a      	bne.n	80061a8 <_printf_common+0xc8>
 8006172:	2000      	movs	r0, #0
 8006174:	e008      	b.n	8006188 <_printf_common+0xa8>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4649      	mov	r1, r9
 800617c:	4638      	mov	r0, r7
 800617e:	47c0      	blx	r8
 8006180:	3001      	adds	r0, #1
 8006182:	d103      	bne.n	800618c <_printf_common+0xac>
 8006184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618c:	3501      	adds	r5, #1
 800618e:	e7c6      	b.n	800611e <_printf_common+0x3e>
 8006190:	18e1      	adds	r1, r4, r3
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	2030      	movs	r0, #48	; 0x30
 8006196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800619a:	4422      	add	r2, r4
 800619c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061a4:	3302      	adds	r3, #2
 80061a6:	e7c7      	b.n	8006138 <_printf_common+0x58>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4622      	mov	r2, r4
 80061ac:	4649      	mov	r1, r9
 80061ae:	4638      	mov	r0, r7
 80061b0:	47c0      	blx	r8
 80061b2:	3001      	adds	r0, #1
 80061b4:	d0e6      	beq.n	8006184 <_printf_common+0xa4>
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7d9      	b.n	800616e <_printf_common+0x8e>
	...

080061bc <_printf_i>:
 80061bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	7e0f      	ldrb	r7, [r1, #24]
 80061c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061c4:	2f78      	cmp	r7, #120	; 0x78
 80061c6:	4691      	mov	r9, r2
 80061c8:	4680      	mov	r8, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	469a      	mov	sl, r3
 80061ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061d2:	d807      	bhi.n	80061e4 <_printf_i+0x28>
 80061d4:	2f62      	cmp	r7, #98	; 0x62
 80061d6:	d80a      	bhi.n	80061ee <_printf_i+0x32>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	f000 80d8 	beq.w	800638e <_printf_i+0x1d2>
 80061de:	2f58      	cmp	r7, #88	; 0x58
 80061e0:	f000 80a3 	beq.w	800632a <_printf_i+0x16e>
 80061e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061ec:	e03a      	b.n	8006264 <_printf_i+0xa8>
 80061ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061f2:	2b15      	cmp	r3, #21
 80061f4:	d8f6      	bhi.n	80061e4 <_printf_i+0x28>
 80061f6:	a101      	add	r1, pc, #4	; (adr r1, 80061fc <_printf_i+0x40>)
 80061f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006269 	.word	0x08006269
 8006204:	080061e5 	.word	0x080061e5
 8006208:	080061e5 	.word	0x080061e5
 800620c:	080061e5 	.word	0x080061e5
 8006210:	080061e5 	.word	0x080061e5
 8006214:	08006269 	.word	0x08006269
 8006218:	080061e5 	.word	0x080061e5
 800621c:	080061e5 	.word	0x080061e5
 8006220:	080061e5 	.word	0x080061e5
 8006224:	080061e5 	.word	0x080061e5
 8006228:	08006375 	.word	0x08006375
 800622c:	08006299 	.word	0x08006299
 8006230:	08006357 	.word	0x08006357
 8006234:	080061e5 	.word	0x080061e5
 8006238:	080061e5 	.word	0x080061e5
 800623c:	08006397 	.word	0x08006397
 8006240:	080061e5 	.word	0x080061e5
 8006244:	08006299 	.word	0x08006299
 8006248:	080061e5 	.word	0x080061e5
 800624c:	080061e5 	.word	0x080061e5
 8006250:	0800635f 	.word	0x0800635f
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	602a      	str	r2, [r5, #0]
 800625c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006264:	2301      	movs	r3, #1
 8006266:	e0a3      	b.n	80063b0 <_printf_i+0x1f4>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	6829      	ldr	r1, [r5, #0]
 800626c:	0606      	lsls	r6, r0, #24
 800626e:	f101 0304 	add.w	r3, r1, #4
 8006272:	d50a      	bpl.n	800628a <_printf_i+0xce>
 8006274:	680e      	ldr	r6, [r1, #0]
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	2e00      	cmp	r6, #0
 800627a:	da03      	bge.n	8006284 <_printf_i+0xc8>
 800627c:	232d      	movs	r3, #45	; 0x2d
 800627e:	4276      	negs	r6, r6
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006284:	485e      	ldr	r0, [pc, #376]	; (8006400 <_printf_i+0x244>)
 8006286:	230a      	movs	r3, #10
 8006288:	e019      	b.n	80062be <_printf_i+0x102>
 800628a:	680e      	ldr	r6, [r1, #0]
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006292:	bf18      	it	ne
 8006294:	b236      	sxthne	r6, r6
 8006296:	e7ef      	b.n	8006278 <_printf_i+0xbc>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	1d19      	adds	r1, r3, #4
 800629e:	6029      	str	r1, [r5, #0]
 80062a0:	0601      	lsls	r1, r0, #24
 80062a2:	d501      	bpl.n	80062a8 <_printf_i+0xec>
 80062a4:	681e      	ldr	r6, [r3, #0]
 80062a6:	e002      	b.n	80062ae <_printf_i+0xf2>
 80062a8:	0646      	lsls	r6, r0, #25
 80062aa:	d5fb      	bpl.n	80062a4 <_printf_i+0xe8>
 80062ac:	881e      	ldrh	r6, [r3, #0]
 80062ae:	4854      	ldr	r0, [pc, #336]	; (8006400 <_printf_i+0x244>)
 80062b0:	2f6f      	cmp	r7, #111	; 0x6f
 80062b2:	bf0c      	ite	eq
 80062b4:	2308      	moveq	r3, #8
 80062b6:	230a      	movne	r3, #10
 80062b8:	2100      	movs	r1, #0
 80062ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062be:	6865      	ldr	r5, [r4, #4]
 80062c0:	60a5      	str	r5, [r4, #8]
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	bfa2      	ittt	ge
 80062c6:	6821      	ldrge	r1, [r4, #0]
 80062c8:	f021 0104 	bicge.w	r1, r1, #4
 80062cc:	6021      	strge	r1, [r4, #0]
 80062ce:	b90e      	cbnz	r6, 80062d4 <_printf_i+0x118>
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d04d      	beq.n	8006370 <_printf_i+0x1b4>
 80062d4:	4615      	mov	r5, r2
 80062d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80062da:	fb03 6711 	mls	r7, r3, r1, r6
 80062de:	5dc7      	ldrb	r7, [r0, r7]
 80062e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062e4:	4637      	mov	r7, r6
 80062e6:	42bb      	cmp	r3, r7
 80062e8:	460e      	mov	r6, r1
 80062ea:	d9f4      	bls.n	80062d6 <_printf_i+0x11a>
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d10b      	bne.n	8006308 <_printf_i+0x14c>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	07de      	lsls	r6, r3, #31
 80062f4:	d508      	bpl.n	8006308 <_printf_i+0x14c>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	6861      	ldr	r1, [r4, #4]
 80062fa:	4299      	cmp	r1, r3
 80062fc:	bfde      	ittt	le
 80062fe:	2330      	movle	r3, #48	; 0x30
 8006300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006304:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006308:	1b52      	subs	r2, r2, r5
 800630a:	6122      	str	r2, [r4, #16]
 800630c:	f8cd a000 	str.w	sl, [sp]
 8006310:	464b      	mov	r3, r9
 8006312:	aa03      	add	r2, sp, #12
 8006314:	4621      	mov	r1, r4
 8006316:	4640      	mov	r0, r8
 8006318:	f7ff fee2 	bl	80060e0 <_printf_common>
 800631c:	3001      	adds	r0, #1
 800631e:	d14c      	bne.n	80063ba <_printf_i+0x1fe>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006324:	b004      	add	sp, #16
 8006326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800632a:	4835      	ldr	r0, [pc, #212]	; (8006400 <_printf_i+0x244>)
 800632c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006330:	6829      	ldr	r1, [r5, #0]
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	f851 6b04 	ldr.w	r6, [r1], #4
 8006338:	6029      	str	r1, [r5, #0]
 800633a:	061d      	lsls	r5, r3, #24
 800633c:	d514      	bpl.n	8006368 <_printf_i+0x1ac>
 800633e:	07df      	lsls	r7, r3, #31
 8006340:	bf44      	itt	mi
 8006342:	f043 0320 	orrmi.w	r3, r3, #32
 8006346:	6023      	strmi	r3, [r4, #0]
 8006348:	b91e      	cbnz	r6, 8006352 <_printf_i+0x196>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f023 0320 	bic.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	2310      	movs	r3, #16
 8006354:	e7b0      	b.n	80062b8 <_printf_i+0xfc>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	f043 0320 	orr.w	r3, r3, #32
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	2378      	movs	r3, #120	; 0x78
 8006360:	4828      	ldr	r0, [pc, #160]	; (8006404 <_printf_i+0x248>)
 8006362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006366:	e7e3      	b.n	8006330 <_printf_i+0x174>
 8006368:	0659      	lsls	r1, r3, #25
 800636a:	bf48      	it	mi
 800636c:	b2b6      	uxthmi	r6, r6
 800636e:	e7e6      	b.n	800633e <_printf_i+0x182>
 8006370:	4615      	mov	r5, r2
 8006372:	e7bb      	b.n	80062ec <_printf_i+0x130>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	6826      	ldr	r6, [r4, #0]
 8006378:	6961      	ldr	r1, [r4, #20]
 800637a:	1d18      	adds	r0, r3, #4
 800637c:	6028      	str	r0, [r5, #0]
 800637e:	0635      	lsls	r5, r6, #24
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	d501      	bpl.n	8006388 <_printf_i+0x1cc>
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	e002      	b.n	800638e <_printf_i+0x1d2>
 8006388:	0670      	lsls	r0, r6, #25
 800638a:	d5fb      	bpl.n	8006384 <_printf_i+0x1c8>
 800638c:	8019      	strh	r1, [r3, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	6123      	str	r3, [r4, #16]
 8006392:	4615      	mov	r5, r2
 8006394:	e7ba      	b.n	800630c <_printf_i+0x150>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	602a      	str	r2, [r5, #0]
 800639c:	681d      	ldr	r5, [r3, #0]
 800639e:	6862      	ldr	r2, [r4, #4]
 80063a0:	2100      	movs	r1, #0
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7f9 ff1c 	bl	80001e0 <memchr>
 80063a8:	b108      	cbz	r0, 80063ae <_printf_i+0x1f2>
 80063aa:	1b40      	subs	r0, r0, r5
 80063ac:	6060      	str	r0, [r4, #4]
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	2300      	movs	r3, #0
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b8:	e7a8      	b.n	800630c <_printf_i+0x150>
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	462a      	mov	r2, r5
 80063be:	4649      	mov	r1, r9
 80063c0:	4640      	mov	r0, r8
 80063c2:	47d0      	blx	sl
 80063c4:	3001      	adds	r0, #1
 80063c6:	d0ab      	beq.n	8006320 <_printf_i+0x164>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	079b      	lsls	r3, r3, #30
 80063cc:	d413      	bmi.n	80063f6 <_printf_i+0x23a>
 80063ce:	68e0      	ldr	r0, [r4, #12]
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	4298      	cmp	r0, r3
 80063d4:	bfb8      	it	lt
 80063d6:	4618      	movlt	r0, r3
 80063d8:	e7a4      	b.n	8006324 <_printf_i+0x168>
 80063da:	2301      	movs	r3, #1
 80063dc:	4632      	mov	r2, r6
 80063de:	4649      	mov	r1, r9
 80063e0:	4640      	mov	r0, r8
 80063e2:	47d0      	blx	sl
 80063e4:	3001      	adds	r0, #1
 80063e6:	d09b      	beq.n	8006320 <_printf_i+0x164>
 80063e8:	3501      	adds	r5, #1
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	9903      	ldr	r1, [sp, #12]
 80063ee:	1a5b      	subs	r3, r3, r1
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	dcf2      	bgt.n	80063da <_printf_i+0x21e>
 80063f4:	e7eb      	b.n	80063ce <_printf_i+0x212>
 80063f6:	2500      	movs	r5, #0
 80063f8:	f104 0619 	add.w	r6, r4, #25
 80063fc:	e7f5      	b.n	80063ea <_printf_i+0x22e>
 80063fe:	bf00      	nop
 8006400:	0800735d 	.word	0x0800735d
 8006404:	0800736e 	.word	0x0800736e

08006408 <__retarget_lock_acquire_recursive>:
 8006408:	4770      	bx	lr

0800640a <__retarget_lock_release_recursive>:
 800640a:	4770      	bx	lr

0800640c <memmove>:
 800640c:	4288      	cmp	r0, r1
 800640e:	b510      	push	{r4, lr}
 8006410:	eb01 0402 	add.w	r4, r1, r2
 8006414:	d902      	bls.n	800641c <memmove+0x10>
 8006416:	4284      	cmp	r4, r0
 8006418:	4623      	mov	r3, r4
 800641a:	d807      	bhi.n	800642c <memmove+0x20>
 800641c:	1e43      	subs	r3, r0, #1
 800641e:	42a1      	cmp	r1, r4
 8006420:	d008      	beq.n	8006434 <memmove+0x28>
 8006422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800642a:	e7f8      	b.n	800641e <memmove+0x12>
 800642c:	4402      	add	r2, r0
 800642e:	4601      	mov	r1, r0
 8006430:	428a      	cmp	r2, r1
 8006432:	d100      	bne.n	8006436 <memmove+0x2a>
 8006434:	bd10      	pop	{r4, pc}
 8006436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800643a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800643e:	e7f7      	b.n	8006430 <memmove+0x24>

08006440 <_realloc_r>:
 8006440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	4680      	mov	r8, r0
 8006446:	4614      	mov	r4, r2
 8006448:	460e      	mov	r6, r1
 800644a:	b921      	cbnz	r1, 8006456 <_realloc_r+0x16>
 800644c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006450:	4611      	mov	r1, r2
 8006452:	f7ff bc39 	b.w	8005cc8 <_malloc_r>
 8006456:	b92a      	cbnz	r2, 8006464 <_realloc_r+0x24>
 8006458:	f7ff fbca 	bl	8005bf0 <_free_r>
 800645c:	4625      	mov	r5, r4
 800645e:	4628      	mov	r0, r5
 8006460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006464:	f000 f81b 	bl	800649e <_malloc_usable_size_r>
 8006468:	4284      	cmp	r4, r0
 800646a:	4607      	mov	r7, r0
 800646c:	d802      	bhi.n	8006474 <_realloc_r+0x34>
 800646e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006472:	d812      	bhi.n	800649a <_realloc_r+0x5a>
 8006474:	4621      	mov	r1, r4
 8006476:	4640      	mov	r0, r8
 8006478:	f7ff fc26 	bl	8005cc8 <_malloc_r>
 800647c:	4605      	mov	r5, r0
 800647e:	2800      	cmp	r0, #0
 8006480:	d0ed      	beq.n	800645e <_realloc_r+0x1e>
 8006482:	42bc      	cmp	r4, r7
 8006484:	4622      	mov	r2, r4
 8006486:	4631      	mov	r1, r6
 8006488:	bf28      	it	cs
 800648a:	463a      	movcs	r2, r7
 800648c:	f7ff fb9a 	bl	8005bc4 <memcpy>
 8006490:	4631      	mov	r1, r6
 8006492:	4640      	mov	r0, r8
 8006494:	f7ff fbac 	bl	8005bf0 <_free_r>
 8006498:	e7e1      	b.n	800645e <_realloc_r+0x1e>
 800649a:	4635      	mov	r5, r6
 800649c:	e7df      	b.n	800645e <_realloc_r+0x1e>

0800649e <_malloc_usable_size_r>:
 800649e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a2:	1f18      	subs	r0, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bfbc      	itt	lt
 80064a8:	580b      	ldrlt	r3, [r1, r0]
 80064aa:	18c0      	addlt	r0, r0, r3
 80064ac:	4770      	bx	lr
	...

080064b0 <pow>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	ed2d 8b02 	vpush	{d8}
 80064b6:	eeb0 8a40 	vmov.f32	s16, s0
 80064ba:	eef0 8a60 	vmov.f32	s17, s1
 80064be:	ec55 4b11 	vmov	r4, r5, d1
 80064c2:	f000 f865 	bl	8006590 <__ieee754_pow>
 80064c6:	4622      	mov	r2, r4
 80064c8:	462b      	mov	r3, r5
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	ec57 6b10 	vmov	r6, r7, d0
 80064d2:	f7fa fb2b 	bl	8000b2c <__aeabi_dcmpun>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d13b      	bne.n	8006552 <pow+0xa2>
 80064da:	ec51 0b18 	vmov	r0, r1, d8
 80064de:	2200      	movs	r2, #0
 80064e0:	2300      	movs	r3, #0
 80064e2:	f7fa faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80064e6:	b1b8      	cbz	r0, 8006518 <pow+0x68>
 80064e8:	2200      	movs	r2, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7fa faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d146      	bne.n	8006586 <pow+0xd6>
 80064f8:	ec45 4b10 	vmov	d0, r4, r5
 80064fc:	f000 fe61 	bl	80071c2 <finite>
 8006500:	b338      	cbz	r0, 8006552 <pow+0xa2>
 8006502:	2200      	movs	r2, #0
 8006504:	2300      	movs	r3, #0
 8006506:	4620      	mov	r0, r4
 8006508:	4629      	mov	r1, r5
 800650a:	f7fa fae7 	bl	8000adc <__aeabi_dcmplt>
 800650e:	b300      	cbz	r0, 8006552 <pow+0xa2>
 8006510:	f7ff fb1e 	bl	8005b50 <__errno>
 8006514:	2322      	movs	r3, #34	; 0x22
 8006516:	e01b      	b.n	8006550 <pow+0xa0>
 8006518:	ec47 6b10 	vmov	d0, r6, r7
 800651c:	f000 fe51 	bl	80071c2 <finite>
 8006520:	b9e0      	cbnz	r0, 800655c <pow+0xac>
 8006522:	eeb0 0a48 	vmov.f32	s0, s16
 8006526:	eef0 0a68 	vmov.f32	s1, s17
 800652a:	f000 fe4a 	bl	80071c2 <finite>
 800652e:	b1a8      	cbz	r0, 800655c <pow+0xac>
 8006530:	ec45 4b10 	vmov	d0, r4, r5
 8006534:	f000 fe45 	bl	80071c2 <finite>
 8006538:	b180      	cbz	r0, 800655c <pow+0xac>
 800653a:	4632      	mov	r2, r6
 800653c:	463b      	mov	r3, r7
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa faf3 	bl	8000b2c <__aeabi_dcmpun>
 8006546:	2800      	cmp	r0, #0
 8006548:	d0e2      	beq.n	8006510 <pow+0x60>
 800654a:	f7ff fb01 	bl	8005b50 <__errno>
 800654e:	2321      	movs	r3, #33	; 0x21
 8006550:	6003      	str	r3, [r0, #0]
 8006552:	ecbd 8b02 	vpop	{d8}
 8006556:	ec47 6b10 	vmov	d0, r6, r7
 800655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7fa fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006568:	2800      	cmp	r0, #0
 800656a:	d0f2      	beq.n	8006552 <pow+0xa2>
 800656c:	eeb0 0a48 	vmov.f32	s0, s16
 8006570:	eef0 0a68 	vmov.f32	s1, s17
 8006574:	f000 fe25 	bl	80071c2 <finite>
 8006578:	2800      	cmp	r0, #0
 800657a:	d0ea      	beq.n	8006552 <pow+0xa2>
 800657c:	ec45 4b10 	vmov	d0, r4, r5
 8006580:	f000 fe1f 	bl	80071c2 <finite>
 8006584:	e7c3      	b.n	800650e <pow+0x5e>
 8006586:	4f01      	ldr	r7, [pc, #4]	; (800658c <pow+0xdc>)
 8006588:	2600      	movs	r6, #0
 800658a:	e7e2      	b.n	8006552 <pow+0xa2>
 800658c:	3ff00000 	.word	0x3ff00000

08006590 <__ieee754_pow>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b06 	vpush	{d8-d10}
 8006598:	b089      	sub	sp, #36	; 0x24
 800659a:	ed8d 1b00 	vstr	d1, [sp]
 800659e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80065a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80065a6:	ea58 0102 	orrs.w	r1, r8, r2
 80065aa:	ec57 6b10 	vmov	r6, r7, d0
 80065ae:	d115      	bne.n	80065dc <__ieee754_pow+0x4c>
 80065b0:	19b3      	adds	r3, r6, r6
 80065b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80065b6:	4152      	adcs	r2, r2
 80065b8:	4299      	cmp	r1, r3
 80065ba:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <__ieee754_pow+0x250>)
 80065bc:	4193      	sbcs	r3, r2
 80065be:	f080 84d2 	bcs.w	8006f66 <__ieee754_pow+0x9d6>
 80065c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065c6:	4630      	mov	r0, r6
 80065c8:	4639      	mov	r1, r7
 80065ca:	f7f9 fe5f 	bl	800028c <__adddf3>
 80065ce:	ec41 0b10 	vmov	d0, r0, r1
 80065d2:	b009      	add	sp, #36	; 0x24
 80065d4:	ecbd 8b06 	vpop	{d8-d10}
 80065d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065dc:	4b81      	ldr	r3, [pc, #516]	; (80067e4 <__ieee754_pow+0x254>)
 80065de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80065e2:	429c      	cmp	r4, r3
 80065e4:	ee10 aa10 	vmov	sl, s0
 80065e8:	463d      	mov	r5, r7
 80065ea:	dc06      	bgt.n	80065fa <__ieee754_pow+0x6a>
 80065ec:	d101      	bne.n	80065f2 <__ieee754_pow+0x62>
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	d1e7      	bne.n	80065c2 <__ieee754_pow+0x32>
 80065f2:	4598      	cmp	r8, r3
 80065f4:	dc01      	bgt.n	80065fa <__ieee754_pow+0x6a>
 80065f6:	d10f      	bne.n	8006618 <__ieee754_pow+0x88>
 80065f8:	b172      	cbz	r2, 8006618 <__ieee754_pow+0x88>
 80065fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80065fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006602:	ea55 050a 	orrs.w	r5, r5, sl
 8006606:	d1dc      	bne.n	80065c2 <__ieee754_pow+0x32>
 8006608:	e9dd 3200 	ldrd	r3, r2, [sp]
 800660c:	18db      	adds	r3, r3, r3
 800660e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006612:	4152      	adcs	r2, r2
 8006614:	429d      	cmp	r5, r3
 8006616:	e7d0      	b.n	80065ba <__ieee754_pow+0x2a>
 8006618:	2d00      	cmp	r5, #0
 800661a:	da3b      	bge.n	8006694 <__ieee754_pow+0x104>
 800661c:	4b72      	ldr	r3, [pc, #456]	; (80067e8 <__ieee754_pow+0x258>)
 800661e:	4598      	cmp	r8, r3
 8006620:	dc51      	bgt.n	80066c6 <__ieee754_pow+0x136>
 8006622:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006626:	4598      	cmp	r8, r3
 8006628:	f340 84ac 	ble.w	8006f84 <__ieee754_pow+0x9f4>
 800662c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006630:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006634:	2b14      	cmp	r3, #20
 8006636:	dd0f      	ble.n	8006658 <__ieee754_pow+0xc8>
 8006638:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800663c:	fa22 f103 	lsr.w	r1, r2, r3
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	4293      	cmp	r3, r2
 8006646:	f040 849d 	bne.w	8006f84 <__ieee754_pow+0x9f4>
 800664a:	f001 0101 	and.w	r1, r1, #1
 800664e:	f1c1 0302 	rsb	r3, r1, #2
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	b182      	cbz	r2, 8006678 <__ieee754_pow+0xe8>
 8006656:	e05f      	b.n	8006718 <__ieee754_pow+0x188>
 8006658:	2a00      	cmp	r2, #0
 800665a:	d15b      	bne.n	8006714 <__ieee754_pow+0x184>
 800665c:	f1c3 0314 	rsb	r3, r3, #20
 8006660:	fa48 f103 	asr.w	r1, r8, r3
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	4543      	cmp	r3, r8
 800666a:	f040 8488 	bne.w	8006f7e <__ieee754_pow+0x9ee>
 800666e:	f001 0101 	and.w	r1, r1, #1
 8006672:	f1c1 0302 	rsb	r3, r1, #2
 8006676:	9304      	str	r3, [sp, #16]
 8006678:	4b5c      	ldr	r3, [pc, #368]	; (80067ec <__ieee754_pow+0x25c>)
 800667a:	4598      	cmp	r8, r3
 800667c:	d132      	bne.n	80066e4 <__ieee754_pow+0x154>
 800667e:	f1b9 0f00 	cmp.w	r9, #0
 8006682:	f280 8478 	bge.w	8006f76 <__ieee754_pow+0x9e6>
 8006686:	4959      	ldr	r1, [pc, #356]	; (80067ec <__ieee754_pow+0x25c>)
 8006688:	4632      	mov	r2, r6
 800668a:	463b      	mov	r3, r7
 800668c:	2000      	movs	r0, #0
 800668e:	f7fa f8dd 	bl	800084c <__aeabi_ddiv>
 8006692:	e79c      	b.n	80065ce <__ieee754_pow+0x3e>
 8006694:	2300      	movs	r3, #0
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	2a00      	cmp	r2, #0
 800669a:	d13d      	bne.n	8006718 <__ieee754_pow+0x188>
 800669c:	4b51      	ldr	r3, [pc, #324]	; (80067e4 <__ieee754_pow+0x254>)
 800669e:	4598      	cmp	r8, r3
 80066a0:	d1ea      	bne.n	8006678 <__ieee754_pow+0xe8>
 80066a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80066a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80066aa:	ea53 030a 	orrs.w	r3, r3, sl
 80066ae:	f000 845a 	beq.w	8006f66 <__ieee754_pow+0x9d6>
 80066b2:	4b4f      	ldr	r3, [pc, #316]	; (80067f0 <__ieee754_pow+0x260>)
 80066b4:	429c      	cmp	r4, r3
 80066b6:	dd08      	ble.n	80066ca <__ieee754_pow+0x13a>
 80066b8:	f1b9 0f00 	cmp.w	r9, #0
 80066bc:	f2c0 8457 	blt.w	8006f6e <__ieee754_pow+0x9de>
 80066c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c4:	e783      	b.n	80065ce <__ieee754_pow+0x3e>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e7e5      	b.n	8006696 <__ieee754_pow+0x106>
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	f04f 0000 	mov.w	r0, #0
 80066d2:	f04f 0100 	mov.w	r1, #0
 80066d6:	f6bf af7a 	bge.w	80065ce <__ieee754_pow+0x3e>
 80066da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80066de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066e2:	e774      	b.n	80065ce <__ieee754_pow+0x3e>
 80066e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80066e8:	d106      	bne.n	80066f8 <__ieee754_pow+0x168>
 80066ea:	4632      	mov	r2, r6
 80066ec:	463b      	mov	r3, r7
 80066ee:	4630      	mov	r0, r6
 80066f0:	4639      	mov	r1, r7
 80066f2:	f7f9 ff81 	bl	80005f8 <__aeabi_dmul>
 80066f6:	e76a      	b.n	80065ce <__ieee754_pow+0x3e>
 80066f8:	4b3e      	ldr	r3, [pc, #248]	; (80067f4 <__ieee754_pow+0x264>)
 80066fa:	4599      	cmp	r9, r3
 80066fc:	d10c      	bne.n	8006718 <__ieee754_pow+0x188>
 80066fe:	2d00      	cmp	r5, #0
 8006700:	db0a      	blt.n	8006718 <__ieee754_pow+0x188>
 8006702:	ec47 6b10 	vmov	d0, r6, r7
 8006706:	b009      	add	sp, #36	; 0x24
 8006708:	ecbd 8b06 	vpop	{d8-d10}
 800670c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	f000 bc6c 	b.w	8006fec <__ieee754_sqrt>
 8006714:	2300      	movs	r3, #0
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	ec47 6b10 	vmov	d0, r6, r7
 800671c:	f000 fd48 	bl	80071b0 <fabs>
 8006720:	ec51 0b10 	vmov	r0, r1, d0
 8006724:	f1ba 0f00 	cmp.w	sl, #0
 8006728:	d129      	bne.n	800677e <__ieee754_pow+0x1ee>
 800672a:	b124      	cbz	r4, 8006736 <__ieee754_pow+0x1a6>
 800672c:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <__ieee754_pow+0x25c>)
 800672e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006732:	429a      	cmp	r2, r3
 8006734:	d123      	bne.n	800677e <__ieee754_pow+0x1ee>
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	da05      	bge.n	8006748 <__ieee754_pow+0x1b8>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	2000      	movs	r0, #0
 8006742:	492a      	ldr	r1, [pc, #168]	; (80067ec <__ieee754_pow+0x25c>)
 8006744:	f7fa f882 	bl	800084c <__aeabi_ddiv>
 8006748:	2d00      	cmp	r5, #0
 800674a:	f6bf af40 	bge.w	80065ce <__ieee754_pow+0x3e>
 800674e:	9b04      	ldr	r3, [sp, #16]
 8006750:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006754:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006758:	4323      	orrs	r3, r4
 800675a:	d108      	bne.n	800676e <__ieee754_pow+0x1de>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	f7f9 fd90 	bl	8000288 <__aeabi_dsub>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	e78f      	b.n	800668e <__ieee754_pow+0xfe>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	2b01      	cmp	r3, #1
 8006772:	f47f af2c 	bne.w	80065ce <__ieee754_pow+0x3e>
 8006776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800677a:	4619      	mov	r1, r3
 800677c:	e727      	b.n	80065ce <__ieee754_pow+0x3e>
 800677e:	0feb      	lsrs	r3, r5, #31
 8006780:	3b01      	subs	r3, #1
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	9a06      	ldr	r2, [sp, #24]
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	d102      	bne.n	8006792 <__ieee754_pow+0x202>
 800678c:	4632      	mov	r2, r6
 800678e:	463b      	mov	r3, r7
 8006790:	e7e6      	b.n	8006760 <__ieee754_pow+0x1d0>
 8006792:	4b19      	ldr	r3, [pc, #100]	; (80067f8 <__ieee754_pow+0x268>)
 8006794:	4598      	cmp	r8, r3
 8006796:	f340 80fb 	ble.w	8006990 <__ieee754_pow+0x400>
 800679a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800679e:	4598      	cmp	r8, r3
 80067a0:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <__ieee754_pow+0x260>)
 80067a2:	dd0c      	ble.n	80067be <__ieee754_pow+0x22e>
 80067a4:	429c      	cmp	r4, r3
 80067a6:	dc0f      	bgt.n	80067c8 <__ieee754_pow+0x238>
 80067a8:	f1b9 0f00 	cmp.w	r9, #0
 80067ac:	da0f      	bge.n	80067ce <__ieee754_pow+0x23e>
 80067ae:	2000      	movs	r0, #0
 80067b0:	b009      	add	sp, #36	; 0x24
 80067b2:	ecbd 8b06 	vpop	{d8-d10}
 80067b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	f000 bcf0 	b.w	800719e <__math_oflow>
 80067be:	429c      	cmp	r4, r3
 80067c0:	dbf2      	blt.n	80067a8 <__ieee754_pow+0x218>
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <__ieee754_pow+0x25c>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	dd19      	ble.n	80067fc <__ieee754_pow+0x26c>
 80067c8:	f1b9 0f00 	cmp.w	r9, #0
 80067cc:	dcef      	bgt.n	80067ae <__ieee754_pow+0x21e>
 80067ce:	2000      	movs	r0, #0
 80067d0:	b009      	add	sp, #36	; 0x24
 80067d2:	ecbd 8b06 	vpop	{d8-d10}
 80067d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	f000 bcd7 	b.w	800718c <__math_uflow>
 80067de:	bf00      	nop
 80067e0:	fff00000 	.word	0xfff00000
 80067e4:	7ff00000 	.word	0x7ff00000
 80067e8:	433fffff 	.word	0x433fffff
 80067ec:	3ff00000 	.word	0x3ff00000
 80067f0:	3fefffff 	.word	0x3fefffff
 80067f4:	3fe00000 	.word	0x3fe00000
 80067f8:	41e00000 	.word	0x41e00000
 80067fc:	4b60      	ldr	r3, [pc, #384]	; (8006980 <__ieee754_pow+0x3f0>)
 80067fe:	2200      	movs	r2, #0
 8006800:	f7f9 fd42 	bl	8000288 <__aeabi_dsub>
 8006804:	a354      	add	r3, pc, #336	; (adr r3, 8006958 <__ieee754_pow+0x3c8>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	4604      	mov	r4, r0
 800680c:	460d      	mov	r5, r1
 800680e:	f7f9 fef3 	bl	80005f8 <__aeabi_dmul>
 8006812:	a353      	add	r3, pc, #332	; (adr r3, 8006960 <__ieee754_pow+0x3d0>)
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7f9 feea 	bl	80005f8 <__aeabi_dmul>
 8006824:	4b57      	ldr	r3, [pc, #348]	; (8006984 <__ieee754_pow+0x3f4>)
 8006826:	4682      	mov	sl, r0
 8006828:	468b      	mov	fp, r1
 800682a:	2200      	movs	r2, #0
 800682c:	4620      	mov	r0, r4
 800682e:	4629      	mov	r1, r5
 8006830:	f7f9 fee2 	bl	80005f8 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	a14b      	add	r1, pc, #300	; (adr r1, 8006968 <__ieee754_pow+0x3d8>)
 800683a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683e:	f7f9 fd23 	bl	8000288 <__aeabi_dsub>
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fed7 	bl	80005f8 <__aeabi_dmul>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	2000      	movs	r0, #0
 8006850:	494d      	ldr	r1, [pc, #308]	; (8006988 <__ieee754_pow+0x3f8>)
 8006852:	f7f9 fd19 	bl	8000288 <__aeabi_dsub>
 8006856:	4622      	mov	r2, r4
 8006858:	4680      	mov	r8, r0
 800685a:	4689      	mov	r9, r1
 800685c:	462b      	mov	r3, r5
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7f9 fec9 	bl	80005f8 <__aeabi_dmul>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7f9 fec3 	bl	80005f8 <__aeabi_dmul>
 8006872:	a33f      	add	r3, pc, #252	; (adr r3, 8006970 <__ieee754_pow+0x3e0>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 febe 	bl	80005f8 <__aeabi_dmul>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4650      	mov	r0, sl
 8006882:	4659      	mov	r1, fp
 8006884:	f7f9 fd00 	bl	8000288 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4680      	mov	r8, r0
 800688e:	4689      	mov	r9, r1
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fcfa 	bl	800028c <__adddf3>
 8006898:	2000      	movs	r0, #0
 800689a:	4632      	mov	r2, r6
 800689c:	463b      	mov	r3, r7
 800689e:	4604      	mov	r4, r0
 80068a0:	460d      	mov	r5, r1
 80068a2:	f7f9 fcf1 	bl	8000288 <__aeabi_dsub>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7f9 fceb 	bl	8000288 <__aeabi_dsub>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	9a06      	ldr	r2, [sp, #24]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4313      	orrs	r3, r2
 80068ba:	4682      	mov	sl, r0
 80068bc:	468b      	mov	fp, r1
 80068be:	f040 81e7 	bne.w	8006c90 <__ieee754_pow+0x700>
 80068c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006978 <__ieee754_pow+0x3e8>
 80068c6:	eeb0 8a47 	vmov.f32	s16, s14
 80068ca:	eef0 8a67 	vmov.f32	s17, s15
 80068ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80068d2:	2600      	movs	r6, #0
 80068d4:	4632      	mov	r2, r6
 80068d6:	463b      	mov	r3, r7
 80068d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068dc:	f7f9 fcd4 	bl	8000288 <__aeabi_dsub>
 80068e0:	4622      	mov	r2, r4
 80068e2:	462b      	mov	r3, r5
 80068e4:	f7f9 fe88 	bl	80005f8 <__aeabi_dmul>
 80068e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068ec:	4680      	mov	r8, r0
 80068ee:	4689      	mov	r9, r1
 80068f0:	4650      	mov	r0, sl
 80068f2:	4659      	mov	r1, fp
 80068f4:	f7f9 fe80 	bl	80005f8 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4640      	mov	r0, r8
 80068fe:	4649      	mov	r1, r9
 8006900:	f7f9 fcc4 	bl	800028c <__adddf3>
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4680      	mov	r8, r0
 800690a:	4689      	mov	r9, r1
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fe72 	bl	80005f8 <__aeabi_dmul>
 8006914:	460b      	mov	r3, r1
 8006916:	4604      	mov	r4, r0
 8006918:	460d      	mov	r5, r1
 800691a:	4602      	mov	r2, r0
 800691c:	4649      	mov	r1, r9
 800691e:	4640      	mov	r0, r8
 8006920:	f7f9 fcb4 	bl	800028c <__adddf3>
 8006924:	4b19      	ldr	r3, [pc, #100]	; (800698c <__ieee754_pow+0x3fc>)
 8006926:	4299      	cmp	r1, r3
 8006928:	ec45 4b19 	vmov	d9, r4, r5
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
 8006930:	468b      	mov	fp, r1
 8006932:	f340 82f1 	ble.w	8006f18 <__ieee754_pow+0x988>
 8006936:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800693a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800693e:	4303      	orrs	r3, r0
 8006940:	f000 81e4 	beq.w	8006d0c <__ieee754_pow+0x77c>
 8006944:	ec51 0b18 	vmov	r0, r1, d8
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	f7fa f8c6 	bl	8000adc <__aeabi_dcmplt>
 8006950:	3800      	subs	r0, #0
 8006952:	bf18      	it	ne
 8006954:	2001      	movne	r0, #1
 8006956:	e72b      	b.n	80067b0 <__ieee754_pow+0x220>
 8006958:	60000000 	.word	0x60000000
 800695c:	3ff71547 	.word	0x3ff71547
 8006960:	f85ddf44 	.word	0xf85ddf44
 8006964:	3e54ae0b 	.word	0x3e54ae0b
 8006968:	55555555 	.word	0x55555555
 800696c:	3fd55555 	.word	0x3fd55555
 8006970:	652b82fe 	.word	0x652b82fe
 8006974:	3ff71547 	.word	0x3ff71547
 8006978:	00000000 	.word	0x00000000
 800697c:	bff00000 	.word	0xbff00000
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	3fd00000 	.word	0x3fd00000
 8006988:	3fe00000 	.word	0x3fe00000
 800698c:	408fffff 	.word	0x408fffff
 8006990:	4bd5      	ldr	r3, [pc, #852]	; (8006ce8 <__ieee754_pow+0x758>)
 8006992:	402b      	ands	r3, r5
 8006994:	2200      	movs	r2, #0
 8006996:	b92b      	cbnz	r3, 80069a4 <__ieee754_pow+0x414>
 8006998:	4bd4      	ldr	r3, [pc, #848]	; (8006cec <__ieee754_pow+0x75c>)
 800699a:	f7f9 fe2d 	bl	80005f8 <__aeabi_dmul>
 800699e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80069a2:	460c      	mov	r4, r1
 80069a4:	1523      	asrs	r3, r4, #20
 80069a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069aa:	4413      	add	r3, r2
 80069ac:	9305      	str	r3, [sp, #20]
 80069ae:	4bd0      	ldr	r3, [pc, #832]	; (8006cf0 <__ieee754_pow+0x760>)
 80069b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80069b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80069b8:	429c      	cmp	r4, r3
 80069ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80069be:	dd08      	ble.n	80069d2 <__ieee754_pow+0x442>
 80069c0:	4bcc      	ldr	r3, [pc, #816]	; (8006cf4 <__ieee754_pow+0x764>)
 80069c2:	429c      	cmp	r4, r3
 80069c4:	f340 8162 	ble.w	8006c8c <__ieee754_pow+0x6fc>
 80069c8:	9b05      	ldr	r3, [sp, #20]
 80069ca:	3301      	adds	r3, #1
 80069cc:	9305      	str	r3, [sp, #20]
 80069ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80069d2:	2400      	movs	r4, #0
 80069d4:	00e3      	lsls	r3, r4, #3
 80069d6:	9307      	str	r3, [sp, #28]
 80069d8:	4bc7      	ldr	r3, [pc, #796]	; (8006cf8 <__ieee754_pow+0x768>)
 80069da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069de:	ed93 7b00 	vldr	d7, [r3]
 80069e2:	4629      	mov	r1, r5
 80069e4:	ec53 2b17 	vmov	r2, r3, d7
 80069e8:	eeb0 9a47 	vmov.f32	s18, s14
 80069ec:	eef0 9a67 	vmov.f32	s19, s15
 80069f0:	4682      	mov	sl, r0
 80069f2:	f7f9 fc49 	bl	8000288 <__aeabi_dsub>
 80069f6:	4652      	mov	r2, sl
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	462b      	mov	r3, r5
 80069fe:	ec51 0b19 	vmov	r0, r1, d9
 8006a02:	f7f9 fc43 	bl	800028c <__adddf3>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	49bb      	ldr	r1, [pc, #748]	; (8006cfc <__ieee754_pow+0x76c>)
 8006a0e:	f7f9 ff1d 	bl	800084c <__aeabi_ddiv>
 8006a12:	ec41 0b1a 	vmov	d10, r0, r1
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7f9 fdeb 	bl	80005f8 <__aeabi_dmul>
 8006a22:	2300      	movs	r3, #0
 8006a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a2e:	46ab      	mov	fp, r5
 8006a30:	106d      	asrs	r5, r5, #1
 8006a32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006a36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006a3a:	ec41 0b18 	vmov	d8, r0, r1
 8006a3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006a42:	2200      	movs	r2, #0
 8006a44:	4640      	mov	r0, r8
 8006a46:	4649      	mov	r1, r9
 8006a48:	4614      	mov	r4, r2
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4630      	mov	r0, r6
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7f9 fc16 	bl	8000288 <__aeabi_dsub>
 8006a5c:	ec53 2b19 	vmov	r2, r3, d9
 8006a60:	4606      	mov	r6, r0
 8006a62:	460f      	mov	r7, r1
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 fc0e 	bl	8000288 <__aeabi_dsub>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4650      	mov	r0, sl
 8006a72:	4659      	mov	r1, fp
 8006a74:	f7f9 fc08 	bl	8000288 <__aeabi_dsub>
 8006a78:	4642      	mov	r2, r8
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	f7f9 fdbc 	bl	80005f8 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4630      	mov	r0, r6
 8006a86:	4639      	mov	r1, r7
 8006a88:	f7f9 fbfe 	bl	8000288 <__aeabi_dsub>
 8006a8c:	ec53 2b1a 	vmov	r2, r3, d10
 8006a90:	f7f9 fdb2 	bl	80005f8 <__aeabi_dmul>
 8006a94:	ec53 2b18 	vmov	r2, r3, d8
 8006a98:	ec41 0b19 	vmov	d9, r0, r1
 8006a9c:	ec51 0b18 	vmov	r0, r1, d8
 8006aa0:	f7f9 fdaa 	bl	80005f8 <__aeabi_dmul>
 8006aa4:	a37c      	add	r3, pc, #496	; (adr r3, 8006c98 <__ieee754_pow+0x708>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	4604      	mov	r4, r0
 8006aac:	460d      	mov	r5, r1
 8006aae:	f7f9 fda3 	bl	80005f8 <__aeabi_dmul>
 8006ab2:	a37b      	add	r3, pc, #492	; (adr r3, 8006ca0 <__ieee754_pow+0x710>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7f9 fbe8 	bl	800028c <__adddf3>
 8006abc:	4622      	mov	r2, r4
 8006abe:	462b      	mov	r3, r5
 8006ac0:	f7f9 fd9a 	bl	80005f8 <__aeabi_dmul>
 8006ac4:	a378      	add	r3, pc, #480	; (adr r3, 8006ca8 <__ieee754_pow+0x718>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fbdf 	bl	800028c <__adddf3>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f7f9 fd91 	bl	80005f8 <__aeabi_dmul>
 8006ad6:	a376      	add	r3, pc, #472	; (adr r3, 8006cb0 <__ieee754_pow+0x720>)
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 fbd6 	bl	800028c <__adddf3>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	462b      	mov	r3, r5
 8006ae4:	f7f9 fd88 	bl	80005f8 <__aeabi_dmul>
 8006ae8:	a373      	add	r3, pc, #460	; (adr r3, 8006cb8 <__ieee754_pow+0x728>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fbcd 	bl	800028c <__adddf3>
 8006af2:	4622      	mov	r2, r4
 8006af4:	462b      	mov	r3, r5
 8006af6:	f7f9 fd7f 	bl	80005f8 <__aeabi_dmul>
 8006afa:	a371      	add	r3, pc, #452	; (adr r3, 8006cc0 <__ieee754_pow+0x730>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 fbc4 	bl	800028c <__adddf3>
 8006b04:	4622      	mov	r2, r4
 8006b06:	4606      	mov	r6, r0
 8006b08:	460f      	mov	r7, r1
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 fd6c 	bl	80005f8 <__aeabi_dmul>
 8006b20:	4642      	mov	r2, r8
 8006b22:	4604      	mov	r4, r0
 8006b24:	460d      	mov	r5, r1
 8006b26:	464b      	mov	r3, r9
 8006b28:	ec51 0b18 	vmov	r0, r1, d8
 8006b2c:	f7f9 fbae 	bl	800028c <__adddf3>
 8006b30:	ec53 2b19 	vmov	r2, r3, d9
 8006b34:	f7f9 fd60 	bl	80005f8 <__aeabi_dmul>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fba6 	bl	800028c <__adddf3>
 8006b40:	4642      	mov	r2, r8
 8006b42:	4682      	mov	sl, r0
 8006b44:	468b      	mov	fp, r1
 8006b46:	464b      	mov	r3, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	f7f9 fd54 	bl	80005f8 <__aeabi_dmul>
 8006b50:	4b6b      	ldr	r3, [pc, #428]	; (8006d00 <__ieee754_pow+0x770>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	4606      	mov	r6, r0
 8006b56:	460f      	mov	r7, r1
 8006b58:	f7f9 fb98 	bl	800028c <__adddf3>
 8006b5c:	4652      	mov	r2, sl
 8006b5e:	465b      	mov	r3, fp
 8006b60:	f7f9 fb94 	bl	800028c <__adddf3>
 8006b64:	2000      	movs	r0, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f7f9 fd41 	bl	80005f8 <__aeabi_dmul>
 8006b76:	4b62      	ldr	r3, [pc, #392]	; (8006d00 <__ieee754_pow+0x770>)
 8006b78:	4680      	mov	r8, r0
 8006b7a:	4689      	mov	r9, r1
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 fb81 	bl	8000288 <__aeabi_dsub>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	f7f9 fb7d 	bl	8000288 <__aeabi_dsub>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4650      	mov	r0, sl
 8006b94:	4659      	mov	r1, fp
 8006b96:	f7f9 fb77 	bl	8000288 <__aeabi_dsub>
 8006b9a:	ec53 2b18 	vmov	r2, r3, d8
 8006b9e:	f7f9 fd2b 	bl	80005f8 <__aeabi_dmul>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	462b      	mov	r3, r5
 8006baa:	ec51 0b19 	vmov	r0, r1, d9
 8006bae:	f7f9 fd23 	bl	80005f8 <__aeabi_dmul>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7f9 fb67 	bl	800028c <__adddf3>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 fb5f 	bl	800028c <__adddf3>
 8006bce:	a33e      	add	r3, pc, #248	; (adr r3, 8006cc8 <__ieee754_pow+0x738>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	f7f9 fd0d 	bl	80005f8 <__aeabi_dmul>
 8006bde:	4642      	mov	r2, r8
 8006be0:	ec41 0b18 	vmov	d8, r0, r1
 8006be4:	464b      	mov	r3, r9
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 fb4d 	bl	8000288 <__aeabi_dsub>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	f7f9 fb47 	bl	8000288 <__aeabi_dsub>
 8006bfa:	a335      	add	r3, pc, #212	; (adr r3, 8006cd0 <__ieee754_pow+0x740>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fcfa 	bl	80005f8 <__aeabi_dmul>
 8006c04:	a334      	add	r3, pc, #208	; (adr r3, 8006cd8 <__ieee754_pow+0x748>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fcf1 	bl	80005f8 <__aeabi_dmul>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 fb35 	bl	800028c <__adddf3>
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <__ieee754_pow+0x774>)
 8006c26:	4413      	add	r3, r2
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7f9 fb2e 	bl	800028c <__adddf3>
 8006c30:	4682      	mov	sl, r0
 8006c32:	9805      	ldr	r0, [sp, #20]
 8006c34:	468b      	mov	fp, r1
 8006c36:	f7f9 fc75 	bl	8000524 <__aeabi_i2d>
 8006c3a:	9a07      	ldr	r2, [sp, #28]
 8006c3c:	4b32      	ldr	r3, [pc, #200]	; (8006d08 <__ieee754_pow+0x778>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c44:	4606      	mov	r6, r0
 8006c46:	460f      	mov	r7, r1
 8006c48:	4652      	mov	r2, sl
 8006c4a:	465b      	mov	r3, fp
 8006c4c:	ec51 0b18 	vmov	r0, r1, d8
 8006c50:	f7f9 fb1c 	bl	800028c <__adddf3>
 8006c54:	4642      	mov	r2, r8
 8006c56:	464b      	mov	r3, r9
 8006c58:	f7f9 fb18 	bl	800028c <__adddf3>
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	f7f9 fb14 	bl	800028c <__adddf3>
 8006c64:	2000      	movs	r0, #0
 8006c66:	4632      	mov	r2, r6
 8006c68:	463b      	mov	r3, r7
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	f7f9 fb0b 	bl	8000288 <__aeabi_dsub>
 8006c72:	4642      	mov	r2, r8
 8006c74:	464b      	mov	r3, r9
 8006c76:	f7f9 fb07 	bl	8000288 <__aeabi_dsub>
 8006c7a:	ec53 2b18 	vmov	r2, r3, d8
 8006c7e:	f7f9 fb03 	bl	8000288 <__aeabi_dsub>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4650      	mov	r0, sl
 8006c88:	4659      	mov	r1, fp
 8006c8a:	e610      	b.n	80068ae <__ieee754_pow+0x31e>
 8006c8c:	2401      	movs	r4, #1
 8006c8e:	e6a1      	b.n	80069d4 <__ieee754_pow+0x444>
 8006c90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006ce0 <__ieee754_pow+0x750>
 8006c94:	e617      	b.n	80068c6 <__ieee754_pow+0x336>
 8006c96:	bf00      	nop
 8006c98:	4a454eef 	.word	0x4a454eef
 8006c9c:	3fca7e28 	.word	0x3fca7e28
 8006ca0:	93c9db65 	.word	0x93c9db65
 8006ca4:	3fcd864a 	.word	0x3fcd864a
 8006ca8:	a91d4101 	.word	0xa91d4101
 8006cac:	3fd17460 	.word	0x3fd17460
 8006cb0:	518f264d 	.word	0x518f264d
 8006cb4:	3fd55555 	.word	0x3fd55555
 8006cb8:	db6fabff 	.word	0xdb6fabff
 8006cbc:	3fdb6db6 	.word	0x3fdb6db6
 8006cc0:	33333303 	.word	0x33333303
 8006cc4:	3fe33333 	.word	0x3fe33333
 8006cc8:	e0000000 	.word	0xe0000000
 8006ccc:	3feec709 	.word	0x3feec709
 8006cd0:	dc3a03fd 	.word	0xdc3a03fd
 8006cd4:	3feec709 	.word	0x3feec709
 8006cd8:	145b01f5 	.word	0x145b01f5
 8006cdc:	be3e2fe0 	.word	0xbe3e2fe0
 8006ce0:	00000000 	.word	0x00000000
 8006ce4:	3ff00000 	.word	0x3ff00000
 8006ce8:	7ff00000 	.word	0x7ff00000
 8006cec:	43400000 	.word	0x43400000
 8006cf0:	0003988e 	.word	0x0003988e
 8006cf4:	000bb679 	.word	0x000bb679
 8006cf8:	08007380 	.word	0x08007380
 8006cfc:	3ff00000 	.word	0x3ff00000
 8006d00:	40080000 	.word	0x40080000
 8006d04:	080073a0 	.word	0x080073a0
 8006d08:	08007390 	.word	0x08007390
 8006d0c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006fe4 <__ieee754_pow+0xa54>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 fab9 	bl	800028c <__adddf3>
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	ec41 0b1a 	vmov	d10, r0, r1
 8006d20:	462b      	mov	r3, r5
 8006d22:	4630      	mov	r0, r6
 8006d24:	4639      	mov	r1, r7
 8006d26:	f7f9 faaf 	bl	8000288 <__aeabi_dsub>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	ec51 0b1a 	vmov	r0, r1, d10
 8006d32:	f7f9 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f47f ae04 	bne.w	8006944 <__ieee754_pow+0x3b4>
 8006d3c:	4aa4      	ldr	r2, [pc, #656]	; (8006fd0 <__ieee754_pow+0xa40>)
 8006d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f340 8108 	ble.w	8006f58 <__ieee754_pow+0x9c8>
 8006d48:	151b      	asrs	r3, r3, #20
 8006d4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006d4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006d52:	fa4a f303 	asr.w	r3, sl, r3
 8006d56:	445b      	add	r3, fp
 8006d58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006d5c:	4e9d      	ldr	r6, [pc, #628]	; (8006fd4 <__ieee754_pow+0xa44>)
 8006d5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006d62:	4116      	asrs	r6, r2
 8006d64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006d68:	2000      	movs	r0, #0
 8006d6a:	ea23 0106 	bic.w	r1, r3, r6
 8006d6e:	f1c2 0214 	rsb	r2, r2, #20
 8006d72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d76:	fa4a fa02 	asr.w	sl, sl, r2
 8006d7a:	f1bb 0f00 	cmp.w	fp, #0
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4620      	mov	r0, r4
 8006d84:	4629      	mov	r1, r5
 8006d86:	bfb8      	it	lt
 8006d88:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d8c:	f7f9 fa7c 	bl	8000288 <__aeabi_dsub>
 8006d90:	ec41 0b19 	vmov	d9, r0, r1
 8006d94:	4642      	mov	r2, r8
 8006d96:	464b      	mov	r3, r9
 8006d98:	ec51 0b19 	vmov	r0, r1, d9
 8006d9c:	f7f9 fa76 	bl	800028c <__adddf3>
 8006da0:	a37b      	add	r3, pc, #492	; (adr r3, 8006f90 <__ieee754_pow+0xa00>)
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	2000      	movs	r0, #0
 8006da8:	4604      	mov	r4, r0
 8006daa:	460d      	mov	r5, r1
 8006dac:	f7f9 fc24 	bl	80005f8 <__aeabi_dmul>
 8006db0:	ec53 2b19 	vmov	r2, r3, d9
 8006db4:	4606      	mov	r6, r0
 8006db6:	460f      	mov	r7, r1
 8006db8:	4620      	mov	r0, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7f9 fa64 	bl	8000288 <__aeabi_dsub>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	f7f9 fa5e 	bl	8000288 <__aeabi_dsub>
 8006dcc:	a372      	add	r3, pc, #456	; (adr r3, 8006f98 <__ieee754_pow+0xa08>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fc11 	bl	80005f8 <__aeabi_dmul>
 8006dd6:	a372      	add	r3, pc, #456	; (adr r3, 8006fa0 <__ieee754_pow+0xa10>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	4680      	mov	r8, r0
 8006dde:	4689      	mov	r9, r1
 8006de0:	4620      	mov	r0, r4
 8006de2:	4629      	mov	r1, r5
 8006de4:	f7f9 fc08 	bl	80005f8 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4640      	mov	r0, r8
 8006dee:	4649      	mov	r1, r9
 8006df0:	f7f9 fa4c 	bl	800028c <__adddf3>
 8006df4:	4604      	mov	r4, r0
 8006df6:	460d      	mov	r5, r1
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	4639      	mov	r1, r7
 8006e00:	f7f9 fa44 	bl	800028c <__adddf3>
 8006e04:	4632      	mov	r2, r6
 8006e06:	463b      	mov	r3, r7
 8006e08:	4680      	mov	r8, r0
 8006e0a:	4689      	mov	r9, r1
 8006e0c:	f7f9 fa3c 	bl	8000288 <__aeabi_dsub>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fa36 	bl	8000288 <__aeabi_dsub>
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	4606      	mov	r6, r0
 8006e20:	460f      	mov	r7, r1
 8006e22:	464b      	mov	r3, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	4649      	mov	r1, r9
 8006e28:	f7f9 fbe6 	bl	80005f8 <__aeabi_dmul>
 8006e2c:	a35e      	add	r3, pc, #376	; (adr r3, 8006fa8 <__ieee754_pow+0xa18>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	4604      	mov	r4, r0
 8006e34:	460d      	mov	r5, r1
 8006e36:	f7f9 fbdf 	bl	80005f8 <__aeabi_dmul>
 8006e3a:	a35d      	add	r3, pc, #372	; (adr r3, 8006fb0 <__ieee754_pow+0xa20>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fa22 	bl	8000288 <__aeabi_dsub>
 8006e44:	4622      	mov	r2, r4
 8006e46:	462b      	mov	r3, r5
 8006e48:	f7f9 fbd6 	bl	80005f8 <__aeabi_dmul>
 8006e4c:	a35a      	add	r3, pc, #360	; (adr r3, 8006fb8 <__ieee754_pow+0xa28>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fa1b 	bl	800028c <__adddf3>
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	f7f9 fbcd 	bl	80005f8 <__aeabi_dmul>
 8006e5e:	a358      	add	r3, pc, #352	; (adr r3, 8006fc0 <__ieee754_pow+0xa30>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 fa10 	bl	8000288 <__aeabi_dsub>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	f7f9 fbc4 	bl	80005f8 <__aeabi_dmul>
 8006e70:	a355      	add	r3, pc, #340	; (adr r3, 8006fc8 <__ieee754_pow+0xa38>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 fa09 	bl	800028c <__adddf3>
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	f7f9 fbbb 	bl	80005f8 <__aeabi_dmul>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4640      	mov	r0, r8
 8006e88:	4649      	mov	r1, r9
 8006e8a:	f7f9 f9fd 	bl	8000288 <__aeabi_dsub>
 8006e8e:	4604      	mov	r4, r0
 8006e90:	460d      	mov	r5, r1
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4640      	mov	r0, r8
 8006e98:	4649      	mov	r1, r9
 8006e9a:	f7f9 fbad 	bl	80005f8 <__aeabi_dmul>
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	ec41 0b19 	vmov	d9, r0, r1
 8006ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7f9 f9ec 	bl	8000288 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	ec51 0b19 	vmov	r0, r1, d9
 8006eb8:	f7f9 fcc8 	bl	800084c <__aeabi_ddiv>
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	f7f9 fb96 	bl	80005f8 <__aeabi_dmul>
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	f7f9 f9dc 	bl	800028c <__adddf3>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	f7f9 f9d4 	bl	8000288 <__aeabi_dsub>
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	f7f9 f9d0 	bl	8000288 <__aeabi_dsub>
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4602      	mov	r2, r0
 8006eec:	493a      	ldr	r1, [pc, #232]	; (8006fd8 <__ieee754_pow+0xa48>)
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f7f9 f9ca 	bl	8000288 <__aeabi_dsub>
 8006ef4:	ec41 0b10 	vmov	d0, r0, r1
 8006ef8:	ee10 3a90 	vmov	r3, s1
 8006efc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f04:	da2b      	bge.n	8006f5e <__ieee754_pow+0x9ce>
 8006f06:	4650      	mov	r0, sl
 8006f08:	f000 f966 	bl	80071d8 <scalbn>
 8006f0c:	ec51 0b10 	vmov	r0, r1, d0
 8006f10:	ec53 2b18 	vmov	r2, r3, d8
 8006f14:	f7ff bbed 	b.w	80066f2 <__ieee754_pow+0x162>
 8006f18:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <__ieee754_pow+0xa4c>)
 8006f1a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f1e:	429e      	cmp	r6, r3
 8006f20:	f77f af0c 	ble.w	8006d3c <__ieee754_pow+0x7ac>
 8006f24:	4b2e      	ldr	r3, [pc, #184]	; (8006fe0 <__ieee754_pow+0xa50>)
 8006f26:	440b      	add	r3, r1
 8006f28:	4303      	orrs	r3, r0
 8006f2a:	d009      	beq.n	8006f40 <__ieee754_pow+0x9b0>
 8006f2c:	ec51 0b18 	vmov	r0, r1, d8
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	f7f9 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8006f38:	3800      	subs	r0, #0
 8006f3a:	bf18      	it	ne
 8006f3c:	2001      	movne	r0, #1
 8006f3e:	e447      	b.n	80067d0 <__ieee754_pow+0x240>
 8006f40:	4622      	mov	r2, r4
 8006f42:	462b      	mov	r3, r5
 8006f44:	f7f9 f9a0 	bl	8000288 <__aeabi_dsub>
 8006f48:	4642      	mov	r2, r8
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	f7f9 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f43f aef3 	beq.w	8006d3c <__ieee754_pow+0x7ac>
 8006f56:	e7e9      	b.n	8006f2c <__ieee754_pow+0x99c>
 8006f58:	f04f 0a00 	mov.w	sl, #0
 8006f5c:	e71a      	b.n	8006d94 <__ieee754_pow+0x804>
 8006f5e:	ec51 0b10 	vmov	r0, r1, d0
 8006f62:	4619      	mov	r1, r3
 8006f64:	e7d4      	b.n	8006f10 <__ieee754_pow+0x980>
 8006f66:	491c      	ldr	r1, [pc, #112]	; (8006fd8 <__ieee754_pow+0xa48>)
 8006f68:	2000      	movs	r0, #0
 8006f6a:	f7ff bb30 	b.w	80065ce <__ieee754_pow+0x3e>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	2100      	movs	r1, #0
 8006f72:	f7ff bb2c 	b.w	80065ce <__ieee754_pow+0x3e>
 8006f76:	4630      	mov	r0, r6
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f7ff bb28 	b.w	80065ce <__ieee754_pow+0x3e>
 8006f7e:	9204      	str	r2, [sp, #16]
 8006f80:	f7ff bb7a 	b.w	8006678 <__ieee754_pow+0xe8>
 8006f84:	2300      	movs	r3, #0
 8006f86:	f7ff bb64 	b.w	8006652 <__ieee754_pow+0xc2>
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w
 8006f90:	00000000 	.word	0x00000000
 8006f94:	3fe62e43 	.word	0x3fe62e43
 8006f98:	fefa39ef 	.word	0xfefa39ef
 8006f9c:	3fe62e42 	.word	0x3fe62e42
 8006fa0:	0ca86c39 	.word	0x0ca86c39
 8006fa4:	be205c61 	.word	0xbe205c61
 8006fa8:	72bea4d0 	.word	0x72bea4d0
 8006fac:	3e663769 	.word	0x3e663769
 8006fb0:	c5d26bf1 	.word	0xc5d26bf1
 8006fb4:	3ebbbd41 	.word	0x3ebbbd41
 8006fb8:	af25de2c 	.word	0xaf25de2c
 8006fbc:	3f11566a 	.word	0x3f11566a
 8006fc0:	16bebd93 	.word	0x16bebd93
 8006fc4:	3f66c16c 	.word	0x3f66c16c
 8006fc8:	5555553e 	.word	0x5555553e
 8006fcc:	3fc55555 	.word	0x3fc55555
 8006fd0:	3fe00000 	.word	0x3fe00000
 8006fd4:	000fffff 	.word	0x000fffff
 8006fd8:	3ff00000 	.word	0x3ff00000
 8006fdc:	4090cbff 	.word	0x4090cbff
 8006fe0:	3f6f3400 	.word	0x3f6f3400
 8006fe4:	652b82fe 	.word	0x652b82fe
 8006fe8:	3c971547 	.word	0x3c971547

08006fec <__ieee754_sqrt>:
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	ec55 4b10 	vmov	r4, r5, d0
 8006ff4:	4e55      	ldr	r6, [pc, #340]	; (800714c <__ieee754_sqrt+0x160>)
 8006ff6:	43ae      	bics	r6, r5
 8006ff8:	ee10 0a10 	vmov	r0, s0
 8006ffc:	ee10 3a10 	vmov	r3, s0
 8007000:	462a      	mov	r2, r5
 8007002:	4629      	mov	r1, r5
 8007004:	d110      	bne.n	8007028 <__ieee754_sqrt+0x3c>
 8007006:	ee10 2a10 	vmov	r2, s0
 800700a:	462b      	mov	r3, r5
 800700c:	f7f9 faf4 	bl	80005f8 <__aeabi_dmul>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4620      	mov	r0, r4
 8007016:	4629      	mov	r1, r5
 8007018:	f7f9 f938 	bl	800028c <__adddf3>
 800701c:	4604      	mov	r4, r0
 800701e:	460d      	mov	r5, r1
 8007020:	ec45 4b10 	vmov	d0, r4, r5
 8007024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007028:	2d00      	cmp	r5, #0
 800702a:	dc10      	bgt.n	800704e <__ieee754_sqrt+0x62>
 800702c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007030:	4330      	orrs	r0, r6
 8007032:	d0f5      	beq.n	8007020 <__ieee754_sqrt+0x34>
 8007034:	b15d      	cbz	r5, 800704e <__ieee754_sqrt+0x62>
 8007036:	ee10 2a10 	vmov	r2, s0
 800703a:	462b      	mov	r3, r5
 800703c:	ee10 0a10 	vmov	r0, s0
 8007040:	f7f9 f922 	bl	8000288 <__aeabi_dsub>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	f7f9 fc00 	bl	800084c <__aeabi_ddiv>
 800704c:	e7e6      	b.n	800701c <__ieee754_sqrt+0x30>
 800704e:	1512      	asrs	r2, r2, #20
 8007050:	d074      	beq.n	800713c <__ieee754_sqrt+0x150>
 8007052:	07d4      	lsls	r4, r2, #31
 8007054:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007058:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800705c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007060:	bf5e      	ittt	pl
 8007062:	0fda      	lsrpl	r2, r3, #31
 8007064:	005b      	lslpl	r3, r3, #1
 8007066:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800706a:	2400      	movs	r4, #0
 800706c:	0fda      	lsrs	r2, r3, #31
 800706e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007072:	107f      	asrs	r7, r7, #1
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	2516      	movs	r5, #22
 8007078:	4620      	mov	r0, r4
 800707a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800707e:	1886      	adds	r6, r0, r2
 8007080:	428e      	cmp	r6, r1
 8007082:	bfde      	ittt	le
 8007084:	1b89      	suble	r1, r1, r6
 8007086:	18b0      	addle	r0, r6, r2
 8007088:	18a4      	addle	r4, r4, r2
 800708a:	0049      	lsls	r1, r1, #1
 800708c:	3d01      	subs	r5, #1
 800708e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007092:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007096:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800709a:	d1f0      	bne.n	800707e <__ieee754_sqrt+0x92>
 800709c:	462a      	mov	r2, r5
 800709e:	f04f 0e20 	mov.w	lr, #32
 80070a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80070a6:	4281      	cmp	r1, r0
 80070a8:	eb06 0c05 	add.w	ip, r6, r5
 80070ac:	dc02      	bgt.n	80070b4 <__ieee754_sqrt+0xc8>
 80070ae:	d113      	bne.n	80070d8 <__ieee754_sqrt+0xec>
 80070b0:	459c      	cmp	ip, r3
 80070b2:	d811      	bhi.n	80070d8 <__ieee754_sqrt+0xec>
 80070b4:	f1bc 0f00 	cmp.w	ip, #0
 80070b8:	eb0c 0506 	add.w	r5, ip, r6
 80070bc:	da43      	bge.n	8007146 <__ieee754_sqrt+0x15a>
 80070be:	2d00      	cmp	r5, #0
 80070c0:	db41      	blt.n	8007146 <__ieee754_sqrt+0x15a>
 80070c2:	f100 0801 	add.w	r8, r0, #1
 80070c6:	1a09      	subs	r1, r1, r0
 80070c8:	459c      	cmp	ip, r3
 80070ca:	bf88      	it	hi
 80070cc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80070d0:	eba3 030c 	sub.w	r3, r3, ip
 80070d4:	4432      	add	r2, r6
 80070d6:	4640      	mov	r0, r8
 80070d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80070dc:	f1be 0e01 	subs.w	lr, lr, #1
 80070e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80070e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80070ec:	d1db      	bne.n	80070a6 <__ieee754_sqrt+0xba>
 80070ee:	430b      	orrs	r3, r1
 80070f0:	d006      	beq.n	8007100 <__ieee754_sqrt+0x114>
 80070f2:	1c50      	adds	r0, r2, #1
 80070f4:	bf13      	iteet	ne
 80070f6:	3201      	addne	r2, #1
 80070f8:	3401      	addeq	r4, #1
 80070fa:	4672      	moveq	r2, lr
 80070fc:	f022 0201 	bicne.w	r2, r2, #1
 8007100:	1063      	asrs	r3, r4, #1
 8007102:	0852      	lsrs	r2, r2, #1
 8007104:	07e1      	lsls	r1, r4, #31
 8007106:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800710a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800710e:	bf48      	it	mi
 8007110:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007114:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007118:	4614      	mov	r4, r2
 800711a:	e781      	b.n	8007020 <__ieee754_sqrt+0x34>
 800711c:	0ad9      	lsrs	r1, r3, #11
 800711e:	3815      	subs	r0, #21
 8007120:	055b      	lsls	r3, r3, #21
 8007122:	2900      	cmp	r1, #0
 8007124:	d0fa      	beq.n	800711c <__ieee754_sqrt+0x130>
 8007126:	02cd      	lsls	r5, r1, #11
 8007128:	d50a      	bpl.n	8007140 <__ieee754_sqrt+0x154>
 800712a:	f1c2 0420 	rsb	r4, r2, #32
 800712e:	fa23 f404 	lsr.w	r4, r3, r4
 8007132:	1e55      	subs	r5, r2, #1
 8007134:	4093      	lsls	r3, r2
 8007136:	4321      	orrs	r1, r4
 8007138:	1b42      	subs	r2, r0, r5
 800713a:	e78a      	b.n	8007052 <__ieee754_sqrt+0x66>
 800713c:	4610      	mov	r0, r2
 800713e:	e7f0      	b.n	8007122 <__ieee754_sqrt+0x136>
 8007140:	0049      	lsls	r1, r1, #1
 8007142:	3201      	adds	r2, #1
 8007144:	e7ef      	b.n	8007126 <__ieee754_sqrt+0x13a>
 8007146:	4680      	mov	r8, r0
 8007148:	e7bd      	b.n	80070c6 <__ieee754_sqrt+0xda>
 800714a:	bf00      	nop
 800714c:	7ff00000 	.word	0x7ff00000

08007150 <with_errno>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	4604      	mov	r4, r0
 8007154:	460d      	mov	r5, r1
 8007156:	4616      	mov	r6, r2
 8007158:	f7fe fcfa 	bl	8005b50 <__errno>
 800715c:	4629      	mov	r1, r5
 800715e:	6006      	str	r6, [r0, #0]
 8007160:	4620      	mov	r0, r4
 8007162:	bd70      	pop	{r4, r5, r6, pc}

08007164 <xflow>:
 8007164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007166:	4614      	mov	r4, r2
 8007168:	461d      	mov	r5, r3
 800716a:	b108      	cbz	r0, 8007170 <xflow+0xc>
 800716c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007170:	e9cd 2300 	strd	r2, r3, [sp]
 8007174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007178:	4620      	mov	r0, r4
 800717a:	4629      	mov	r1, r5
 800717c:	f7f9 fa3c 	bl	80005f8 <__aeabi_dmul>
 8007180:	2222      	movs	r2, #34	; 0x22
 8007182:	b003      	add	sp, #12
 8007184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007188:	f7ff bfe2 	b.w	8007150 <with_errno>

0800718c <__math_uflow>:
 800718c:	b508      	push	{r3, lr}
 800718e:	2200      	movs	r2, #0
 8007190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007194:	f7ff ffe6 	bl	8007164 <xflow>
 8007198:	ec41 0b10 	vmov	d0, r0, r1
 800719c:	bd08      	pop	{r3, pc}

0800719e <__math_oflow>:
 800719e:	b508      	push	{r3, lr}
 80071a0:	2200      	movs	r2, #0
 80071a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80071a6:	f7ff ffdd 	bl	8007164 <xflow>
 80071aa:	ec41 0b10 	vmov	d0, r0, r1
 80071ae:	bd08      	pop	{r3, pc}

080071b0 <fabs>:
 80071b0:	ec51 0b10 	vmov	r0, r1, d0
 80071b4:	ee10 2a10 	vmov	r2, s0
 80071b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071bc:	ec43 2b10 	vmov	d0, r2, r3
 80071c0:	4770      	bx	lr

080071c2 <finite>:
 80071c2:	b082      	sub	sp, #8
 80071c4:	ed8d 0b00 	vstr	d0, [sp]
 80071c8:	9801      	ldr	r0, [sp, #4]
 80071ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80071ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80071d2:	0fc0      	lsrs	r0, r0, #31
 80071d4:	b002      	add	sp, #8
 80071d6:	4770      	bx	lr

080071d8 <scalbn>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	ec55 4b10 	vmov	r4, r5, d0
 80071de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80071e2:	4606      	mov	r6, r0
 80071e4:	462b      	mov	r3, r5
 80071e6:	b99a      	cbnz	r2, 8007210 <scalbn+0x38>
 80071e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071ec:	4323      	orrs	r3, r4
 80071ee:	d036      	beq.n	800725e <scalbn+0x86>
 80071f0:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <scalbn+0x100>)
 80071f2:	4629      	mov	r1, r5
 80071f4:	ee10 0a10 	vmov	r0, s0
 80071f8:	2200      	movs	r2, #0
 80071fa:	f7f9 f9fd 	bl	80005f8 <__aeabi_dmul>
 80071fe:	4b37      	ldr	r3, [pc, #220]	; (80072dc <scalbn+0x104>)
 8007200:	429e      	cmp	r6, r3
 8007202:	4604      	mov	r4, r0
 8007204:	460d      	mov	r5, r1
 8007206:	da10      	bge.n	800722a <scalbn+0x52>
 8007208:	a32b      	add	r3, pc, #172	; (adr r3, 80072b8 <scalbn+0xe0>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	e03a      	b.n	8007286 <scalbn+0xae>
 8007210:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007214:	428a      	cmp	r2, r1
 8007216:	d10c      	bne.n	8007232 <scalbn+0x5a>
 8007218:	ee10 2a10 	vmov	r2, s0
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 f834 	bl	800028c <__adddf3>
 8007224:	4604      	mov	r4, r0
 8007226:	460d      	mov	r5, r1
 8007228:	e019      	b.n	800725e <scalbn+0x86>
 800722a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800722e:	460b      	mov	r3, r1
 8007230:	3a36      	subs	r2, #54	; 0x36
 8007232:	4432      	add	r2, r6
 8007234:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007238:	428a      	cmp	r2, r1
 800723a:	dd08      	ble.n	800724e <scalbn+0x76>
 800723c:	2d00      	cmp	r5, #0
 800723e:	a120      	add	r1, pc, #128	; (adr r1, 80072c0 <scalbn+0xe8>)
 8007240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007244:	da1c      	bge.n	8007280 <scalbn+0xa8>
 8007246:	a120      	add	r1, pc, #128	; (adr r1, 80072c8 <scalbn+0xf0>)
 8007248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800724c:	e018      	b.n	8007280 <scalbn+0xa8>
 800724e:	2a00      	cmp	r2, #0
 8007250:	dd08      	ble.n	8007264 <scalbn+0x8c>
 8007252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007256:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800725a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800725e:	ec45 4b10 	vmov	d0, r4, r5
 8007262:	bd70      	pop	{r4, r5, r6, pc}
 8007264:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007268:	da19      	bge.n	800729e <scalbn+0xc6>
 800726a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800726e:	429e      	cmp	r6, r3
 8007270:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007274:	dd0a      	ble.n	800728c <scalbn+0xb4>
 8007276:	a112      	add	r1, pc, #72	; (adr r1, 80072c0 <scalbn+0xe8>)
 8007278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e2      	bne.n	8007246 <scalbn+0x6e>
 8007280:	a30f      	add	r3, pc, #60	; (adr r3, 80072c0 <scalbn+0xe8>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 f9b7 	bl	80005f8 <__aeabi_dmul>
 800728a:	e7cb      	b.n	8007224 <scalbn+0x4c>
 800728c:	a10a      	add	r1, pc, #40	; (adr r1, 80072b8 <scalbn+0xe0>)
 800728e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0b8      	beq.n	8007208 <scalbn+0x30>
 8007296:	a10e      	add	r1, pc, #56	; (adr r1, 80072d0 <scalbn+0xf8>)
 8007298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800729c:	e7b4      	b.n	8007208 <scalbn+0x30>
 800729e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072a2:	3236      	adds	r2, #54	; 0x36
 80072a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80072ac:	4620      	mov	r0, r4
 80072ae:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <scalbn+0x108>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	e7e8      	b.n	8007286 <scalbn+0xae>
 80072b4:	f3af 8000 	nop.w
 80072b8:	c2f8f359 	.word	0xc2f8f359
 80072bc:	01a56e1f 	.word	0x01a56e1f
 80072c0:	8800759c 	.word	0x8800759c
 80072c4:	7e37e43c 	.word	0x7e37e43c
 80072c8:	8800759c 	.word	0x8800759c
 80072cc:	fe37e43c 	.word	0xfe37e43c
 80072d0:	c2f8f359 	.word	0xc2f8f359
 80072d4:	81a56e1f 	.word	0x81a56e1f
 80072d8:	43500000 	.word	0x43500000
 80072dc:	ffff3cb0 	.word	0xffff3cb0
 80072e0:	3c900000 	.word	0x3c900000

080072e4 <_init>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr

080072f0 <_fini>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr
