
MotorControlF407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000722c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080073c0  080073c0  000173c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007470  08007470  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007478  08007478  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000b4c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bc8  20000bc8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010750  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000272a  00000000  00000000  000307fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00032f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00033ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022332  00000000  00000000  00034920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a39  00000000  00000000  00056c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf28  00000000  00000000  0006968b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001355b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004014  00000000  00000000  00135604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073a4 	.word	0x080073a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080073a4 	.word	0x080073a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f8a:	f001 ffb1 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000fa8:	f001 fe06 	bl	8002bb8 <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f001 fbbc 	bl	8002744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 fb76 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f7ff ff94 	bl	8000efc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fd4:	f001 f94e 	bl	8002274 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fd8:	f001 f998 	bl	800230c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fdc:	f001 f9f0 	bl	80023c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000fe0:	f001 fb0c 	bl	80025fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 8000fe4:	f000 ffc8 	bl	8001f78 <SerialInit>
  MotorInit();
 8000fe8:	f000 fc48 	bl	800187c <MotorInit>
  tProcess = NONE;
 8000fec:	4bac      	ldr	r3, [pc, #688]	; (80012a0 <main+0x2e0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(g_bDataAvailable == true)
 8000ff2:	4bac      	ldr	r3, [pc, #688]	; (80012a4 <main+0x2e4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d04d      	beq.n	8001096 <main+0xd6>
	  	      {
	  	        if(StrCompare(g_strCommand, (uint8_t*)"SPID", 4))
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	49aa      	ldr	r1, [pc, #680]	; (80012a8 <main+0x2e8>)
 8000ffe:	48ab      	ldr	r0, [pc, #684]	; (80012ac <main+0x2ec>)
 8001000:	f000 ff96 	bl	8001f30 <StrCompare>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <main+0x52>
	  	        {
	  	          tProcess = SPID;
 800100a:	4ba5      	ldr	r3, [pc, #660]	; (80012a0 <main+0x2e0>)
 800100c:	2202      	movs	r2, #2
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e03e      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CTUN", 4))
 8001012:	2204      	movs	r2, #4
 8001014:	49a6      	ldr	r1, [pc, #664]	; (80012b0 <main+0x2f0>)
 8001016:	48a5      	ldr	r0, [pc, #660]	; (80012ac <main+0x2ec>)
 8001018:	f000 ff8a 	bl	8001f30 <StrCompare>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <main+0x6a>
	  	        {
	  	          tProcess = CTUN_RES;
 8001022:	4b9f      	ldr	r3, [pc, #636]	; (80012a0 <main+0x2e0>)
 8001024:	2204      	movs	r2, #4
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e032      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GPID", 4))
 800102a:	2204      	movs	r2, #4
 800102c:	49a1      	ldr	r1, [pc, #644]	; (80012b4 <main+0x2f4>)
 800102e:	489f      	ldr	r0, [pc, #636]	; (80012ac <main+0x2ec>)
 8001030:	f000 ff7e 	bl	8001f30 <StrCompare>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <main+0x82>
	  	        {
	  	          tProcess = GPID;
 800103a:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <main+0x2e0>)
 800103c:	2205      	movs	r2, #5
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e026      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CSET", 4))
 8001042:	2204      	movs	r2, #4
 8001044:	499c      	ldr	r1, [pc, #624]	; (80012b8 <main+0x2f8>)
 8001046:	4899      	ldr	r0, [pc, #612]	; (80012ac <main+0x2ec>)
 8001048:	f000 ff72 	bl	8001f30 <StrCompare>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <main+0x9a>
	  	        {
	  	          tProcess = CSET;
 8001052:	4b93      	ldr	r3, [pc, #588]	; (80012a0 <main+0x2e0>)
 8001054:	2206      	movs	r2, #6
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e01a      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CRUN", 4))
 800105a:	2204      	movs	r2, #4
 800105c:	4997      	ldr	r1, [pc, #604]	; (80012bc <main+0x2fc>)
 800105e:	4893      	ldr	r0, [pc, #588]	; (80012ac <main+0x2ec>)
 8001060:	f000 ff66 	bl	8001f30 <StrCompare>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <main+0xb2>
	  	        {
	  	          tProcess = CRUN_RES;
 800106a:	4b8d      	ldr	r3, [pc, #564]	; (80012a0 <main+0x2e0>)
 800106c:	2208      	movs	r2, #8
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e00e      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GRMS", 4))
 8001072:	2204      	movs	r2, #4
 8001074:	4992      	ldr	r1, [pc, #584]	; (80012c0 <main+0x300>)
 8001076:	488d      	ldr	r0, [pc, #564]	; (80012ac <main+0x2ec>)
 8001078:	f000 ff5a 	bl	8001f30 <StrCompare>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <main+0xca>
	  	        {
	  	          tProcess = GRMS;
 8001082:	4b87      	ldr	r3, [pc, #540]	; (80012a0 <main+0x2e0>)
 8001084:	2209      	movs	r2, #9
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e002      	b.n	8001090 <main+0xd0>
	  	        }
	  	        else
	  	        {
	  	          tProcess = NONE;
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <main+0x2e0>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
	  	        }
	  	        g_bDataAvailable = false;
 8001090:	4b84      	ldr	r3, [pc, #528]	; (80012a4 <main+0x2e4>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	  	      }

	  	      switch(tProcess)
 8001096:	4b82      	ldr	r3, [pc, #520]	; (80012a0 <main+0x2e0>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	3b01      	subs	r3, #1
 800109c:	2b08      	cmp	r3, #8
 800109e:	d8a8      	bhi.n	8000ff2 <main+0x32>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <main+0xe8>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010cd 	.word	0x080010cd
 80010ac:	080010d3 	.word	0x080010d3
 80010b0:	08000ff3 	.word	0x08000ff3
 80010b4:	080011d3 	.word	0x080011d3
 80010b8:	080011e5 	.word	0x080011e5
 80010bc:	080012ed 	.word	0x080012ed
 80010c0:	08001575 	.word	0x08001575
 80010c4:	08001547 	.word	0x08001547
 80010c8:	08001581 	.word	0x08001581
	  	      {
	  	        case NONE:
	  	          SerialAcceptReceive();
 80010cc:	f000 ff62 	bl	8001f94 <SerialAcceptReceive>
	  	          break;
 80010d0:	e2de      	b.n	8001690 <main+0x6d0>
	  	        case SPID:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80010d2:	4a7c      	ldr	r2, [pc, #496]	; (80012c4 <main+0x304>)
 80010d4:	497c      	ldr	r1, [pc, #496]	; (80012c8 <main+0x308>)
 80010d6:	4875      	ldr	r0, [pc, #468]	; (80012ac <main+0x2ec>)
 80010d8:	f000 ff6a 	bl	8001fb0 <SerialWriteComm>
	  	          g_nCmdPulse = 0;
 80010dc:	4b7b      	ldr	r3, [pc, #492]	; (80012cc <main+0x30c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
	  	          PIDReset(&tPIDControl);
 80010e2:	487b      	ldr	r0, [pc, #492]	; (80012d0 <main+0x310>)
 80010e4:	f000 fe50 	bl	8001d88 <PIDReset>
	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 80010e8:	4b7a      	ldr	r3, [pc, #488]	; (80012d4 <main+0x314>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
	  	          g_nIndex = 0;
 80010f2:	4b79      	ldr	r3, [pc, #484]	; (80012d8 <main+0x318>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]

	  	          //get PID params
	  	          tPIDControl.dKp = (float)g_nData[0] + (float)g_nData[1]/10;
 80010f8:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <main+0x304>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001104:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <main+0x304>)
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001110:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001114:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	4b6c      	ldr	r3, [pc, #432]	; (80012d0 <main+0x310>)
 800111e:	edc3 7a00 	vstr	s15, [r3]
	  	          tPIDControl.dKi = (float)g_nData[2] + (float)g_nData[3]/10;
 8001122:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <main+0x304>)
 8001124:	789b      	ldrb	r3, [r3, #2]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112e:	4b65      	ldr	r3, [pc, #404]	; (80012c4 <main+0x304>)
 8001130:	78db      	ldrb	r3, [r3, #3]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800113a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800113e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001146:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <main+0x310>)
 8001148:	edc3 7a01 	vstr	s15, [r3, #4]
	  	          tPIDControl.dKd = (float)g_nData[4] + (float)g_nData[5]/(pow((float)10,(float)g_nData[6]));
 800114c:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <main+0x304>)
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001158:	ee17 0a90 	vmov	r0, s15
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4b57      	ldr	r3, [pc, #348]	; (80012c4 <main+0x304>)
 8001166:	795b      	ldrb	r3, [r3, #5]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001170:	ee17 0a90 	vmov	r0, s15
 8001174:	f7ff f9e8 	bl	8000548 <__aeabi_f2d>
 8001178:	4680      	mov	r8, r0
 800117a:	4689      	mov	r9, r1
 800117c:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <main+0x304>)
 800117e:	799b      	ldrb	r3, [r3, #6]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	ec43 2b11 	vmov	d1, r2, r3
 8001198:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 8001298 <main+0x2d8>
 800119c:	f005 f9e8 	bl	8006570 <pow>
 80011a0:	ec53 2b10 	vmov	r2, r3, d0
 80011a4:	4640      	mov	r0, r8
 80011a6:	4649      	mov	r1, r9
 80011a8:	f7ff fb50 	bl	800084c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff f86a 	bl	800028c <__adddf3>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcca 	bl	8000b58 <__aeabi_d2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a42      	ldr	r2, [pc, #264]	; (80012d0 <main+0x310>)
 80011c8:	6093      	str	r3, [r2, #8]

	  	          tProcess = NONE;
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <main+0x2e0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
	  	          break;
 80011d0:	e25e      	b.n	8001690 <main+0x6d0>
	  	        case CTUN_RES:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80011d2:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <main+0x304>)
 80011d4:	493c      	ldr	r1, [pc, #240]	; (80012c8 <main+0x308>)
 80011d6:	4835      	ldr	r0, [pc, #212]	; (80012ac <main+0x2ec>)
 80011d8:	f000 feea 	bl	8001fb0 <SerialWriteComm>
	  	          tProcess = CTUN;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <main+0x2e0>)
 80011de:	2203      	movs	r2, #3
 80011e0:	701a      	strb	r2, [r3, #0]
	  	          break;
 80011e2:	e255      	b.n	8001690 <main+0x6d0>
	  	        case CTUN:
	  	          break;
	  	        case GPID:
	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	e046      	b.n	8001278 <main+0x2b8>
	  	          {
	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 80011ea:	4a30      	ldr	r2, [pc, #192]	; (80012ac <main+0x2ec>)
 80011ec:	493b      	ldr	r1, [pc, #236]	; (80012dc <main+0x31c>)
 80011ee:	483c      	ldr	r0, [pc, #240]	; (80012e0 <main+0x320>)
 80011f0:	f004 fe4e 	bl	8005e90 <siprintf>
	  	            memset(g_nTxOption, '\0', 3);
 80011f4:	2203      	movs	r2, #3
 80011f6:	2100      	movs	r1, #0
 80011f8:	483a      	ldr	r0, [pc, #232]	; (80012e4 <main+0x324>)
 80011fa:	f004 fd51 	bl	8005ca0 <memset>
	  	            g_nTxData[6] = (tPIDControl.nSampleTuningPID[index]&0xFF00) >>8;
 80011fe:	4a34      	ldr	r2, [pc, #208]	; (80012d0 <main+0x310>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3308      	adds	r3, #8
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	b29b      	uxth	r3, r3
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <main+0x328>)
 8001212:	719a      	strb	r2, [r3, #6]
	  	            g_nTxData[7] = (tPIDControl.nSampleTuningPID[index]&0xFF);
 8001214:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <main+0x310>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3308      	adds	r3, #8
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <main+0x328>)
 8001224:	71da      	strb	r2, [r3, #7]
	  	            g_nTxData[2] = (index&0xFF00) >>8;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <main+0x328>)
 800122e:	709a      	strb	r2, [r3, #2]
	  	            g_nTxData[3] = (index&0xFF);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <main+0x328>)
 8001236:	70da      	strb	r2, [r3, #3]
	  	            g_nTxData[0] = 0;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <main+0x328>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
	  	            g_nTxData[1] = 199;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <main+0x328>)
 8001240:	22c7      	movs	r2, #199	; 0xc7
 8001242:	705a      	strb	r2, [r3, #1]

	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <main+0x328>)
 8001246:	4927      	ldr	r1, [pc, #156]	; (80012e4 <main+0x324>)
 8001248:	4825      	ldr	r0, [pc, #148]	; (80012e0 <main+0x320>)
 800124a:	f000 feb1 	bl	8001fb0 <SerialWriteComm>
	  	            memset(g_strTxCommand, '\0', 4);
 800124e:	2204      	movs	r2, #4
 8001250:	2100      	movs	r1, #0
 8001252:	4823      	ldr	r0, [pc, #140]	; (80012e0 <main+0x320>)
 8001254:	f004 fd24 	bl	8005ca0 <memset>
	  	            memset(g_nTxOption, '\0', 3);
 8001258:	2203      	movs	r2, #3
 800125a:	2100      	movs	r1, #0
 800125c:	4821      	ldr	r0, [pc, #132]	; (80012e4 <main+0x324>)
 800125e:	f004 fd1f 	bl	8005ca0 <memset>
	  	            memset(g_nTxData, '\0', 8);
 8001262:	2208      	movs	r2, #8
 8001264:	2100      	movs	r1, #0
 8001266:	4820      	ldr	r0, [pc, #128]	; (80012e8 <main+0x328>)
 8001268:	f004 fd1a 	bl	8005ca0 <memset>

	  	            HAL_Delay(30);
 800126c:	201e      	movs	r0, #30
 800126e:	f001 fadb 	bl	8002828 <HAL_Delay>
	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3301      	adds	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <main+0x318>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbb2      	blt.n	80011ea <main+0x22a>
	  	          }
	  	          g_bDataAvailable = false;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <main+0x2e4>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
	  	          SerialAcceptReceive();
 800128a:	f000 fe83 	bl	8001f94 <SerialAcceptReceive>
	  	          tProcess = NONE;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <main+0x2e0>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
	  	          break;
 8001294:	e1fc      	b.n	8001690 <main+0x6d0>
 8001296:	bf00      	nop
 8001298:	00000000 	.word	0x00000000
 800129c:	40240000 	.word	0x40240000
 80012a0:	200000a8 	.word	0x200000a8
 80012a4:	20000a90 	.word	0x20000a90
 80012a8:	080073c0 	.word	0x080073c0
 80012ac:	20000a80 	.word	0x20000a80
 80012b0:	080073c8 	.word	0x080073c8
 80012b4:	080073d0 	.word	0x080073d0
 80012b8:	080073d8 	.word	0x080073d8
 80012bc:	080073e0 	.word	0x080073e0
 80012c0:	080073e8 	.word	0x080073e8
 80012c4:	20000a88 	.word	0x20000a88
 80012c8:	20000a84 	.word	0x20000a84
 80012cc:	20000a60 	.word	0x20000a60
 80012d0:	200000ac 	.word	0x200000ac
 80012d4:	20000b28 	.word	0x20000b28
 80012d8:	20000a64 	.word	0x20000a64
 80012dc:	080073f0 	.word	0x080073f0
 80012e0:	20000098 	.word	0x20000098
 80012e4:	2000009c 	.word	0x2000009c
 80012e8:	200000a0 	.word	0x200000a0
	  	        case CSET:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80012ec:	4aa6      	ldr	r2, [pc, #664]	; (8001588 <main+0x5c8>)
 80012ee:	49a7      	ldr	r1, [pc, #668]	; (800158c <main+0x5cc>)
 80012f0:	48a7      	ldr	r0, [pc, #668]	; (8001590 <main+0x5d0>)
 80012f2:	f000 fe5d 	bl	8001fb0 <SerialWriteComm>

	  	          PIDReset(&tPIDControl);
 80012f6:	48a7      	ldr	r0, [pc, #668]	; (8001594 <main+0x5d4>)
 80012f8:	f000 fd46 	bl	8001d88 <PIDReset>
	  	          g_nActPulse = 0;
 80012fc:	4ba6      	ldr	r3, [pc, #664]	; (8001598 <main+0x5d8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
	  	          g_nCmdPulse = 0 ;
 8001302:	4ba6      	ldr	r3, [pc, #664]	; (800159c <main+0x5dc>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

	  	          //Get Pmax, Vmax, Amax,
	  	          tProfile.dAccelMax = (float)((g_nData[2]>>4) *4096) + (float)((g_nData[2] & 0x0F) *256) + (float)((g_nData[3] >> 4)*16) + (float)((g_nData[3]&0x0F)*1);
 8001308:	4b9f      	ldr	r3, [pc, #636]	; (8001588 <main+0x5c8>)
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	b2db      	uxtb	r3, r3
 8001310:	031b      	lsls	r3, r3, #12
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <main+0x5c8>)
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001330:	4b95      	ldr	r3, [pc, #596]	; (8001588 <main+0x5c8>)
 8001332:	78db      	ldrb	r3, [r3, #3]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2db      	uxtb	r3, r3
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001346:	4b90      	ldr	r3, [pc, #576]	; (8001588 <main+0x5c8>)
 8001348:	78db      	ldrb	r3, [r3, #3]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	4b91      	ldr	r3, [pc, #580]	; (80015a0 <main+0x5e0>)
 800135c:	edc3 7a00 	vstr	s15, [r3]
	  	          tProfile.dVelMax = (float)((g_nData[4]>>4) *4096) + (float)((g_nData[4] & 0x0F) *256) + (float)((g_nData[5] >> 4)*16) + (float)((g_nData[5]&0x0F)*1);
 8001360:	4b89      	ldr	r3, [pc, #548]	; (8001588 <main+0x5c8>)
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	b2db      	uxtb	r3, r3
 8001368:	031b      	lsls	r3, r3, #12
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001372:	4b85      	ldr	r3, [pc, #532]	; (8001588 <main+0x5c8>)
 8001374:	791b      	ldrb	r3, [r3, #4]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001388:	4b7f      	ldr	r3, [pc, #508]	; (8001588 <main+0x5c8>)
 800138a:	795b      	ldrb	r3, [r3, #5]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	b2db      	uxtb	r3, r3
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800139e:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <main+0x5c8>)
 80013a0:	795b      	ldrb	r3, [r3, #5]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <main+0x5e0>)
 80013b4:	edc3 7a01 	vstr	s15, [r3, #4]
	  	          tProfile.dPosMax = (float)((g_nData[6]>>4) *4096) + (float)((g_nData[6] & 0x0F) *256) + (float)((g_nData[7] >> 4)*16) + (float)((g_nData[7]&0x0F)*1);
 80013b8:	4b73      	ldr	r3, [pc, #460]	; (8001588 <main+0x5c8>)
 80013ba:	799b      	ldrb	r3, [r3, #6]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	031b      	lsls	r3, r3, #12
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	4b6f      	ldr	r3, [pc, #444]	; (8001588 <main+0x5c8>)
 80013cc:	799b      	ldrb	r3, [r3, #6]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e0:	4b69      	ldr	r3, [pc, #420]	; (8001588 <main+0x5c8>)
 80013e2:	79db      	ldrb	r3, [r3, #7]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <main+0x5c8>)
 80013f8:	79db      	ldrb	r3, [r3, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <main+0x5e0>)
 800140c:	edc3 7a02 	vstr	s15, [r3, #8]

	  	          //Calculate params for trapezoidal speed
	  	          tProfile.dA1 = 0.5f * tProfile.dAccelMax;
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <main+0x5e0>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800141a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141e:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <main+0x5e0>)
 8001420:	edc3 7a03 	vstr	s15, [r3, #12]
	  	          tProfile.dA2 = tProfile.dVelMax;
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <main+0x5e0>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a5d      	ldr	r2, [pc, #372]	; (80015a0 <main+0x5e0>)
 800142a:	6113      	str	r3, [r2, #16]
	  	          tProfile.dB2 = -0.5f * tProfile.dVelMax * tProfile.dVelMax / tProfile.dAccelMax;
 800142c:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <main+0x5e0>)
 800142e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001432:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001436:	ee27 7a87 	vmul.f32	s14, s15, s14
 800143a:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <main+0x5e0>)
 800143c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001440:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001444:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <main+0x5e0>)
 8001446:	ed93 7a00 	vldr	s14, [r3]
 800144a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144e:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <main+0x5e0>)
 8001450:	edc3 7a05 	vstr	s15, [r3, #20]
	  	          tProfile.dA3 = -0.5f * tProfile.dAccelMax;
 8001454:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <main+0x5e0>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <main+0x5e0>)
 8001464:	edc3 7a06 	vstr	s15, [r3, #24]
	  	          tProfile.dB3 = tProfile.dPosMax * tProfile.dAccelMax / tProfile.dVelMax + tProfile.dVelMax;
 8001468:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <main+0x5e0>)
 800146a:	ed93 7a02 	vldr	s14, [r3, #8]
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <main+0x5e0>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001478:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <main+0x5e0>)
 800147a:	edd3 7a01 	vldr	s15, [r3, #4]
 800147e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <main+0x5e0>)
 8001484:	edd3 7a01 	vldr	s15, [r3, #4]
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <main+0x5e0>)
 800148e:	edc3 7a07 	vstr	s15, [r3, #28]
	  	          tProfile.dC3 = -0.5f * tProfile.dPosMax*tProfile.dPosMax*tProfile.dAccelMax/ (tProfile.dVelMax * tProfile.dVelMax) - 0.5f *tProfile.dVelMax * tProfile.dVelMax/tProfile.dAccelMax;
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <main+0x5e0>)
 8001494:	edd3 7a02 	vldr	s15, [r3, #8]
 8001498:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800149c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a0:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <main+0x5e0>)
 80014a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <main+0x5e0>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <main+0x5e0>)
 80014b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <main+0x5e0>)
 80014bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <main+0x5e0>)
 80014ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80014d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <main+0x5e0>)
 80014d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014dc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <main+0x5e0>)
 80014e2:	edd3 6a00 	vldr	s13, [r3]
 80014e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80014ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <main+0x5e0>)
 80014f0:	edc3 7a08 	vstr	s15, [r3, #32]


	  	          tProfile.dMidStep1 = tProfile.dVelMax / tProfile.dAccelMax;
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <main+0x5e0>)
 80014f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <main+0x5e0>)
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <main+0x5e0>)
 8001506:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	  	          tProfile.dMidStep2 = tProfile.dPosMax / tProfile.dVelMax;
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <main+0x5e0>)
 800150c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <main+0x5e0>)
 8001512:	ed93 7a01 	vldr	s14, [r3, #4]
 8001516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <main+0x5e0>)
 800151c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	  	          tProfile.dMidStep3 = tProfile.dMidStep1 / tProfile.dMidStep2;
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <main+0x5e0>)
 8001522:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <main+0x5e0>)
 8001528:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800152c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <main+0x5e0>)
 8001532:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	  	          tProfile.nTime = 0;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <main+0x5e0>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
	  	          tProcess = NONE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <main+0x5e4>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
	  	          break;
 8001544:	e0a4      	b.n	8001690 <main+0x6d0>

	  	        case CRUN_RES:
	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <main+0x5c8>)
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <main+0x5cc>)
 800154a:	4811      	ldr	r0, [pc, #68]	; (8001590 <main+0x5d0>)
 800154c:	f000 fd30 	bl	8001fb0 <SerialWriteComm>
	  	          g_nCmdPulse = 0;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <main+0x5dc>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
	  	          PIDReset(&tPIDControl);
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <main+0x5d4>)
 8001558:	f000 fc16 	bl	8001d88 <PIDReset>
	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <main+0x5e8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
	  	          g_nIndex = 0 ;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <main+0x5ec>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  	          tProcess = CRUN;
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <main+0x5e4>)
 800156e:	2207      	movs	r2, #7
 8001570:	701a      	strb	r2, [r3, #0]
	  	          break;
 8001572:	e08d      	b.n	8001690 <main+0x6d0>
	  	        case CRUN:
	  	          g_bDataAvailable = false;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <main+0x5f0>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	  	          SerialAcceptReceive();
 800157a:	f000 fd0b 	bl	8001f94 <SerialAcceptReceive>
	  	          break;
 800157e:	e087      	b.n	8001690 <main+0x6d0>
	  	        case GRMS:
	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 8001580:	2300      	movs	r3, #0
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	e075      	b.n	8001672 <main+0x6b2>
 8001586:	bf00      	nop
 8001588:	20000a88 	.word	0x20000a88
 800158c:	20000a84 	.word	0x20000a84
 8001590:	20000a80 	.word	0x20000a80
 8001594:	200000ac 	.word	0x200000ac
 8001598:	20000a5c 	.word	0x20000a5c
 800159c:	20000a60 	.word	0x20000a60
 80015a0:	20000a20 	.word	0x20000a20
 80015a4:	200000a8 	.word	0x200000a8
 80015a8:	20000b28 	.word	0x20000b28
 80015ac:	20000a64 	.word	0x20000a64
 80015b0:	20000a90 	.word	0x20000a90
	  	          {
	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 80015b4:	4a37      	ldr	r2, [pc, #220]	; (8001694 <main+0x6d4>)
 80015b6:	4938      	ldr	r1, [pc, #224]	; (8001698 <main+0x6d8>)
 80015b8:	4838      	ldr	r0, [pc, #224]	; (800169c <main+0x6dc>)
 80015ba:	f004 fc69 	bl	8005e90 <siprintf>
	  	            memset(g_nTxOption, '\0', 3);
 80015be:	2203      	movs	r2, #3
 80015c0:	2100      	movs	r1, #0
 80015c2:	4837      	ldr	r0, [pc, #220]	; (80016a0 <main+0x6e0>)
 80015c4:	f004 fb6c 	bl	8005ca0 <memset>
	  	            g_nTxData[6] = (tPIDControl.nActPosSample[index]&0xFF00) >>8;
 80015c8:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <main+0x6e4>)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	33d0      	adds	r3, #208	; 0xd0
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	889b      	ldrh	r3, [r3, #4]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <main+0x6e8>)
 80015dc:	719a      	strb	r2, [r3, #6]
	  	            g_nTxData[7] = (tPIDControl.nActPosSample[index]&0xFF);
 80015de:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <main+0x6e4>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	33d0      	adds	r3, #208	; 0xd0
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <main+0x6e8>)
 80015ee:	71da      	strb	r2, [r3, #7]
	  	            g_nTxData[4] = ((uint16_t)g_dPIDError&0xFF00)>>8;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <main+0x6ec>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fa:	ee17 3a90 	vmov	r3, s15
 80015fe:	b29b      	uxth	r3, r3
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	b29b      	uxth	r3, r3
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <main+0x6e8>)
 8001608:	711a      	strb	r2, [r3, #4]
	  	            g_nTxData[5] = ((uint16_t)g_dPIDError&0xFF)>>8;
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <main+0x6e8>)
 800160c:	2200      	movs	r2, #0
 800160e:	715a      	strb	r2, [r3, #5]
	  	            g_nTxData[2] = (index&0xFF00) >>8;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	121b      	asrs	r3, r3, #8
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <main+0x6e8>)
 8001618:	709a      	strb	r2, [r3, #2]
	  	            g_nTxData[3] = (index&0xFF);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <main+0x6e8>)
 8001620:	70da      	strb	r2, [r3, #3]
	  	            g_nTxData[0] = ((g_nIndex -2)&0xFF00)>>8;
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <main+0x6f0>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	3b02      	subs	r3, #2
 8001628:	121b      	asrs	r3, r3, #8
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <main+0x6e8>)
 800162e:	701a      	strb	r2, [r3, #0]
	  	            g_nTxData[1] = ((g_nIndex -2)&0xFF);
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <main+0x6f0>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	3b02      	subs	r3, #2
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <main+0x6e8>)
 800163c:	705a      	strb	r2, [r3, #1]

	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <main+0x6e8>)
 8001640:	4917      	ldr	r1, [pc, #92]	; (80016a0 <main+0x6e0>)
 8001642:	4816      	ldr	r0, [pc, #88]	; (800169c <main+0x6dc>)
 8001644:	f000 fcb4 	bl	8001fb0 <SerialWriteComm>
	  	            memset(g_strTxCommand, '\0', 4);
 8001648:	2204      	movs	r2, #4
 800164a:	2100      	movs	r1, #0
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <main+0x6dc>)
 800164e:	f004 fb27 	bl	8005ca0 <memset>
	  	            memset(g_nTxOption, '\0', 3);
 8001652:	2203      	movs	r2, #3
 8001654:	2100      	movs	r1, #0
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <main+0x6e0>)
 8001658:	f004 fb22 	bl	8005ca0 <memset>
	  	            memset(g_nTxData, '\0', 8);
 800165c:	2208      	movs	r2, #8
 800165e:	2100      	movs	r1, #0
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <main+0x6e8>)
 8001662:	f004 fb1d 	bl	8005ca0 <memset>

	  	            HAL_Delay(30);
 8001666:	201e      	movs	r0, #30
 8001668:	f001 f8de 	bl	8002828 <HAL_Delay>
	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <main+0x6f0>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	3b01      	subs	r3, #1
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	db9a      	blt.n	80015b4 <main+0x5f4>
	  	          }
	  	          g_bDataAvailable = false;
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <main+0x6f4>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
	  	          SerialAcceptReceive();
 8001684:	f000 fc86 	bl	8001f94 <SerialAcceptReceive>
	  	          tProcess = NONE;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <main+0x6f8>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
	  	          break;
 800168e:	bf00      	nop
	  if(g_bDataAvailable == true)
 8001690:	e4af      	b.n	8000ff2 <main+0x32>
 8001692:	bf00      	nop
 8001694:	20000a80 	.word	0x20000a80
 8001698:	080073f0 	.word	0x080073f0
 800169c:	20000098 	.word	0x20000098
 80016a0:	2000009c 	.word	0x2000009c
 80016a4:	200000ac 	.word	0x200000ac
 80016a8:	200000a0 	.word	0x200000a0
 80016ac:	20000a68 	.word	0x20000a68
 80016b0:	20000a64 	.word	0x20000a64
 80016b4:	20000a90 	.word	0x20000a90
 80016b8:	200000a8 	.word	0x200000a8

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	2230      	movs	r2, #48	; 0x30
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 fae8 	bl	8005ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <SystemClock_Config+0xc8>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a26      	ldr	r2, [pc, #152]	; (8001784 <SystemClock_Config+0xc8>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <SystemClock_Config+0xc8>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <SystemClock_Config+0xcc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a20      	ldr	r2, [pc, #128]	; (8001788 <SystemClock_Config+0xcc>)
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <SystemClock_Config+0xcc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001722:	2302      	movs	r3, #2
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001730:	2348      	movs	r3, #72	; 0x48
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001734:	2302      	movs	r3, #2
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001738:	2304      	movs	r3, #4
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fbef 	bl	8002f24 <HAL_RCC_OscConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800174c:	f000 f85e 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001750:	230f      	movs	r3, #15
 8001752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001754:	2302      	movs	r3, #2
 8001756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2102      	movs	r1, #2
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fe51 	bl	8003414 <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001778:	f000 f848 	bl	800180c <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3750      	adds	r7, #80	; 0x50
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000

0800178c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d128      	bne.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0x66>
  {
    switch(tProcess)
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d826      	bhi.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	080017f7 	.word	0x080017f7
 80017b4:	080017f7 	.word	0x080017f7
 80017b8:	080017d5 	.word	0x080017d5
 80017bc:	080017f7 	.word	0x080017f7
 80017c0:	080017f7 	.word	0x080017f7
 80017c4:	080017f7 	.word	0x080017f7
 80017c8:	080017ed 	.word	0x080017ed
 80017cc:	080017f7 	.word	0x080017f7
 80017d0:	080017f7 	.word	0x080017f7
      case SPID:
        break;
      case CTUN_RES:
        break;
      case CTUN:
        if(g_nIndex <= 200)
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	2bc8      	cmp	r3, #200	; 0xc8
 80017da:	d803      	bhi.n	80017e4 <HAL_TIM_PeriodElapsedCallback+0x58>
        {
          MotorTuning(25);
 80017dc:	2019      	movs	r0, #25
 80017de:	f000 fa5b 	bl	8001c98 <MotorTuning>
        }
        else
        {
          tProcess = NONE;
        }
        break;
 80017e2:	e009      	b.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
          tProcess = NONE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
        break;
 80017ea:	e005      	b.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case CSET:
        break;
	  case CRUN_RES:
		break;
      case CRUN:
        MotorMovePos();
 80017ec:	f000 f8f0 	bl	80019d0 <MotorMovePos>
        break;
 80017f0:	e002      	b.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case GRMS:
		break;
    }
  }
 80017f2:	bf00      	nop
 80017f4:	e000      	b.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
        break;
 80017f6:	bf00      	nop
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000a98 	.word	0x20000a98
 8001804:	200000a8 	.word	0x200000a8
 8001808:	20000a64 	.word	0x20000a64

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>
	...

08001818 <MotorSetDir>:
uint32_t g_nCmdPulse;
uint16_t g_nIndex =0 ;

//set motor's direction
void MotorSetDir(int8_t nDir)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
    switch(nDir)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <MotorSetDir+0x18>
 800182a:	2b01      	cmp	r3, #1
 800182c:	d007      	beq.n	800183e <MotorSetDir+0x26>
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
            break;
        default:
            break;
 800182e:	e00d      	b.n	800184c <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001836:	4807      	ldr	r0, [pc, #28]	; (8001854 <MotorSetDir+0x3c>)
 8001838:	f001 fb5a 	bl	8002ef0 <HAL_GPIO_WritePin>
            break;
 800183c:	e006      	b.n	800184c <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <MotorSetDir+0x3c>)
 8001846:	f001 fb53 	bl	8002ef0 <HAL_GPIO_WritePin>
            break;
 800184a:	bf00      	nop
    }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020400 	.word	0x40020400

08001858 <MotorSetDuty>:

//duty cycle of motor
void MotorSetDuty(uint16_t nDuty)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <MotorSetDuty+0x20>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000ae0 	.word	0x20000ae0

0800187c <MotorInit>:

//init params for timer interrupt...
void MotorInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim2);
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <MotorInit+0x44>)
 8001882:	f002 f837 	bl	80038f4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001886:	2100      	movs	r1, #0
 8001888:	480e      	ldr	r0, [pc, #56]	; (80018c4 <MotorInit+0x48>)
 800188a:	f002 f8f3 	bl	8003a74 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800188e:	2100      	movs	r1, #0
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <MotorInit+0x4c>)
 8001892:	f002 fa5d 	bl	8003d50 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001896:	2104      	movs	r1, #4
 8001898:	480b      	ldr	r0, [pc, #44]	; (80018c8 <MotorInit+0x4c>)
 800189a:	f002 fa59 	bl	8003d50 <HAL_TIM_Encoder_Start>

    PIDReset(&tPIDControl);
 800189e:	480b      	ldr	r0, [pc, #44]	; (80018cc <MotorInit+0x50>)
 80018a0:	f000 fa72 	bl	8001d88 <PIDReset>
    PIDInit(&tPIDControl, 1., 0., 0.00);
 80018a4:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80018d0 <MotorInit+0x54>
 80018a8:	eddf 0a09 	vldr	s1, [pc, #36]	; 80018d0 <MotorInit+0x54>
 80018ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <MotorInit+0x50>)
 80018b2:	f000 fa81 	bl	8001db8 <PIDInit>
    MotorSetDir(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff ffae 	bl	8001818 <MotorSetDir>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000a98 	.word	0x20000a98
 80018c4:	20000ae0 	.word	0x20000ae0
 80018c8:	20000b28 	.word	0x20000b28
 80018cc:	200000ac 	.word	0x200000ac
	...

080018d8 <ConvertDegToPulse>:

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * 4 * 11 * 21.3 / 360;
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	222c      	movs	r2, #44	; 0x2c
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe1a 	bl	8000524 <__aeabi_i2d>
 80018f0:	a312      	add	r3, pc, #72	; (adr r3, 800193c <ConvertDegToPulse+0x64>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fe7f 	bl	80005f8 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <ConvertDegToPulse+0x60>)
 8001908:	f7fe ffa0 	bl	800084c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f920 	bl	8000b58 <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	60fb      	str	r3, [r7, #12]

    return (uint16_t) dPulse;
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001924:	ee17 3a90 	vmov	r3, s15
 8001928:	b29b      	uxth	r3, r3
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	40768000 	.word	0x40768000
 800193c:	cccccccd 	.word	0xcccccccd
 8001940:	40354ccc 	.word	0x40354ccc
 8001944:	00000000 	.word	0x00000000

08001948 <ConvertPulseToDeg>:

uint16_t ConvertPulseToDeg(uint16_t nPulse)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
    float dDeg = nPulse * 360 / 4 / 11 / 21.3;
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	225a      	movs	r2, #90	; 0x5a
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <ConvertPulseToDeg+0x60>)
 800195c:	fb82 1203 	smull	r1, r2, r2, r3
 8001960:	1052      	asrs	r2, r2, #1
 8001962:	17db      	asrs	r3, r3, #31
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fddc 	bl	8000524 <__aeabi_i2d>
 800196c:	a30c      	add	r3, pc, #48	; (adr r3, 80019a0 <ConvertPulseToDeg+0x58>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe ff6b 	bl	800084c <__aeabi_ddiv>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f8eb 	bl	8000b58 <__aeabi_d2f>
 8001982:	4603      	mov	r3, r0
 8001984:	60fb      	str	r3, [r7, #12]
    return (uint16_t) dDeg;
 8001986:	edd7 7a03 	vldr	s15, [r7, #12]
 800198a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198e:	ee17 3a90 	vmov	r3, s15
 8001992:	b29b      	uxth	r3, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	f3af 8000 	nop.w
 80019a0:	cccccccd 	.word	0xcccccccd
 80019a4:	40354ccc 	.word	0x40354ccc
 80019a8:	2e8ba2e9 	.word	0x2e8ba2e9

080019ac <MotorGetPulse>:

void MotorGetPulse(uint32_t *nPulse)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    *nPulse = __HAL_TIM_GetCounter(&htim4);
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <MotorGetPulse+0x20>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000b28 	.word	0x20000b28

080019d0 <MotorMovePos>:

void MotorMovePos(void)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 80019d6:	463b      	mov	r3, r7
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffe7 	bl	80019ac <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80019e4:	4aa2      	ldr	r2, [pc, #648]	; (8001c70 <MotorMovePos+0x2a0>)
 80019e6:	6013      	str	r3, [r2, #0]
    float dPosTemp = 0;
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]

    //Profile trapezoidal Speed
    if(tProfile.nTime <= tProfile.dMidStep1)
 80019ee:	4ba1      	ldr	r3, [pc, #644]	; (8001c74 <MotorMovePos+0x2a4>)
 80019f0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019f4:	4b9f      	ldr	r3, [pc, #636]	; (8001c74 <MotorMovePos+0x2a4>)
 80019f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d820      	bhi.n	8001a46 <MotorMovePos+0x76>
    {
        dPosTemp = (int32_t)(tProfile.dA1 * tProfile.nTime * tProfile.nTime);
 8001a04:	4b9b      	ldr	r3, [pc, #620]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a06:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a0a:	4b9a      	ldr	r3, [pc, #616]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a14:	4b97      	ldr	r3, [pc, #604]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a16:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a26:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = 2 * tProfile.dA1 * tProfile.nTime;
 8001a2a:	4b92      	ldr	r3, [pc, #584]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a30:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a34:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a36:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <MotorMovePos+0x2a8>)
 8001a40:	edc3 7a00 	vstr	s15, [r3]
 8001a44:	e065      	b.n	8001b12 <MotorMovePos+0x142>
    }
    else if(tProfile.nTime <= tProfile.dMidStep2)
 8001a46:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a48:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a4c:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a4e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	d817      	bhi.n	8001a8c <MotorMovePos+0xbc>
    {
        dPosTemp = (int32_t)(tProfile.dA2 * tProfile.nTime + tProfile.dB2);
 8001a5c:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a62:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a64:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6c:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = tProfile.dA2;
 8001a82:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	4a7c      	ldr	r2, [pc, #496]	; (8001c78 <MotorMovePos+0x2a8>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e042      	b.n	8001b12 <MotorMovePos+0x142>
    }
    else if(tProfile.nTime <= tProfile.dMidStep3)
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a8e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a92:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <MotorMovePos+0x2a4>)
 8001a94:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d834      	bhi.n	8001b0c <MotorMovePos+0x13c>
    {
        dPosTemp = (int32_t)(tProfile.dA3 * tProfile.nTime * tProfile.nTime + tProfile.dB3 * tProfile.nTime + tProfile.dC3);
 8001aa2:	4b74      	ldr	r3, [pc, #464]	; (8001c74 <MotorMovePos+0x2a4>)
 8001aa4:	ed93 7a06 	vldr	s14, [r3, #24]
 8001aa8:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <MotorMovePos+0x2a4>)
 8001aaa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab2:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <MotorMovePos+0x2a4>)
 8001ab4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abc:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <MotorMovePos+0x2a4>)
 8001abe:	edd3 6a07 	vldr	s13, [r3, #28]
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <MotorMovePos+0x2a4>)
 8001ac4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <MotorMovePos+0x2a4>)
 8001ad2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae2:	edc7 7a01 	vstr	s15, [r7, #4]
        g_dCmdVel = 2*tProfile.dA3 * tProfile.nTime + tProfile.dB3;
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <MotorMovePos+0x2a4>)
 8001ae8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001aec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001af0:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <MotorMovePos+0x2a4>)
 8001af2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afa:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <MotorMovePos+0x2a4>)
 8001afc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	4b5c      	ldr	r3, [pc, #368]	; (8001c78 <MotorMovePos+0x2a8>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]
 8001b0a:	e002      	b.n	8001b12 <MotorMovePos+0x142>
    }
    else
    {
        dPosTemp = tProfile.dPosMax;
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <MotorMovePos+0x2a4>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	607b      	str	r3, [r7, #4]
    }

    //Control PID
    g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 8001b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b1a:	ee17 3a90 	vmov	r3, s15
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fed9 	bl	80018d8 <ConvertDegToPulse>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <MotorMovePos+0x2ac>)
 8001b2c:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001b2e:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <MotorMovePos+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <MotorMovePos+0x2a0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	ee07 3a10 	vmov	s14, r3
 8001b42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001b46:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8001c80 <MotorMovePos+0x2b0>
 8001b4a:	eef0 0a47 	vmov.f32	s1, s14
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	484c      	ldr	r0, [pc, #304]	; (8001c84 <MotorMovePos+0x2b4>)
 8001b54:	f000 f952 	bl	8001dfc <PIDCompute>
 8001b58:	eef0 7a40 	vmov.f32	s15, s0
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <MotorMovePos+0x2b8>)
 8001b6a:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001b6c:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <MotorMovePos+0x2b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0c      	blt.n	8001b8e <MotorMovePos+0x1be>
    {
        MotorSetDir(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff fe4f 	bl	8001818 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <MotorMovePos+0x2b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bfb8      	it	lt
 8001b82:	425b      	neglt	r3, r3
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe66 	bl	8001858 <MotorSetDuty>
 8001b8c:	e00f      	b.n	8001bae <MotorMovePos+0x1de>
    }
    else if(g_nDutyCycle < 0)
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <MotorMovePos+0x2b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	da0b      	bge.n	8001bae <MotorMovePos+0x1de>
    {
        MotorSetDir(0);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fe3e 	bl	8001818 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <MotorMovePos+0x2b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bfb8      	it	lt
 8001ba4:	425b      	neglt	r3, r3
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fe55 	bl	8001858 <MotorSetDuty>
    }

    if (tProfile.nTime > tProfile.dMidStep3)
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <MotorMovePos+0x2a4>)
 8001bb0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <MotorMovePos+0x2a4>)
 8001bb6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	dd1f      	ble.n	8001c04 <MotorMovePos+0x234>
    {
        __HAL_TIM_SetCounter(&htim4, 32768);
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <MotorMovePos+0x2bc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
        dPosTemp = 0;
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
        g_nDutyCycle = 0;
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <MotorMovePos+0x2b8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
        g_dCmdVel = 0;
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <MotorMovePos+0x2a8>)
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
        tProfile.nTime = 0;
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <MotorMovePos+0x2a4>)
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
        tProcess = NONE;
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <MotorMovePos+0x2c0>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
        MotorSetDuty(abs(g_nDutyCycle));
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MotorMovePos+0x2b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfb8      	it	lt
 8001bf8:	425b      	neglt	r3, r3
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fe2b 	bl	8001858 <MotorSetDuty>
 8001c02:	e017      	b.n	8001c34 <MotorMovePos+0x264>
    }
    else
    {
        tPIDControl.nActPosSample[g_nIndex] = ConvertPulseToDeg(g_nActPulse);
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MotorMovePos+0x2a0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <MotorMovePos+0x2c4>)
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	4614      	mov	r4, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe99 	bl	8001948 <ConvertPulseToDeg>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <MotorMovePos+0x2b4>)
 8001c1c:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	460a      	mov	r2, r1
 8001c26:	809a      	strh	r2, [r3, #4]
        g_nIndex ++;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MotorMovePos+0x2c4>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MotorMovePos+0x2c4>)
 8001c32:	801a      	strh	r2, [r3, #0]
    }

    tProfile.nTime += 0.01;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MotorMovePos+0x2a4>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc85 	bl	8000548 <__aeabi_f2d>
 8001c3e:	a30a      	add	r3, pc, #40	; (adr r3, 8001c68 <MotorMovePos+0x298>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	f7fe fb22 	bl	800028c <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ff82 	bl	8000b58 <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <MotorMovePos+0x2a4>)
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	f3af 8000 	nop.w
 8001c68:	47ae147b 	.word	0x47ae147b
 8001c6c:	3f847ae1 	.word	0x3f847ae1
 8001c70:	20000a5c 	.word	0x20000a5c
 8001c74:	20000a20 	.word	0x20000a20
 8001c78:	20000a58 	.word	0x20000a58
 8001c7c:	20000a60 	.word	0x20000a60
 8001c80:	3c23d70a 	.word	0x3c23d70a
 8001c84:	200000ac 	.word	0x200000ac
 8001c88:	20000a54 	.word	0x20000a54
 8001c8c:	20000b28 	.word	0x20000b28
 8001c90:	200000a8 	.word	0x200000a8
 8001c94:	20000a64 	.word	0x20000a64

08001c98 <MotorTuning>:

void MotorTuning(uint16_t nPos)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fe80 	bl	80019ac <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <MotorTuning+0xd8>)
 8001cb4:	6013      	str	r3, [r2, #0]

    g_nCmdPulse = ConvertDegToPulse(nPos);
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe0d 	bl	80018d8 <ConvertDegToPulse>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <MotorTuning+0xdc>)
 8001cc4:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001cc6:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <MotorTuning+0xdc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	ee07 3a90 	vmov	s15, r3
 8001cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <MotorTuning+0xd8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	ee07 3a10 	vmov	s14, r3
 8001cda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001cde:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001d78 <MotorTuning+0xe0>
 8001ce2:	eef0 0a47 	vmov.f32	s1, s14
 8001ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cea:	4824      	ldr	r0, [pc, #144]	; (8001d7c <MotorTuning+0xe4>)
 8001cec:	f000 f886 	bl	8001dfc <PIDCompute>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf8:	ee17 3a90 	vmov	r3, s15
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MotorTuning+0xe8>)
 8001d02:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <MotorTuning+0xe8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0c      	blt.n	8001d26 <MotorTuning+0x8e>
    {
        MotorSetDir(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fd83 	bl	8001818 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MotorTuning+0xe8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bfb8      	it	lt
 8001d1a:	425b      	neglt	r3, r3
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd9a 	bl	8001858 <MotorSetDuty>
 8001d24:	e00f      	b.n	8001d46 <MotorTuning+0xae>
    }
    else if(g_nDutyCycle < 0)
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MotorTuning+0xe8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da0b      	bge.n	8001d46 <MotorTuning+0xae>
    {
        MotorSetDir(0);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fd72 	bl	8001818 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MotorTuning+0xe8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bfb8      	it	lt
 8001d3c:	425b      	neglt	r3, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fd89 	bl	8001858 <MotorSetDuty>
    }

    //Store Data

    tPIDControl.nSampleTuningPID[g_nIndex] = g_nActPulse;
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <MotorTuning+0xd8>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MotorTuning+0xec>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b291      	uxth	r1, r2
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <MotorTuning+0xe4>)
 8001d52:	3308      	adds	r3, #8
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	460a      	mov	r2, r1
 8001d5a:	809a      	strh	r2, [r3, #4]
    g_nIndex++;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MotorTuning+0xec>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MotorTuning+0xec>)
 8001d66:	801a      	strh	r2, [r3, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000a5c 	.word	0x20000a5c
 8001d74:	20000a60 	.word	0x20000a60
 8001d78:	3c23d70a 	.word	0x3c23d70a
 8001d7c:	200000ac 	.word	0x200000ac
 8001d80:	20000a54 	.word	0x20000a54
 8001d84:	20000a64 	.word	0x20000a64

08001d88 <PIDReset>:

float g_dPIDError = 0;

//reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <PIDReset+0x2c>)
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000a68 	.word	0x20000a68

08001db8 <PIDInit>:

//init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001dc8:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff ffdb 	bl	8001d88 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	609a      	str	r2, [r3, #8]
    __HAL_TIM_SetCounter(&htim4, 32768);
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <PIDInit+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000b28 	.word	0x20000b28

08001dfc <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

//Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e08:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e0c:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001e10:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <PIDCompute+0xe0>)
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl -> dKp *g_dPIDError;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <PIDCompute+0xe0>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e44:	edc7 7a07 	vstr	s15, [r7, #28]
    PID_Ctrl -> dIntergral += g_dPIDError;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <PIDCompute+0xe0>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e64:	edd7 7a00 	vldr	s15, [r7]
 8001e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7e:	edc7 7a06 	vstr	s15, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) /dTs;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <PIDCompute+0xe0>)
 8001e8a:	edd3 6a00 	vldr	s13, [r3]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e9c:	ed97 7a00 	vldr	s14, [r7]
 8001ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea4:	edc7 7a05 	vstr	s15, [r7, #20]
    dPIDResult = dP + dI + dD;
 8001ea8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	edc7 7a04 	vstr	s15, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <PIDCompute+0xe0>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	ee07 3a90 	vmov	s15, r3
}
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	3724      	adds	r7, #36	; 0x24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20000a68 	.word	0x20000a68

08001ee0 <subString>:
uint8_t ACK[] = {0x06U};
uint8_t SYN[] = {0x16U};

//cut the string
uint8_t *subString(uint8_t *pBuff, int nPos, int nIndex)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
    uint8_t *t = &pBuff[nPos];
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
    pBuff[nPos -1] = '\0';
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e007      	b.n	8001f16 <subString+0x36>
    {
        t[i] = '\0';
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	6938      	ldr	r0, [r7, #16]
 8001f18:	f7fe f95a 	bl	80001d0 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d8ef      	bhi.n	8001f06 <subString+0x26>
    }
    return t;
 8001f26:	693b      	ldr	r3, [r7, #16]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <StrCompare>:


//Compare 2 string
bool StrCompare(uint8_t *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e00e      	b.n	8001f62 <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	440b      	add	r3, r1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <StrCompare+0x2c>
        {
            return false;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e007      	b.n	8001f6c <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dbec      	blt.n	8001f44 <StrCompare+0x14>
        }
    }
    return true;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SerialInit>:


//receive data
void SerialInit(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_nRxBuff, MAX_LEN);
 8001f7c:	2212      	movs	r2, #18
 8001f7e:	4903      	ldr	r1, [pc, #12]	; (8001f8c <SerialInit+0x14>)
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <SerialInit+0x18>)
 8001f82:	f002 feac 	bl	8004cde <HAL_UART_Receive_IT>
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000a6c 	.word	0x20000a6c
 8001f90:	20000b70 	.word	0x20000b70

08001f94 <SerialAcceptReceive>:

//receive data
void SerialAcceptReceive(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*)g_nRxBuff, MAX_LEN);
 8001f98:	2212      	movs	r2, #18
 8001f9a:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <SerialAcceptReceive+0x14>)
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <SerialAcceptReceive+0x18>)
 8001f9e:	f002 fe9e 	bl	8004cde <HAL_UART_Receive_IT>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000a6c 	.word	0x20000a6c
 8001fac:	20000b70 	.word	0x20000b70

08001fb0 <SerialWriteComm>:

//send data to GUI
void SerialWriteComm(uint8_t *pStrCmd, uint8_t *pOpt, uint8_t *pData)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
    uint8_t *pBuff;
    pBuff = (uint8_t *)malloc(18);
 8001fbc:	2012      	movs	r0, #18
 8001fbe:	f003 fe51 	bl	8005c64 <malloc>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	617b      	str	r3, [r7, #20]
    uint8_t nIndex = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	74fb      	strb	r3, [r7, #19]

    memcpy(pBuff + nIndex, STX, 1);
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <SerialWriteComm+0xa4>)
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pStrCmd, 4);
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	601a      	str	r2, [r3, #0]
    nIndex += 4;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	3304      	adds	r3, #4
 8001fec:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pOpt, 3);
 8001fee:	7cfb      	ldrb	r3, [r7, #19]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fe43 	bl	8005c84 <memcpy>
    nIndex += 3;
 8001ffe:	7cfb      	ldrb	r3, [r7, #19]
 8002000:	3303      	adds	r3, #3
 8002002:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pData, 8);
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4413      	add	r3, r2
 800200a:	2208      	movs	r2, #8
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fe38 	bl	8005c84 <memcpy>
    nIndex += 8;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	3308      	adds	r3, #8
 8002018:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ACK, 1);
 800201a:	7cfb      	ldrb	r3, [r7, #19]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4413      	add	r3, r2
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <SerialWriteComm+0xa8>)
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	3301      	adds	r3, #1
 800202a:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ETX, 1);
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4413      	add	r3, r2
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SerialWriteComm+0xac>)
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, pBuff, MAX_LEN, 1000);
 8002038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203c:	2212      	movs	r2, #18
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	4807      	ldr	r0, [pc, #28]	; (8002060 <SerialWriteComm+0xb0>)
 8002042:	f002 fdba 	bl	8004bba <HAL_UART_Transmit>

    free(pBuff);
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f003 fe14 	bl	8005c74 <free>

}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000000 	.word	0x20000000
 8002058:	20000008 	.word	0x20000008
 800205c:	20000004 	.word	0x20000004
 8002060:	20000b70 	.word	0x20000b70

08002064 <SerialParse>:

//parse data to Command, Option, Data
void SerialParse(uint8_t *pBuff)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    if((pBuff[0] == STX[0] && (pBuff[17] == ETX[0])))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <SerialParse+0x68>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d125      	bne.n	80020c4 <SerialParse+0x60>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3311      	adds	r3, #17
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <SerialParse+0x6c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d11e      	bne.n	80020c4 <SerialParse+0x60>
  {
    memcpy(g_strCommand, subString(g_nRxBuff, 1,4), 4);
 8002086:	2204      	movs	r2, #4
 8002088:	2101      	movs	r1, #1
 800208a:	4812      	ldr	r0, [pc, #72]	; (80020d4 <SerialParse+0x70>)
 800208c:	f7ff ff28 	bl	8001ee0 <subString>
 8002090:	4603      	mov	r3, r0
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <SerialParse+0x74>)
 8002098:	601a      	str	r2, [r3, #0]
    memcpy(g_nOption, subString(g_nRxBuff, 5,3), 3);
 800209a:	2203      	movs	r2, #3
 800209c:	2105      	movs	r1, #5
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <SerialParse+0x70>)
 80020a0:	f7ff ff1e 	bl	8001ee0 <subString>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <SerialParse+0x78>)
 80020a8:	8811      	ldrh	r1, [r2, #0]
 80020aa:	7892      	ldrb	r2, [r2, #2]
 80020ac:	8019      	strh	r1, [r3, #0]
 80020ae:	709a      	strb	r2, [r3, #2]
    memcpy(g_nData, subString(g_nRxBuff, 8,8), 8);
 80020b0:	2208      	movs	r2, #8
 80020b2:	2108      	movs	r1, #8
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <SerialParse+0x70>)
 80020b6:	f7ff ff13 	bl	8001ee0 <subString>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <SerialParse+0x7c>)
 80020be:	6810      	ldr	r0, [r2, #0]
 80020c0:	6851      	ldr	r1, [r2, #4]
 80020c2:	c303      	stmia	r3!, {r0, r1}
  }
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004
 80020d4:	20000a6c 	.word	0x20000a6c
 80020d8:	20000a80 	.word	0x20000a80
 80020dc:	20000a84 	.word	0x20000a84
 80020e0:	20000a88 	.word	0x20000a88

080020e4 <HAL_UART_RxCpltCallback>:

//interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    if(huart ->Instance == huart1.Instance)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_UART_RxCpltCallback+0x28>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d105      	bne.n	8002104 <HAL_UART_RxCpltCallback+0x20>
  {
    g_bDataAvailable = true;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_UART_RxCpltCallback+0x2c>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
    SerialParse(g_nRxBuff);
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <HAL_UART_RxCpltCallback+0x30>)
 8002100:	f7ff ffb0 	bl	8002064 <SerialParse>
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000b70 	.word	0x20000b70
 8002110:	20000a90 	.word	0x20000a90
 8002114:	20000a6c 	.word	0x20000a6c

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_MspInit+0x4c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_MspInit+0x4c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_MspInit+0x4c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 fb18 	bl	80027e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <TIM2_IRQHandler+0x10>)
 80021c2:	f001 fe53 	bl	8003e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000a98 	.word	0x20000a98

080021d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <USART1_IRQHandler+0x10>)
 80021d6:	f002 fdb3 	bl	8004d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000b70 	.word	0x20000b70

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f003 fcfc 	bl	8005c10 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20020000 	.word	0x20020000
 8002244:	00000400 	.word	0x00000400
 8002248:	20000a94 	.word	0x20000a94
 800224c:	20000bc8 	.word	0x20000bc8

08002250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MX_TIM2_Init+0x94>)
 8002292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <MX_TIM2_Init+0x94>)
 800229a:	2263      	movs	r2, #99	; 0x63
 800229c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_TIM2_Init+0x94>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <MX_TIM2_Init+0x94>)
 80022a6:	f640 620f 	movw	r2, #3599	; 0xe0f
 80022aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <MX_TIM2_Init+0x94>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_TIM2_Init+0x94>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022b8:	4813      	ldr	r0, [pc, #76]	; (8002308 <MX_TIM2_Init+0x94>)
 80022ba:	f001 facb 	bl	8003854 <HAL_TIM_Base_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022c4:	f7ff faa2 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <MX_TIM2_Init+0x94>)
 80022d6:	f001 ff93 	bl	8004200 <HAL_TIM_ConfigClockSource>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022e0:	f7ff fa94 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e4:	2300      	movs	r3, #0
 80022e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ec:	463b      	mov	r3, r7
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_TIM2_Init+0x94>)
 80022f2:	f002 fb85 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022fc:	f7ff fa86 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000a98 	.word	0x20000a98

0800230c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <MX_TIM3_Init+0xac>)
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <MX_TIM3_Init+0xb0>)
 8002332:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <MX_TIM3_Init+0xac>)
 8002336:	2209      	movs	r2, #9
 8002338:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <MX_TIM3_Init+0xac>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <MX_TIM3_Init+0xac>)
 8002342:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002346:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <MX_TIM3_Init+0xac>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_TIM3_Init+0xac>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002354:	4818      	ldr	r0, [pc, #96]	; (80023b8 <MX_TIM3_Init+0xac>)
 8002356:	f001 fb3d 	bl	80039d4 <HAL_TIM_PWM_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002360:	f7ff fa54 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	4619      	mov	r1, r3
 8002372:	4811      	ldr	r0, [pc, #68]	; (80023b8 <MX_TIM3_Init+0xac>)
 8002374:	f002 fb44 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800237e:	f7ff fa45 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002382:	2360      	movs	r3, #96	; 0x60
 8002384:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	2200      	movs	r2, #0
 8002396:	4619      	mov	r1, r3
 8002398:	4807      	ldr	r0, [pc, #28]	; (80023b8 <MX_TIM3_Init+0xac>)
 800239a:	f001 fe6f 	bl	800407c <HAL_TIM_PWM_ConfigChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023a4:	f7ff fa32 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <MX_TIM3_Init+0xac>)
 80023aa:	f000 f8ed 	bl	8002588 <HAL_TIM_MspPostInit>

}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000ae0 	.word	0x20000ae0
 80023bc:	40000400 	.word	0x40000400

080023c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 fc66 	bl	8005ca0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <MX_TIM4_Init+0xa0>)
 80023de:	4a21      	ldr	r2, [pc, #132]	; (8002464 <MX_TIM4_Init+0xa4>)
 80023e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <MX_TIM4_Init+0xa0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <MX_TIM4_Init+0xa0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <MX_TIM4_Init+0xa0>)
 80023f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <MX_TIM4_Init+0xa0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <MX_TIM4_Init+0xa0>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002402:	2303      	movs	r3, #3
 8002404:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800240a:	2301      	movs	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800241a:	2301      	movs	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <MX_TIM4_Init+0xa0>)
 800242e:	f001 fbe9 	bl	8003c04 <HAL_TIM_Encoder_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002438:	f7ff f9e8 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_TIM4_Init+0xa0>)
 800244a:	f002 fad9 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002454:	f7ff f9da 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	3730      	adds	r7, #48	; 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000b28 	.word	0x20000b28
 8002464:	40000800 	.word	0x40000800

08002468 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002478:	d115      	bne.n	80024a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_TIM_Base_MspInit+0x48>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <HAL_TIM_Base_MspInit+0x48>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_TIM_Base_MspInit+0x48>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2101      	movs	r1, #1
 800249a:	201c      	movs	r0, #28
 800249c:	f000 fac3 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024a0:	201c      	movs	r0, #28
 80024a2:	f000 fadc 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10d      	bne.n	80024e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_TIM_PWM_MspInit+0x40>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_TIM_PWM_MspInit+0x40>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <HAL_TIM_PWM_MspInit+0x40>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_TIM_Encoder_MspInit+0x84>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d12c      	bne.n	8002574 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_TIM_Encoder_MspInit+0x88>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_TIM_Encoder_MspInit+0x88>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_TIM_Encoder_MspInit+0x88>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_TIM_Encoder_MspInit+0x88>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_TIM_Encoder_MspInit+0x88>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_TIM_Encoder_MspInit+0x88>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002552:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002564:	2302      	movs	r3, #2
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002570:	f000 fb22 	bl	8002bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002574:	bf00      	nop
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40000800 	.word	0x40000800
 8002580:	40023800 	.word	0x40023800
 8002584:	40020c00 	.word	0x40020c00

08002588 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <HAL_TIM_MspPostInit+0x68>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d11d      	bne.n	80025e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_TIM_MspPostInit+0x6c>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_TIM_MspPostInit+0x6c>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_TIM_MspPostInit+0x6c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025c6:	2340      	movs	r3, #64	; 0x40
 80025c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	4619      	mov	r1, r3
 80025e0:	4805      	ldr	r0, [pc, #20]	; (80025f8 <HAL_TIM_MspPostInit+0x70>)
 80025e2:	f000 fae9 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025e6:	bf00      	nop
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020000 	.word	0x40020000

080025fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <MX_USART1_UART_Init+0x50>)
 8002604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 8002608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800260c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 8002622:	220c      	movs	r2, #12
 8002624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_USART1_UART_Init+0x4c>)
 8002634:	f002 fa74 	bl	8004b20 <HAL_UART_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800263e:	f7ff f8e5 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000b70 	.word	0x20000b70
 800264c:	40011000 	.word	0x40011000

08002650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_UART_MspInit+0x94>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d133      	bne.n	80026da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <HAL_UART_MspInit+0x98>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <HAL_UART_MspInit+0x98>)
 800267c:	f043 0310 	orr.w	r3, r3, #16
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_UART_MspInit+0x98>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_UART_MspInit+0x98>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_UART_MspInit+0x98>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_UART_MspInit+0x98>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026ba:	2307      	movs	r3, #7
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	4809      	ldr	r0, [pc, #36]	; (80026ec <HAL_UART_MspInit+0x9c>)
 80026c6:	f000 fa77 	bl	8002bb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2025      	movs	r0, #37	; 0x25
 80026d0:	f000 f9a9 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026d4:	2025      	movs	r0, #37	; 0x25
 80026d6:	f000 f9c2 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40011000 	.word	0x40011000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020400 	.word	0x40020400

080026f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026f4:	480d      	ldr	r0, [pc, #52]	; (800272c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026f6:	490e      	ldr	r1, [pc, #56]	; (8002730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026fc:	e002      	b.n	8002704 <LoopCopyDataInit>

080026fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002702:	3304      	adds	r3, #4

08002704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002708:	d3f9      	bcc.n	80026fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270a:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800270c:	4c0b      	ldr	r4, [pc, #44]	; (800273c <LoopFillZerobss+0x26>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002710:	e001      	b.n	8002716 <LoopFillZerobss>

08002712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002714:	3204      	adds	r2, #4

08002716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002718:	d3fb      	bcc.n	8002712 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800271a:	f7ff fd99 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800271e:	f003 fa7d 	bl	8005c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002722:	f7fe fc4d 	bl	8000fc0 <main>
  bx  lr    
 8002726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002730:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002734:	08007480 	.word	0x08007480
  ldr r2, =_sbss
 8002738:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800273c:	20000bc8 	.word	0x20000bc8

08002740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC_IRQHandler>
	...

08002744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <HAL_Init+0x40>)
 800274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_Init+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_Init+0x40>)
 800275a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_Init+0x40>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_Init+0x40>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276c:	2003      	movs	r0, #3
 800276e:	f000 f94f 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002772:	200f      	movs	r0, #15
 8002774:	f000 f808 	bl	8002788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002778:	f7ff fcce 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00

08002788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_InitTick+0x54>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_InitTick+0x58>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279e:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f967 	bl	8002a7a <HAL_SYSTICK_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00e      	b.n	80027d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0f      	cmp	r3, #15
 80027ba:	d80a      	bhi.n	80027d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027bc:	2200      	movs	r2, #0
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c4:	f000 f92f 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c8:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <HAL_InitTick+0x5c>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e000      	b.n	80027d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	20000014 	.word	0x20000014
 80027e4:	20000010 	.word	0x20000010

080027e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x20>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_IncTick+0x24>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000014 	.word	0x20000014
 800280c:	20000bb4 	.word	0x20000bb4

08002810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_GetTick+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000bb4 	.word	0x20000bb4

08002828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff ffee 	bl	8002810 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002840:	d005      	beq.n	800284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_Delay+0x44>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800284e:	bf00      	nop
 8002850:	f7ff ffde 	bl	8002810 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f7      	bhi.n	8002850 <HAL_Delay+0x28>
  {
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000014 	.word	0x20000014

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff29 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff3e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff31 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff feb6 	bl	8002810 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d008      	beq.n	8002ac4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e052      	b.n	8002b6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0216 	bic.w	r2, r2, #22
 8002ad2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <HAL_DMA_Abort+0x62>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0208 	bic.w	r2, r2, #8
 8002b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b14:	e013      	b.n	8002b3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b16:	f7ff fe7b 	bl	8002810 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d90c      	bls.n	8002b3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e015      	b.n	8002b6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e4      	bne.n	8002b16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	223f      	movs	r2, #63	; 0x3f
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d004      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e00c      	b.n	8002baa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2205      	movs	r2, #5
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e16b      	b.n	8002eac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f040 815a 	bne.w	8002ea6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d005      	beq.n	8002c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d130      	bne.n	8002c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 0201 	and.w	r2, r3, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d017      	beq.n	8002ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d123      	bne.n	8002cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	08da      	lsrs	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3208      	adds	r2, #8
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	08da      	lsrs	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3208      	adds	r2, #8
 8002cf6:	69b9      	ldr	r1, [r7, #24]
 8002cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80b4 	beq.w	8002ea6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_GPIO_Init+0x30c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a5f      	ldr	r2, [pc, #380]	; (8002ec4 <HAL_GPIO_Init+0x30c>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <HAL_GPIO_Init+0x30c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5a:	4a5b      	ldr	r2, [pc, #364]	; (8002ec8 <HAL_GPIO_Init+0x310>)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_GPIO_Init+0x314>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02b      	beq.n	8002dde <HAL_GPIO_Init+0x226>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a51      	ldr	r2, [pc, #324]	; (8002ed0 <HAL_GPIO_Init+0x318>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d025      	beq.n	8002dda <HAL_GPIO_Init+0x222>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a50      	ldr	r2, [pc, #320]	; (8002ed4 <HAL_GPIO_Init+0x31c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01f      	beq.n	8002dd6 <HAL_GPIO_Init+0x21e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4f      	ldr	r2, [pc, #316]	; (8002ed8 <HAL_GPIO_Init+0x320>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d019      	beq.n	8002dd2 <HAL_GPIO_Init+0x21a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4e      	ldr	r2, [pc, #312]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_Init+0x216>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4d      	ldr	r2, [pc, #308]	; (8002ee0 <HAL_GPIO_Init+0x328>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00d      	beq.n	8002dca <HAL_GPIO_Init+0x212>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4c      	ldr	r2, [pc, #304]	; (8002ee4 <HAL_GPIO_Init+0x32c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_Init+0x20e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4b      	ldr	r2, [pc, #300]	; (8002ee8 <HAL_GPIO_Init+0x330>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_GPIO_Init+0x20a>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e00e      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	e00c      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	e00a      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x228>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	; (8002ec8 <HAL_GPIO_Init+0x310>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a32      	ldr	r2, [pc, #200]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a27      	ldr	r2, [pc, #156]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e76:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea0:	4a12      	ldr	r2, [pc, #72]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f ae90 	bls.w	8002bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40021400 	.word	0x40021400
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40021c00 	.word	0x40021c00
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f0c:	e003      	b.n	8002f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	041a      	lsls	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e267      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d075      	beq.n	800302e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d112      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4b82      	ldr	r3, [pc, #520]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05b      	beq.n	800302c <HAL_RCC_OscConfig+0x108>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d157      	bne.n	800302c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e242      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x74>
 8002f8a:	4b76      	ldr	r3, [pc, #472]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a75      	ldr	r2, [pc, #468]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b70      	ldr	r3, [pc, #448]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6f      	ldr	r2, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6c      	ldr	r2, [pc, #432]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002fbc:	4b69      	ldr	r3, [pc, #420]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a68      	ldr	r2, [pc, #416]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b66      	ldr	r3, [pc, #408]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a65      	ldr	r2, [pc, #404]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7ff fc18 	bl	8002810 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7ff fc14 	bl	8002810 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e207      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xc0>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff fc04 	bl	8002810 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7ff fc00 	bl	8002810 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1f3      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b51      	ldr	r3, [pc, #324]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0xe8>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003052:	4b44      	ldr	r3, [pc, #272]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1c7      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4937      	ldr	r1, [pc, #220]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b34      	ldr	r3, [pc, #208]	; (8003168 <HAL_RCC_OscConfig+0x244>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7ff fbb9 	bl	8002810 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a2:	f7ff fbb5 	bl	8002810 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1a8      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4925      	ldr	r1, [pc, #148]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x244>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7ff fb98 	bl	8002810 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e4:	f7ff fb94 	bl	8002810 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e187      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d036      	beq.n	800317c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCC_OscConfig+0x248>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7ff fb78 	bl	8002810 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003124:	f7ff fb74 	bl	8002810 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e167      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x200>
 8003142:	e01b      	b.n	800317c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCC_OscConfig+0x248>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7ff fb61 	bl	8002810 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	e00e      	b.n	8003170 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003152:	f7ff fb5d 	bl	8002810 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d907      	bls.n	8003170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e150      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
 8003164:	40023800 	.word	0x40023800
 8003168:	42470000 	.word	0x42470000
 800316c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ea      	bne.n	8003152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8097 	beq.w	80032b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	4b7d      	ldr	r3, [pc, #500]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a7c      	ldr	r2, [pc, #496]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b7a      	ldr	r3, [pc, #488]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b77      	ldr	r3, [pc, #476]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b74      	ldr	r3, [pc, #464]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a73      	ldr	r2, [pc, #460]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7ff fb1d 	bl	8002810 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7ff fb19 	bl	8002810 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e10c      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x2ea>
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a63      	ldr	r2, [pc, #396]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	e01c      	b.n	8003248 <HAL_RCC_OscConfig+0x324>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x30c>
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a5e      	ldr	r2, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a5b      	ldr	r2, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	e00b      	b.n	8003248 <HAL_RCC_OscConfig+0x324>
 8003230:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6713      	str	r3, [r2, #112]	; 0x70
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a54      	ldr	r2, [pc, #336]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003242:	f023 0304 	bic.w	r3, r3, #4
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d015      	beq.n	800327c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7ff fade 	bl	8002810 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	e00a      	b.n	800326e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7ff fada 	bl	8002810 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0cb      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ee      	beq.n	8003258 <HAL_RCC_OscConfig+0x334>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7ff fac8 	bl	8002810 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7ff fac4 	bl	8002810 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0b5      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1ee      	bne.n	8003284 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	4a38      	ldr	r2, [pc, #224]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a1 	beq.w	8003404 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d05c      	beq.n	8003388 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d141      	bne.n	800335a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_RCC_OscConfig+0x478>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7ff fa98 	bl	8002810 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e4:	f7ff fa94 	bl	8002810 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e087      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x478>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7ff fa6d 	bl	8002810 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333a:	f7ff fa69 	bl	8002810 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e05c      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x416>
 8003358:	e054      	b.n	8003404 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x478>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7ff fa56 	bl	8002810 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003368:	f7ff fa52 	bl	8002810 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e045      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x444>
 8003386:	e03d      	b.n	8003404 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e038      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
 800339c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x4ec>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d028      	beq.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d121      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d11a      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d8:	4293      	cmp	r3, r2
 80033da:	d111      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	3b01      	subs	r3, #1
 80033ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0cc      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b68      	ldr	r3, [pc, #416]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d90c      	bls.n	8003450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b65      	ldr	r3, [pc, #404]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800348a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d044      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d119      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e067      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4934      	ldr	r1, [pc, #208]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7ff f984 	bl	8002810 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7ff f980 	bl	8002810 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e04f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d20c      	bcs.n	800355c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f821 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f8e4 	bl	8002788 <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023c00 	.word	0x40023c00
 80035d0:	40023800 	.word	0x40023800
 80035d4:	080073f4 	.word	0x080073f4
 80035d8:	2000000c 	.word	0x2000000c
 80035dc:	20000010 	.word	0x20000010

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b094      	sub	sp, #80	; 0x50
 80035e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	647b      	str	r3, [r7, #68]	; 0x44
 80035ec:	2300      	movs	r3, #0
 80035ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f0:	2300      	movs	r3, #0
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f8:	4b79      	ldr	r3, [pc, #484]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d00d      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x40>
 8003604:	2b08      	cmp	r3, #8
 8003606:	f200 80e1 	bhi.w	80037cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x34>
 800360e:	2b04      	cmp	r3, #4
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x3a>
 8003612:	e0db      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b73      	ldr	r3, [pc, #460]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003618:	e0db      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b73      	ldr	r3, [pc, #460]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800361c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800361e:	e0d8      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362a:	4b6d      	ldr	r3, [pc, #436]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d063      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	2200      	movs	r2, #0
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003640:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003652:	4622      	mov	r2, r4
 8003654:	462b      	mov	r3, r5
 8003656:	f04f 0000 	mov.w	r0, #0
 800365a:	f04f 0100 	mov.w	r1, #0
 800365e:	0159      	lsls	r1, r3, #5
 8003660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003664:	0150      	lsls	r0, r2, #5
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4621      	mov	r1, r4
 800366c:	1a51      	subs	r1, r2, r1
 800366e:	6139      	str	r1, [r7, #16]
 8003670:	4629      	mov	r1, r5
 8003672:	eb63 0301 	sbc.w	r3, r3, r1
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003684:	4659      	mov	r1, fp
 8003686:	018b      	lsls	r3, r1, #6
 8003688:	4651      	mov	r1, sl
 800368a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368e:	4651      	mov	r1, sl
 8003690:	018a      	lsls	r2, r1, #6
 8003692:	4651      	mov	r1, sl
 8003694:	ebb2 0801 	subs.w	r8, r2, r1
 8003698:	4659      	mov	r1, fp
 800369a:	eb63 0901 	sbc.w	r9, r3, r1
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036b2:	4690      	mov	r8, r2
 80036b4:	4699      	mov	r9, r3
 80036b6:	4623      	mov	r3, r4
 80036b8:	eb18 0303 	adds.w	r3, r8, r3
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	462b      	mov	r3, r5
 80036c0:	eb49 0303 	adc.w	r3, r9, r3
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036d2:	4629      	mov	r1, r5
 80036d4:	024b      	lsls	r3, r1, #9
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036dc:	4621      	mov	r1, r4
 80036de:	024a      	lsls	r2, r1, #9
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e6:	2200      	movs	r2, #0
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f0:	f7fd fa82 	bl	8000bf8 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	e058      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	2200      	movs	r2, #0
 8003706:	4618      	mov	r0, r3
 8003708:	4611      	mov	r1, r2
 800370a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	f04f 0000 	mov.w	r0, #0
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	0159      	lsls	r1, r3, #5
 8003726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372a:	0150      	lsls	r0, r2, #5
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4641      	mov	r1, r8
 8003732:	ebb2 0a01 	subs.w	sl, r2, r1
 8003736:	4649      	mov	r1, r9
 8003738:	eb63 0b01 	sbc.w	fp, r3, r1
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003748:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800374c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003750:	ebb2 040a 	subs.w	r4, r2, sl
 8003754:	eb63 050b 	sbc.w	r5, r3, fp
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	00eb      	lsls	r3, r5, #3
 8003762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003766:	00e2      	lsls	r2, r4, #3
 8003768:	4614      	mov	r4, r2
 800376a:	461d      	mov	r5, r3
 800376c:	4643      	mov	r3, r8
 800376e:	18e3      	adds	r3, r4, r3
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	464b      	mov	r3, r9
 8003774:	eb45 0303 	adc.w	r3, r5, r3
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003786:	4629      	mov	r1, r5
 8003788:	028b      	lsls	r3, r1, #10
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003790:	4621      	mov	r1, r4
 8003792:	028a      	lsls	r2, r1, #10
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379a:	2200      	movs	r2, #0
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	61fa      	str	r2, [r7, #28]
 80037a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a4:	f7fd fa28 	bl	8000bf8 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4613      	mov	r3, r2
 80037ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3750      	adds	r7, #80	; 0x50
 80037d8:	46bd      	mov	sp, r7
 80037da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c

08003804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003808:	f7ff fff0 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	08007404 	.word	0x08007404

0800382c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003830:	f7ff ffdc 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0b5b      	lsrs	r3, r3, #13
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	08007404 	.word	0x08007404

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe fdf4 	bl	8002468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fda4 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e04e      	b.n	80039aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d01d      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_TIM_Base_Start_IT+0xc8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d111      	bne.n	8003998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b06      	cmp	r3, #6
 8003984:	d010      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	e007      	b.n	80039a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40001800 	.word	0x40001800

080039d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e041      	b.n	8003a6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe fd5a 	bl	80024b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f000 fce4 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start+0x24>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e022      	b.n	8003ade <HAL_TIM_PWM_Start+0x6a>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d109      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x3e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	bf14      	ite	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	2300      	moveq	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	e015      	b.n	8003ade <HAL_TIM_PWM_Start+0x6a>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d109      	bne.n	8003acc <HAL_TIM_PWM_Start+0x58>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e008      	b.n	8003ade <HAL_TIM_PWM_Start+0x6a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07c      	b.n	8003be0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Start+0x82>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af4:	e013      	b.n	8003b1e <HAL_TIM_PWM_Start+0xaa>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Start+0x92>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	e00b      	b.n	8003b1e <HAL_TIM_PWM_Start+0xaa>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_PWM_Start+0xa2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b14:	e003      	b.n	8003b1e <HAL_TIM_PWM_Start+0xaa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 ff44 	bl	80049b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <HAL_TIM_PWM_Start+0x174>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_TIM_PWM_Start+0xcc>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <HAL_TIM_PWM_Start+0x178>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_PWM_Start+0xd0>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_TIM_PWM_Start+0xd2>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a22      	ldr	r2, [pc, #136]	; (8003be8 <HAL_TIM_PWM_Start+0x174>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <HAL_TIM_PWM_Start+0x136>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6c:	d01d      	beq.n	8003baa <HAL_TIM_PWM_Start+0x136>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <HAL_TIM_PWM_Start+0x17c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_TIM_PWM_Start+0x136>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_TIM_PWM_Start+0x180>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_TIM_PWM_Start+0x136>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_TIM_PWM_Start+0x184>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_TIM_PWM_Start+0x136>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a16      	ldr	r2, [pc, #88]	; (8003bec <HAL_TIM_PWM_Start+0x178>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_TIM_PWM_Start+0x136>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_TIM_PWM_Start+0x188>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_TIM_PWM_Start+0x136>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <HAL_TIM_PWM_Start+0x18c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d111      	bne.n	8003bce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b06      	cmp	r3, #6
 8003bba:	d010      	beq.n	8003bde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bcc:	e007      	b.n	8003bde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010400 	.word	0x40010400
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40001800 	.word	0x40001800

08003c04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e097      	b.n	8003d48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe fc63 	bl	80024f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c48:	f023 0307 	bic.w	r3, r3, #7
 8003c4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 fbc1 	bl	80043e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	4313      	orrs	r3, r2
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ca4:	f023 030c 	bic.w	r3, r3, #12
 8003ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	011a      	lsls	r2, r3, #4
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	031b      	lsls	r3, r3, #12
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d110      	bne.n	8003da2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d86:	7b7b      	ldrb	r3, [r7, #13]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e069      	b.n	8003e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da0:	e031      	b.n	8003e06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d110      	bne.n	8003dca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003da8:	7bbb      	ldrb	r3, [r7, #14]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dae:	7b3b      	ldrb	r3, [r7, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d001      	beq.n	8003db8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e055      	b.n	8003e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc8:	e01d      	b.n	8003e06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d108      	bne.n	8003de2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd0:	7bbb      	ldrb	r3, [r7, #14]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd6:	7b7b      	ldrb	r3, [r7, #13]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d102      	bne.n	8003de2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ddc:	7b3b      	ldrb	r3, [r7, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03e      	b.n	8003e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_TIM_Encoder_Start+0xc4>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d008      	beq.n	8003e24 <HAL_TIM_Encoder_Start+0xd4>
 8003e12:	e00f      	b.n	8003e34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fdc9 	bl	80049b4 <TIM_CCxChannelCmd>
      break;
 8003e22:	e016      	b.n	8003e52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fdc1 	bl	80049b4 <TIM_CCxChannelCmd>
      break;
 8003e32:	e00e      	b.n	8003e52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fdb9 	bl	80049b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	2104      	movs	r1, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fdb2 	bl	80049b4 <TIM_CCxChannelCmd>
      break;
 8003e50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d122      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0202 	mvn.w	r2, #2
 8003e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fa77 	bl	80043a2 <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa69 	bl	800438e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fa7a 	bl	80043b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d122      	bne.n	8003f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d11b      	bne.n	8003f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0204 	mvn.w	r2, #4
 8003eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa4d 	bl	80043a2 <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa3f 	bl	800438e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa50 	bl	80043b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d122      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d11b      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0208 	mvn.w	r2, #8
 8003f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2204      	movs	r2, #4
 8003f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa23 	bl	80043a2 <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa15 	bl	800438e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa26 	bl	80043b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d122      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0210 	mvn.w	r2, #16
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9f9 	bl	80043a2 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f9eb 	bl	800438e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f9fc 	bl	80043b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0201 	mvn.w	r2, #1
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fbce 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffa:	2b80      	cmp	r3, #128	; 0x80
 8003ffc:	d10e      	bne.n	800401c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d107      	bne.n	800401c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fd78 	bl	8004b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9c1 	bl	80043ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b20      	cmp	r3, #32
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0220 	mvn.w	r2, #32
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fd42 	bl	8004af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004096:	2302      	movs	r3, #2
 8004098:	e0ae      	b.n	80041f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	f200 809f 	bhi.w	80041e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040e5 	.word	0x080040e5
 80040b4:	080041e9 	.word	0x080041e9
 80040b8:	080041e9 	.word	0x080041e9
 80040bc:	080041e9 	.word	0x080041e9
 80040c0:	08004125 	.word	0x08004125
 80040c4:	080041e9 	.word	0x080041e9
 80040c8:	080041e9 	.word	0x080041e9
 80040cc:	080041e9 	.word	0x080041e9
 80040d0:	08004167 	.word	0x08004167
 80040d4:	080041e9 	.word	0x080041e9
 80040d8:	080041e9 	.word	0x080041e9
 80040dc:	080041e9 	.word	0x080041e9
 80040e0:	080041a7 	.word	0x080041a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fa18 	bl	8004520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0208 	orr.w	r2, r2, #8
 80040fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0204 	bic.w	r2, r2, #4
 800410e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6999      	ldr	r1, [r3, #24]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	619a      	str	r2, [r3, #24]
      break;
 8004122:	e064      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fa68 	bl	8004600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6999      	ldr	r1, [r3, #24]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	619a      	str	r2, [r3, #24]
      break;
 8004164:	e043      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fabd 	bl	80046ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0208 	orr.w	r2, r2, #8
 8004180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0204 	bic.w	r2, r2, #4
 8004190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69d9      	ldr	r1, [r3, #28]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	61da      	str	r2, [r3, #28]
      break;
 80041a4:	e023      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fb11 	bl	80047d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69d9      	ldr	r1, [r3, #28]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	021a      	lsls	r2, r3, #8
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	61da      	str	r2, [r3, #28]
      break;
 80041e6:	e002      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
      break;
 80041ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_TIM_ConfigClockSource+0x1c>
 8004218:	2302      	movs	r3, #2
 800421a:	e0b4      	b.n	8004386 <HAL_TIM_ConfigClockSource+0x186>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800423a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004254:	d03e      	beq.n	80042d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425a:	f200 8087 	bhi.w	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	f000 8086 	beq.w	8004372 <HAL_TIM_ConfigClockSource+0x172>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426a:	d87f      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b70      	cmp	r3, #112	; 0x70
 800426e:	d01a      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004270:	2b70      	cmp	r3, #112	; 0x70
 8004272:	d87b      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b60      	cmp	r3, #96	; 0x60
 8004276:	d050      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x11a>
 8004278:	2b60      	cmp	r3, #96	; 0x60
 800427a:	d877      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b50      	cmp	r3, #80	; 0x50
 800427e:	d03c      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0xfa>
 8004280:	2b50      	cmp	r3, #80	; 0x50
 8004282:	d873      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d058      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x13a>
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d86f      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b30      	cmp	r3, #48	; 0x30
 800428e:	d064      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 8004290:	2b30      	cmp	r3, #48	; 0x30
 8004292:	d86b      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d060      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d867      	bhi.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05c      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d05a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	e062      	b.n	800436c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6899      	ldr	r1, [r3, #8]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f000 fb5d 	bl	8004974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	609a      	str	r2, [r3, #8]
      break;
 80042d2:	e04f      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f000 fb46 	bl	8004974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f6:	609a      	str	r2, [r3, #8]
      break;
 80042f8:	e03c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	461a      	mov	r2, r3
 8004308:	f000 faba 	bl	8004880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2150      	movs	r1, #80	; 0x50
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fb13 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004318:	e02c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f000 fad9 	bl	80048de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2160      	movs	r1, #96	; 0x60
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb03 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004338:	e01c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	461a      	mov	r2, r3
 8004348:	f000 fa9a 	bl	8004880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2140      	movs	r1, #64	; 0x40
 8004352:	4618      	mov	r0, r3
 8004354:	f000 faf3 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004358:	e00c      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f000 faea 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 800436a:	e003      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      break;
 8004370:	e000      	b.n	8004374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d00f      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3d      	ldr	r2, [pc, #244]	; (80044f8 <TIM_Base_SetConfig+0x118>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00b      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3c      	ldr	r2, [pc, #240]	; (80044fc <TIM_Base_SetConfig+0x11c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <TIM_Base_SetConfig+0x120>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3a      	ldr	r2, [pc, #232]	; (8004504 <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2f      	ldr	r2, [pc, #188]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d02b      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d027      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <TIM_Base_SetConfig+0x118>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d023      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <TIM_Base_SetConfig+0x11c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01f      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <TIM_Base_SetConfig+0x120>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01b      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a29      	ldr	r2, [pc, #164]	; (8004504 <TIM_Base_SetConfig+0x124>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d017      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <TIM_Base_SetConfig+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a27      	ldr	r2, [pc, #156]	; (800450c <TIM_Base_SetConfig+0x12c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <TIM_Base_SetConfig+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <TIM_Base_SetConfig+0x134>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <TIM_Base_SetConfig+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <TIM_Base_SetConfig+0x13c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <TIM_Base_SetConfig+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40010400 	.word	0x40010400
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800
 8004514:	40001800 	.word	0x40001800
 8004518:	40001c00 	.word	0x40001c00
 800451c:	40002000 	.word	0x40002000

08004520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0201 	bic.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 0302 	bic.w	r3, r3, #2
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <TIM_OC1_SetConfig+0xd8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC1_SetConfig+0x64>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <TIM_OC1_SetConfig+0xdc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10c      	bne.n	800459e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0308 	bic.w	r3, r3, #8
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <TIM_OC1_SetConfig+0xd8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC1_SetConfig+0x8e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <TIM_OC1_SetConfig+0xdc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d111      	bne.n	80045d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40010400 	.word	0x40010400

08004600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f023 0210 	bic.w	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0320 	bic.w	r3, r3, #32
 800464a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <TIM_OC2_SetConfig+0xe4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_OC2_SetConfig+0x68>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <TIM_OC2_SetConfig+0xe8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d10d      	bne.n	8004684 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <TIM_OC2_SetConfig+0xe4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC2_SetConfig+0x94>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <TIM_OC2_SetConfig+0xe8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d113      	bne.n	80046bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40010400 	.word	0x40010400

080046ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a21      	ldr	r2, [pc, #132]	; (80047cc <TIM_OC3_SetConfig+0xe0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC3_SetConfig+0x66>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <TIM_OC3_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10d      	bne.n	800476e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a16      	ldr	r2, [pc, #88]	; (80047cc <TIM_OC3_SetConfig+0xe0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_OC3_SetConfig+0x92>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <TIM_OC3_SetConfig+0xe4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d113      	bne.n	80047a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800478c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	621a      	str	r2, [r3, #32]
}
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010400 	.word	0x40010400

080047d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	031b      	lsls	r3, r3, #12
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <TIM_OC4_SetConfig+0xa4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_OC4_SetConfig+0x68>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <TIM_OC4_SetConfig+0xa8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d109      	bne.n	8004850 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40010400 	.word	0x40010400

08004880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 030a 	bic.w	r3, r3, #10
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0210 	bic.w	r2, r3, #16
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2201      	movs	r2, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1a      	ldr	r2, [r3, #32]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e05a      	b.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a21      	ldr	r2, [pc, #132]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a64:	d01d      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10c      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40010400 	.word	0x40010400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40001800 	.word	0x40001800

08004af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e03f      	b.n	8004bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fd fd82 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	; 0x24
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fddf 	bl	8005728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b08a      	sub	sp, #40	; 0x28
 8004bbe:	af02      	add	r7, sp, #8
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d17c      	bne.n	8004cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_UART_Transmit+0x2c>
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e075      	b.n	8004cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_UART_Transmit+0x3e>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e06e      	b.n	8004cd6 <HAL_UART_Transmit+0x11c>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2221      	movs	r2, #33	; 0x21
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c0e:	f7fd fdff 	bl	8002810 <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	88fa      	ldrh	r2, [r7, #6]
 8004c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c28:	d108      	bne.n	8004c3c <HAL_UART_Transmit+0x82>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d104      	bne.n	8004c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e003      	b.n	8004c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c4c:	e02a      	b.n	8004ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fb1f 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e036      	b.n	8004cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10b      	bne.n	8004c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	3302      	adds	r3, #2
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e007      	b.n	8004c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	3301      	adds	r3, #1
 8004c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1cf      	bne.n	8004c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2140      	movs	r1, #64	; 0x40
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 faef 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e006      	b.n	8004cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d11d      	bne.n	8004d34 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_UART_Receive_IT+0x26>
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e016      	b.n	8004d36 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Receive_IT+0x38>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e00f      	b.n	8004d36 <HAL_UART_Receive_IT+0x58>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	461a      	mov	r2, r3
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fb24 	bl	8005378 <UART_Start_Receive_IT>
 8004d30:	4603      	mov	r3, r0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b0ba      	sub	sp, #232	; 0xe8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10f      	bne.n	8004da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <HAL_UART_IRQHandler+0x66>
 8004d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fc07 	bl	80055b2 <UART_Receive_IT>
      return;
 8004da4:	e256      	b.n	8005254 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80de 	beq.w	8004f6c <HAL_UART_IRQHandler+0x22c>
 8004db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80d1 	beq.w	8004f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_UART_IRQHandler+0xae>
 8004dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f043 0201 	orr.w	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <HAL_UART_IRQHandler+0xd2>
 8004dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f043 0202 	orr.w	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <HAL_UART_IRQHandler+0xf6>
 8004e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0204 	orr.w	r2, r3, #4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <HAL_UART_IRQHandler+0x126>
 8004e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f043 0208 	orr.w	r2, r3, #8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 81ed 	beq.w	800524a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_UART_IRQHandler+0x14e>
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fb92 	bl	80055b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d103      	bne.n	8004eba <HAL_UART_IRQHandler+0x17a>
 8004eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d04f      	beq.n	8004f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa9a 	bl	80053f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d141      	bne.n	8004f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3314      	adds	r3, #20
 8004ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1d9      	bne.n	8004ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d013      	beq.n	8004f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	4a7d      	ldr	r2, [pc, #500]	; (800511c <HAL_UART_IRQHandler+0x3dc>)
 8004f28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fd fe1f 	bl	8002b72 <HAL_DMA_Abort_IT>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f44:	4610      	mov	r0, r2
 8004f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	e00e      	b.n	8004f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f990 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e00a      	b.n	8004f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f98c 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	e006      	b.n	8004f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f988 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f66:	e170      	b.n	800524a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	bf00      	nop
    return;
 8004f6a:	e16e      	b.n	800524a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	f040 814a 	bne.w	800520a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8143 	beq.w	800520a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 813c 	beq.w	800520a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	f040 80b4 	bne.w	8005120 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8140 	beq.w	800524e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	f080 8139 	bcs.w	800524e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fee:	f000 8088 	beq.w	8005102 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800500c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800501e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800502a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1d9      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800504e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005062:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005066:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800506a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e1      	bne.n	800503e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3314      	adds	r3, #20
 8005080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800508a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800509e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e3      	bne.n	800507a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d2:	f023 0310 	bic.w	r3, r3, #16
 80050d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80050e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e3      	bne.n	80050c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fd fcc8 	bl	8002a92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800510a:	b29b      	uxth	r3, r3
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	b29b      	uxth	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8b6 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005118:	e099      	b.n	800524e <HAL_UART_IRQHandler+0x50e>
 800511a:	bf00      	nop
 800511c:	080054bb 	.word	0x080054bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005128:	b29b      	uxth	r3, r3
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 808b 	beq.w	8005252 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800513c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8086 	beq.w	8005252 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800515c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800516a:	647a      	str	r2, [r7, #68]	; 0x44
 800516c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e3      	bne.n	8005146 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	623b      	str	r3, [r7, #32]
   return(result);
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3314      	adds	r3, #20
 800519e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051a2:	633a      	str	r2, [r7, #48]	; 0x30
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e3      	bne.n	800517e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0310 	bic.w	r3, r3, #16
 80051da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051e8:	61fa      	str	r2, [r7, #28]
 80051ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	617b      	str	r3, [r7, #20]
   return(result);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e3      	bne.n	80051c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f83e 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005208:	e023      	b.n	8005252 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_UART_IRQHandler+0x4ea>
 8005216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f95d 	bl	80054e2 <UART_Transmit_IT>
    return;
 8005228:	e014      	b.n	8005254 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00e      	beq.n	8005254 <HAL_UART_IRQHandler+0x514>
 8005236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f99d 	bl	8005582 <UART_EndTransmit_IT>
    return;
 8005248:	e004      	b.n	8005254 <HAL_UART_IRQHandler+0x514>
    return;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <HAL_UART_IRQHandler+0x514>
      return;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <HAL_UART_IRQHandler+0x514>
      return;
 8005252:	bf00      	nop
  }
}
 8005254:	37e8      	adds	r7, #232	; 0xe8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop

0800525c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b090      	sub	sp, #64	; 0x40
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ac:	e050      	b.n	8005350 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b4:	d04c      	beq.n	8005350 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <UART_WaitOnFlagUntilTimeout+0x30>
 80052bc:	f7fd faa8 	bl	8002810 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d241      	bcs.n	8005350 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ec:	637a      	str	r2, [r7, #52]	; 0x34
 80052ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	613b      	str	r3, [r7, #16]
   return(result);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	63bb      	str	r3, [r7, #56]	; 0x38
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005320:	623a      	str	r2, [r7, #32]
 8005322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	6a3a      	ldr	r2, [r7, #32]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	61bb      	str	r3, [r7, #24]
   return(result);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e00f      	b.n	8005370 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	429a      	cmp	r2, r3
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	429a      	cmp	r2, r3
 800536c:	d09f      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3740      	adds	r7, #64	; 0x40
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2222      	movs	r2, #34	; 0x22
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0220 	orr.w	r2, r2, #32
 80053e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b095      	sub	sp, #84	; 0x54
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800541c:	643a      	str	r2, [r7, #64]	; 0x40
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	64bb      	str	r3, [r7, #72]	; 0x48
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	d119      	bne.n	80054a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	60bb      	str	r3, [r7, #8]
   return(result);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	647b      	str	r3, [r7, #68]	; 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800548c:	61ba      	str	r2, [r7, #24]
 800548e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6979      	ldr	r1, [r7, #20]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	613b      	str	r3, [r7, #16]
   return(result);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054ae:	bf00      	nop
 80054b0:	3754      	adds	r7, #84	; 0x54
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff fecb 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b21      	cmp	r3, #33	; 0x21
 80054f4:	d13e      	bne.n	8005574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d114      	bne.n	800552a <UART_Transmit_IT+0x48>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d110      	bne.n	800552a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	1c9a      	adds	r2, r3, #2
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	621a      	str	r2, [r3, #32]
 8005528:	e008      	b.n	800553c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	1c59      	adds	r1, r3, #1
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6211      	str	r1, [r2, #32]
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29b      	uxth	r3, r3
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4619      	mov	r1, r3
 800554a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10f      	bne.n	8005570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800555e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fe5a 	bl	800525c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b08c      	sub	sp, #48	; 0x30
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b22      	cmp	r3, #34	; 0x22
 80055c4:	f040 80ab 	bne.w	800571e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d0:	d117      	bne.n	8005602 <UART_Receive_IT+0x50>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d113      	bne.n	8005602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	1c9a      	adds	r2, r3, #2
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005600:	e026      	b.n	8005650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005608:	2300      	movs	r3, #0
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005614:	d007      	beq.n	8005626 <UART_Receive_IT+0x74>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <UART_Receive_IT+0x82>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e008      	b.n	8005646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4619      	mov	r1, r3
 800565e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005660:	2b00      	cmp	r3, #0
 8005662:	d15a      	bne.n	800571a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0220 	bic.w	r2, r2, #32
 8005672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d135      	bne.n	8005710 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f023 0310 	bic.w	r3, r3, #16
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	623a      	str	r2, [r7, #32]
 80056cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	69f9      	ldr	r1, [r7, #28]
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e5      	bne.n	80056aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d10a      	bne.n	8005702 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fdbb 	bl	8005284 <HAL_UARTEx_RxEventCallback>
 800570e:	e002      	b.n	8005716 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fc fce7 	bl	80020e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e002      	b.n	8005720 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e000      	b.n	8005720 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800571e:	2302      	movs	r3, #2
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3730      	adds	r7, #48	; 0x30
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b0c0      	sub	sp, #256	; 0x100
 800572e:	af00      	add	r7, sp, #0
 8005730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	68d9      	ldr	r1, [r3, #12]
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	ea40 0301 	orr.w	r3, r0, r1
 8005750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	431a      	orrs	r2, r3
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	431a      	orrs	r2, r3
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005780:	f021 010c 	bic.w	r1, r1, #12
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800578e:	430b      	orrs	r3, r1
 8005790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	6999      	ldr	r1, [r3, #24]
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	ea40 0301 	orr.w	r3, r0, r1
 80057ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b8f      	ldr	r3, [pc, #572]	; (80059f4 <UART_SetConfig+0x2cc>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d005      	beq.n	80057c8 <UART_SetConfig+0xa0>
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b8d      	ldr	r3, [pc, #564]	; (80059f8 <UART_SetConfig+0x2d0>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d104      	bne.n	80057d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c8:	f7fe f830 	bl	800382c <HAL_RCC_GetPCLK2Freq>
 80057cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057d0:	e003      	b.n	80057da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057d2:	f7fe f817 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 80057d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	f040 810c 	bne.w	8005a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	65b9      	str	r1, [r7, #88]	; 0x58
 8005802:	415b      	adcs	r3, r3
 8005804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800580a:	4621      	mov	r1, r4
 800580c:	eb12 0801 	adds.w	r8, r2, r1
 8005810:	4629      	mov	r1, r5
 8005812:	eb43 0901 	adc.w	r9, r3, r1
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582a:	4690      	mov	r8, r2
 800582c:	4699      	mov	r9, r3
 800582e:	4623      	mov	r3, r4
 8005830:	eb18 0303 	adds.w	r3, r8, r3
 8005834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005838:	462b      	mov	r3, r5
 800583a:	eb49 0303 	adc.w	r3, r9, r3
 800583e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800584e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005856:	460b      	mov	r3, r1
 8005858:	18db      	adds	r3, r3, r3
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
 800585c:	4613      	mov	r3, r2
 800585e:	eb42 0303 	adc.w	r3, r2, r3
 8005862:	657b      	str	r3, [r7, #84]	; 0x54
 8005864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800586c:	f7fb f9c4 	bl	8000bf8 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4b61      	ldr	r3, [pc, #388]	; (80059fc <UART_SetConfig+0x2d4>)
 8005876:	fba3 2302 	umull	r2, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	011c      	lsls	r4, r3, #4
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800588c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	64b9      	str	r1, [r7, #72]	; 0x48
 8005898:	415b      	adcs	r3, r3
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058a0:	4641      	mov	r1, r8
 80058a2:	eb12 0a01 	adds.w	sl, r2, r1
 80058a6:	4649      	mov	r1, r9
 80058a8:	eb43 0b01 	adc.w	fp, r3, r1
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c0:	4692      	mov	sl, r2
 80058c2:	469b      	mov	fp, r3
 80058c4:	4643      	mov	r3, r8
 80058c6:	eb1a 0303 	adds.w	r3, sl, r3
 80058ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ce:	464b      	mov	r3, r9
 80058d0:	eb4b 0303 	adc.w	r3, fp, r3
 80058d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058ec:	460b      	mov	r3, r1
 80058ee:	18db      	adds	r3, r3, r3
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40
 80058f2:	4613      	mov	r3, r2
 80058f4:	eb42 0303 	adc.w	r3, r2, r3
 80058f8:	647b      	str	r3, [r7, #68]	; 0x44
 80058fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005902:	f7fb f979 	bl	8000bf8 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4611      	mov	r1, r2
 800590c:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <UART_SetConfig+0x2d4>)
 800590e:	fba3 2301 	umull	r2, r3, r3, r1
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	; 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005922:	4b36      	ldr	r3, [pc, #216]	; (80059fc <UART_SetConfig+0x2d4>)
 8005924:	fba3 2302 	umull	r2, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005930:	441c      	add	r4, r3
 8005932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800593c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	1891      	adds	r1, r2, r2
 800594a:	63b9      	str	r1, [r7, #56]	; 0x38
 800594c:	415b      	adcs	r3, r3
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005954:	4641      	mov	r1, r8
 8005956:	1851      	adds	r1, r2, r1
 8005958:	6339      	str	r1, [r7, #48]	; 0x30
 800595a:	4649      	mov	r1, r9
 800595c:	414b      	adcs	r3, r1
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800596c:	4659      	mov	r1, fp
 800596e:	00cb      	lsls	r3, r1, #3
 8005970:	4651      	mov	r1, sl
 8005972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005976:	4651      	mov	r1, sl
 8005978:	00ca      	lsls	r2, r1, #3
 800597a:	4610      	mov	r0, r2
 800597c:	4619      	mov	r1, r3
 800597e:	4603      	mov	r3, r0
 8005980:	4642      	mov	r2, r8
 8005982:	189b      	adds	r3, r3, r2
 8005984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005988:	464b      	mov	r3, r9
 800598a:	460a      	mov	r2, r1
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059be:	f7fb f91b 	bl	8000bf8 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <UART_SetConfig+0x2d4>)
 80059c8:	fba3 1302 	umull	r1, r3, r3, r2
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	2164      	movs	r1, #100	; 0x64
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	3332      	adds	r3, #50	; 0x32
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <UART_SetConfig+0x2d4>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	f003 0207 	and.w	r2, r3, #7
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4422      	add	r2, r4
 80059ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059f0:	e105      	b.n	8005bfe <UART_SetConfig+0x4d6>
 80059f2:	bf00      	nop
 80059f4:	40011000 	.word	0x40011000
 80059f8:	40011400 	.word	0x40011400
 80059fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a12:	4642      	mov	r2, r8
 8005a14:	464b      	mov	r3, r9
 8005a16:	1891      	adds	r1, r2, r2
 8005a18:	6239      	str	r1, [r7, #32]
 8005a1a:	415b      	adcs	r3, r3
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a22:	4641      	mov	r1, r8
 8005a24:	1854      	adds	r4, r2, r1
 8005a26:	4649      	mov	r1, r9
 8005a28:	eb43 0501 	adc.w	r5, r3, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	00eb      	lsls	r3, r5, #3
 8005a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3a:	00e2      	lsls	r2, r4, #3
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	461d      	mov	r5, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	18e3      	adds	r3, r4, r3
 8005a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a48:	464b      	mov	r3, r9
 8005a4a:	eb45 0303 	adc.w	r3, r5, r3
 8005a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a6e:	4629      	mov	r1, r5
 8005a70:	008b      	lsls	r3, r1, #2
 8005a72:	4621      	mov	r1, r4
 8005a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a78:	4621      	mov	r1, r4
 8005a7a:	008a      	lsls	r2, r1, #2
 8005a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a80:	f7fb f8ba 	bl	8000bf8 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4b60      	ldr	r3, [pc, #384]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	011c      	lsls	r4, r3, #4
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	61b9      	str	r1, [r7, #24]
 8005aac:	415b      	adcs	r3, r3
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6139      	str	r1, [r7, #16]
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ae8:	464b      	mov	r3, r9
 8005aea:	460a      	mov	r2, r1
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	008b      	lsls	r3, r1, #2
 8005b10:	4641      	mov	r1, r8
 8005b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b16:	4641      	mov	r1, r8
 8005b18:	008a      	lsls	r2, r1, #2
 8005b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b1e:	f7fb f86b 	bl	8000bf8 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4b39      	ldr	r3, [pc, #228]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a34      	ldr	r2, [pc, #208]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b46:	441c      	add	r4, r3
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b50:	677a      	str	r2, [r7, #116]	; 0x74
 8005b52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b66:	4641      	mov	r1, r8
 8005b68:	1851      	adds	r1, r2, r1
 8005b6a:	6039      	str	r1, [r7, #0]
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	414b      	adcs	r3, r1
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b7e:	4659      	mov	r1, fp
 8005b80:	00cb      	lsls	r3, r1, #3
 8005b82:	4651      	mov	r1, sl
 8005b84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b88:	4651      	mov	r1, sl
 8005b8a:	00ca      	lsls	r2, r1, #3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	4642      	mov	r2, r8
 8005b94:	189b      	adds	r3, r3, r2
 8005b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b98:	464b      	mov	r3, r9
 8005b9a:	460a      	mov	r2, r1
 8005b9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	663b      	str	r3, [r7, #96]	; 0x60
 8005bac:	667a      	str	r2, [r7, #100]	; 0x64
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005bba:	4649      	mov	r1, r9
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4641      	mov	r1, r8
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bcc:	f7fb f814 	bl	8000bf8 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	2164      	movs	r1, #100	; 0x64
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	3332      	adds	r3, #50	; 0x32
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <UART_SetConfig+0x4e4>)
 8005bea:	fba2 2303 	umull	r2, r3, r2, r3
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4422      	add	r2, r4
 8005bfc:	609a      	str	r2, [r3, #8]
}
 8005bfe:	bf00      	nop
 8005c00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c04:	46bd      	mov	sp, r7
 8005c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0a:	bf00      	nop
 8005c0c:	51eb851f 	.word	0x51eb851f

08005c10 <__errno>:
 8005c10:	4b01      	ldr	r3, [pc, #4]	; (8005c18 <__errno+0x8>)
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000018 	.word	0x20000018

08005c1c <__libc_init_array>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4d0d      	ldr	r5, [pc, #52]	; (8005c54 <__libc_init_array+0x38>)
 8005c20:	4c0d      	ldr	r4, [pc, #52]	; (8005c58 <__libc_init_array+0x3c>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	2600      	movs	r6, #0
 8005c28:	42a6      	cmp	r6, r4
 8005c2a:	d109      	bne.n	8005c40 <__libc_init_array+0x24>
 8005c2c:	4d0b      	ldr	r5, [pc, #44]	; (8005c5c <__libc_init_array+0x40>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	; (8005c60 <__libc_init_array+0x44>)
 8005c30:	f001 fbb8 	bl	80073a4 <_init>
 8005c34:	1b64      	subs	r4, r4, r5
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	2600      	movs	r6, #0
 8005c3a:	42a6      	cmp	r6, r4
 8005c3c:	d105      	bne.n	8005c4a <__libc_init_array+0x2e>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c44:	4798      	blx	r3
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7ee      	b.n	8005c28 <__libc_init_array+0xc>
 8005c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4e:	4798      	blx	r3
 8005c50:	3601      	adds	r6, #1
 8005c52:	e7f2      	b.n	8005c3a <__libc_init_array+0x1e>
 8005c54:	08007478 	.word	0x08007478
 8005c58:	08007478 	.word	0x08007478
 8005c5c:	08007478 	.word	0x08007478
 8005c60:	0800747c 	.word	0x0800747c

08005c64 <malloc>:
 8005c64:	4b02      	ldr	r3, [pc, #8]	; (8005c70 <malloc+0xc>)
 8005c66:	4601      	mov	r1, r0
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	f000 b88d 	b.w	8005d88 <_malloc_r>
 8005c6e:	bf00      	nop
 8005c70:	20000018 	.word	0x20000018

08005c74 <free>:
 8005c74:	4b02      	ldr	r3, [pc, #8]	; (8005c80 <free+0xc>)
 8005c76:	4601      	mov	r1, r0
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	f000 b819 	b.w	8005cb0 <_free_r>
 8005c7e:	bf00      	nop
 8005c80:	20000018 	.word	0x20000018

08005c84 <memcpy>:
 8005c84:	440a      	add	r2, r1
 8005c86:	4291      	cmp	r1, r2
 8005c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c8c:	d100      	bne.n	8005c90 <memcpy+0xc>
 8005c8e:	4770      	bx	lr
 8005c90:	b510      	push	{r4, lr}
 8005c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	d1f9      	bne.n	8005c92 <memcpy+0xe>
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <memset>:
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d100      	bne.n	8005caa <memset+0xa>
 8005ca8:	4770      	bx	lr
 8005caa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cae:	e7f9      	b.n	8005ca4 <memset+0x4>

08005cb0 <_free_r>:
 8005cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cb2:	2900      	cmp	r1, #0
 8005cb4:	d044      	beq.n	8005d40 <_free_r+0x90>
 8005cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cba:	9001      	str	r0, [sp, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8005cc2:	bfb8      	it	lt
 8005cc4:	18e4      	addlt	r4, r4, r3
 8005cc6:	f000 f903 	bl	8005ed0 <__malloc_lock>
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <_free_r+0x94>)
 8005ccc:	9801      	ldr	r0, [sp, #4]
 8005cce:	6813      	ldr	r3, [r2, #0]
 8005cd0:	b933      	cbnz	r3, 8005ce0 <_free_r+0x30>
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	6014      	str	r4, [r2, #0]
 8005cd6:	b003      	add	sp, #12
 8005cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cdc:	f000 b8fe 	b.w	8005edc <__malloc_unlock>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d908      	bls.n	8005cf6 <_free_r+0x46>
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	1961      	adds	r1, r4, r5
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf01      	itttt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	1949      	addeq	r1, r1, r5
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	e7ed      	b.n	8005cd2 <_free_r+0x22>
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b10b      	cbz	r3, 8005d00 <_free_r+0x50>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d9fa      	bls.n	8005cf6 <_free_r+0x46>
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	1855      	adds	r5, r2, r1
 8005d04:	42a5      	cmp	r5, r4
 8005d06:	d10b      	bne.n	8005d20 <_free_r+0x70>
 8005d08:	6824      	ldr	r4, [r4, #0]
 8005d0a:	4421      	add	r1, r4
 8005d0c:	1854      	adds	r4, r2, r1
 8005d0e:	42a3      	cmp	r3, r4
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	d1e0      	bne.n	8005cd6 <_free_r+0x26>
 8005d14:	681c      	ldr	r4, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6053      	str	r3, [r2, #4]
 8005d1a:	4421      	add	r1, r4
 8005d1c:	6011      	str	r1, [r2, #0]
 8005d1e:	e7da      	b.n	8005cd6 <_free_r+0x26>
 8005d20:	d902      	bls.n	8005d28 <_free_r+0x78>
 8005d22:	230c      	movs	r3, #12
 8005d24:	6003      	str	r3, [r0, #0]
 8005d26:	e7d6      	b.n	8005cd6 <_free_r+0x26>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1961      	adds	r1, r4, r5
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf04      	itt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	bf04      	itt	eq
 8005d38:	1949      	addeq	r1, r1, r5
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	6054      	str	r4, [r2, #4]
 8005d3e:	e7ca      	b.n	8005cd6 <_free_r+0x26>
 8005d40:	b003      	add	sp, #12
 8005d42:	bd30      	pop	{r4, r5, pc}
 8005d44:	20000bb8 	.word	0x20000bb8

08005d48 <sbrk_aligned>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4e0e      	ldr	r6, [pc, #56]	; (8005d84 <sbrk_aligned+0x3c>)
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	6831      	ldr	r1, [r6, #0]
 8005d50:	4605      	mov	r5, r0
 8005d52:	b911      	cbnz	r1, 8005d5a <sbrk_aligned+0x12>
 8005d54:	f000 f88c 	bl	8005e70 <_sbrk_r>
 8005d58:	6030      	str	r0, [r6, #0]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f000 f887 	bl	8005e70 <_sbrk_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d00a      	beq.n	8005d7c <sbrk_aligned+0x34>
 8005d66:	1cc4      	adds	r4, r0, #3
 8005d68:	f024 0403 	bic.w	r4, r4, #3
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d007      	beq.n	8005d80 <sbrk_aligned+0x38>
 8005d70:	1a21      	subs	r1, r4, r0
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 f87c 	bl	8005e70 <_sbrk_r>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d101      	bne.n	8005d80 <sbrk_aligned+0x38>
 8005d7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	20000bbc 	.word	0x20000bbc

08005d88 <_malloc_r>:
 8005d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8c:	1ccd      	adds	r5, r1, #3
 8005d8e:	f025 0503 	bic.w	r5, r5, #3
 8005d92:	3508      	adds	r5, #8
 8005d94:	2d0c      	cmp	r5, #12
 8005d96:	bf38      	it	cc
 8005d98:	250c      	movcc	r5, #12
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	db01      	blt.n	8005da4 <_malloc_r+0x1c>
 8005da0:	42a9      	cmp	r1, r5
 8005da2:	d905      	bls.n	8005db0 <_malloc_r+0x28>
 8005da4:	230c      	movs	r3, #12
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	2600      	movs	r6, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	4e2e      	ldr	r6, [pc, #184]	; (8005e6c <_malloc_r+0xe4>)
 8005db2:	f000 f88d 	bl	8005ed0 <__malloc_lock>
 8005db6:	6833      	ldr	r3, [r6, #0]
 8005db8:	461c      	mov	r4, r3
 8005dba:	bb34      	cbnz	r4, 8005e0a <_malloc_r+0x82>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f7ff ffc2 	bl	8005d48 <sbrk_aligned>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	d14d      	bne.n	8005e66 <_malloc_r+0xde>
 8005dca:	6834      	ldr	r4, [r6, #0]
 8005dcc:	4626      	mov	r6, r4
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	d140      	bne.n	8005e54 <_malloc_r+0xcc>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	eb04 0803 	add.w	r8, r4, r3
 8005ddc:	f000 f848 	bl	8005e70 <_sbrk_r>
 8005de0:	4580      	cmp	r8, r0
 8005de2:	d13a      	bne.n	8005e5a <_malloc_r+0xd2>
 8005de4:	6821      	ldr	r1, [r4, #0]
 8005de6:	3503      	adds	r5, #3
 8005de8:	1a6d      	subs	r5, r5, r1
 8005dea:	f025 0503 	bic.w	r5, r5, #3
 8005dee:	3508      	adds	r5, #8
 8005df0:	2d0c      	cmp	r5, #12
 8005df2:	bf38      	it	cc
 8005df4:	250c      	movcc	r5, #12
 8005df6:	4629      	mov	r1, r5
 8005df8:	4638      	mov	r0, r7
 8005dfa:	f7ff ffa5 	bl	8005d48 <sbrk_aligned>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d02b      	beq.n	8005e5a <_malloc_r+0xd2>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	442b      	add	r3, r5
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	e00e      	b.n	8005e28 <_malloc_r+0xa0>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	1b52      	subs	r2, r2, r5
 8005e0e:	d41e      	bmi.n	8005e4e <_malloc_r+0xc6>
 8005e10:	2a0b      	cmp	r2, #11
 8005e12:	d916      	bls.n	8005e42 <_malloc_r+0xba>
 8005e14:	1961      	adds	r1, r4, r5
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	6025      	str	r5, [r4, #0]
 8005e1a:	bf18      	it	ne
 8005e1c:	6059      	strne	r1, [r3, #4]
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	bf08      	it	eq
 8005e22:	6031      	streq	r1, [r6, #0]
 8005e24:	5162      	str	r2, [r4, r5]
 8005e26:	604b      	str	r3, [r1, #4]
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f104 060b 	add.w	r6, r4, #11
 8005e2e:	f000 f855 	bl	8005edc <__malloc_unlock>
 8005e32:	f026 0607 	bic.w	r6, r6, #7
 8005e36:	1d23      	adds	r3, r4, #4
 8005e38:	1af2      	subs	r2, r6, r3
 8005e3a:	d0b6      	beq.n	8005daa <_malloc_r+0x22>
 8005e3c:	1b9b      	subs	r3, r3, r6
 8005e3e:	50a3      	str	r3, [r4, r2]
 8005e40:	e7b3      	b.n	8005daa <_malloc_r+0x22>
 8005e42:	6862      	ldr	r2, [r4, #4]
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	bf0c      	ite	eq
 8005e48:	6032      	streq	r2, [r6, #0]
 8005e4a:	605a      	strne	r2, [r3, #4]
 8005e4c:	e7ec      	b.n	8005e28 <_malloc_r+0xa0>
 8005e4e:	4623      	mov	r3, r4
 8005e50:	6864      	ldr	r4, [r4, #4]
 8005e52:	e7b2      	b.n	8005dba <_malloc_r+0x32>
 8005e54:	4634      	mov	r4, r6
 8005e56:	6876      	ldr	r6, [r6, #4]
 8005e58:	e7b9      	b.n	8005dce <_malloc_r+0x46>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f000 f83c 	bl	8005edc <__malloc_unlock>
 8005e64:	e7a1      	b.n	8005daa <_malloc_r+0x22>
 8005e66:	6025      	str	r5, [r4, #0]
 8005e68:	e7de      	b.n	8005e28 <_malloc_r+0xa0>
 8005e6a:	bf00      	nop
 8005e6c:	20000bb8 	.word	0x20000bb8

08005e70 <_sbrk_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d06      	ldr	r5, [pc, #24]	; (8005e8c <_sbrk_r+0x1c>)
 8005e74:	2300      	movs	r3, #0
 8005e76:	4604      	mov	r4, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	602b      	str	r3, [r5, #0]
 8005e7c:	f7fc f9b2 	bl	80021e4 <_sbrk>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d102      	bne.n	8005e8a <_sbrk_r+0x1a>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <_sbrk_r+0x1a>
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	20000bc0 	.word	0x20000bc0

08005e90 <siprintf>:
 8005e90:	b40e      	push	{r1, r2, r3}
 8005e92:	b500      	push	{lr}
 8005e94:	b09c      	sub	sp, #112	; 0x70
 8005e96:	ab1d      	add	r3, sp, #116	; 0x74
 8005e98:	9002      	str	r0, [sp, #8]
 8005e9a:	9006      	str	r0, [sp, #24]
 8005e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ea0:	4809      	ldr	r0, [pc, #36]	; (8005ec8 <siprintf+0x38>)
 8005ea2:	9107      	str	r1, [sp, #28]
 8005ea4:	9104      	str	r1, [sp, #16]
 8005ea6:	4909      	ldr	r1, [pc, #36]	; (8005ecc <siprintf+0x3c>)
 8005ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eac:	9105      	str	r1, [sp, #20]
 8005eae:	6800      	ldr	r0, [r0, #0]
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	a902      	add	r1, sp, #8
 8005eb4:	f000 f874 	bl	8005fa0 <_svfiprintf_r>
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	b01c      	add	sp, #112	; 0x70
 8005ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec4:	b003      	add	sp, #12
 8005ec6:	4770      	bx	lr
 8005ec8:	20000018 	.word	0x20000018
 8005ecc:	ffff0208 	.word	0xffff0208

08005ed0 <__malloc_lock>:
 8005ed0:	4801      	ldr	r0, [pc, #4]	; (8005ed8 <__malloc_lock+0x8>)
 8005ed2:	f000 baf9 	b.w	80064c8 <__retarget_lock_acquire_recursive>
 8005ed6:	bf00      	nop
 8005ed8:	20000bc4 	.word	0x20000bc4

08005edc <__malloc_unlock>:
 8005edc:	4801      	ldr	r0, [pc, #4]	; (8005ee4 <__malloc_unlock+0x8>)
 8005ede:	f000 baf4 	b.w	80064ca <__retarget_lock_release_recursive>
 8005ee2:	bf00      	nop
 8005ee4:	20000bc4 	.word	0x20000bc4

08005ee8 <__ssputs_r>:
 8005ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	688e      	ldr	r6, [r1, #8]
 8005eee:	429e      	cmp	r6, r3
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	4690      	mov	r8, r2
 8005ef6:	461f      	mov	r7, r3
 8005ef8:	d838      	bhi.n	8005f6c <__ssputs_r+0x84>
 8005efa:	898a      	ldrh	r2, [r1, #12]
 8005efc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f00:	d032      	beq.n	8005f68 <__ssputs_r+0x80>
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	6909      	ldr	r1, [r1, #16]
 8005f06:	eba5 0901 	sub.w	r9, r5, r1
 8005f0a:	6965      	ldr	r5, [r4, #20]
 8005f0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f14:	3301      	adds	r3, #1
 8005f16:	444b      	add	r3, r9
 8005f18:	106d      	asrs	r5, r5, #1
 8005f1a:	429d      	cmp	r5, r3
 8005f1c:	bf38      	it	cc
 8005f1e:	461d      	movcc	r5, r3
 8005f20:	0553      	lsls	r3, r2, #21
 8005f22:	d531      	bpl.n	8005f88 <__ssputs_r+0xa0>
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7ff ff2f 	bl	8005d88 <_malloc_r>
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	b950      	cbnz	r0, 8005f44 <__ssputs_r+0x5c>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	f8ca 3000 	str.w	r3, [sl]
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	6921      	ldr	r1, [r4, #16]
 8005f46:	464a      	mov	r2, r9
 8005f48:	f7ff fe9c 	bl	8005c84 <memcpy>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	6126      	str	r6, [r4, #16]
 8005f5a:	6165      	str	r5, [r4, #20]
 8005f5c:	444e      	add	r6, r9
 8005f5e:	eba5 0509 	sub.w	r5, r5, r9
 8005f62:	6026      	str	r6, [r4, #0]
 8005f64:	60a5      	str	r5, [r4, #8]
 8005f66:	463e      	mov	r6, r7
 8005f68:	42be      	cmp	r6, r7
 8005f6a:	d900      	bls.n	8005f6e <__ssputs_r+0x86>
 8005f6c:	463e      	mov	r6, r7
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	4632      	mov	r2, r6
 8005f72:	4641      	mov	r1, r8
 8005f74:	f000 faaa 	bl	80064cc <memmove>
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	1b9b      	subs	r3, r3, r6
 8005f7c:	60a3      	str	r3, [r4, #8]
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	4433      	add	r3, r6
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	2000      	movs	r0, #0
 8005f86:	e7db      	b.n	8005f40 <__ssputs_r+0x58>
 8005f88:	462a      	mov	r2, r5
 8005f8a:	f000 fab9 	bl	8006500 <_realloc_r>
 8005f8e:	4606      	mov	r6, r0
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d1e1      	bne.n	8005f58 <__ssputs_r+0x70>
 8005f94:	6921      	ldr	r1, [r4, #16]
 8005f96:	4650      	mov	r0, sl
 8005f98:	f7ff fe8a 	bl	8005cb0 <_free_r>
 8005f9c:	e7c7      	b.n	8005f2e <__ssputs_r+0x46>
	...

08005fa0 <_svfiprintf_r>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	4698      	mov	r8, r3
 8005fa6:	898b      	ldrh	r3, [r1, #12]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	b09d      	sub	sp, #116	; 0x74
 8005fac:	4607      	mov	r7, r0
 8005fae:	460d      	mov	r5, r1
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	d50e      	bpl.n	8005fd2 <_svfiprintf_r+0x32>
 8005fb4:	690b      	ldr	r3, [r1, #16]
 8005fb6:	b963      	cbnz	r3, 8005fd2 <_svfiprintf_r+0x32>
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	f7ff fee5 	bl	8005d88 <_malloc_r>
 8005fbe:	6028      	str	r0, [r5, #0]
 8005fc0:	6128      	str	r0, [r5, #16]
 8005fc2:	b920      	cbnz	r0, 8005fce <_svfiprintf_r+0x2e>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fcc:	e0d1      	b.n	8006172 <_svfiprintf_r+0x1d2>
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	616b      	str	r3, [r5, #20]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd6:	2320      	movs	r3, #32
 8005fd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fe0:	2330      	movs	r3, #48	; 0x30
 8005fe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800618c <_svfiprintf_r+0x1ec>
 8005fe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fea:	f04f 0901 	mov.w	r9, #1
 8005fee:	4623      	mov	r3, r4
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ff6:	b10a      	cbz	r2, 8005ffc <_svfiprintf_r+0x5c>
 8005ff8:	2a25      	cmp	r2, #37	; 0x25
 8005ffa:	d1f9      	bne.n	8005ff0 <_svfiprintf_r+0x50>
 8005ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8006000:	d00b      	beq.n	800601a <_svfiprintf_r+0x7a>
 8006002:	465b      	mov	r3, fp
 8006004:	4622      	mov	r2, r4
 8006006:	4629      	mov	r1, r5
 8006008:	4638      	mov	r0, r7
 800600a:	f7ff ff6d 	bl	8005ee8 <__ssputs_r>
 800600e:	3001      	adds	r0, #1
 8006010:	f000 80aa 	beq.w	8006168 <_svfiprintf_r+0x1c8>
 8006014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006016:	445a      	add	r2, fp
 8006018:	9209      	str	r2, [sp, #36]	; 0x24
 800601a:	f89a 3000 	ldrb.w	r3, [sl]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80a2 	beq.w	8006168 <_svfiprintf_r+0x1c8>
 8006024:	2300      	movs	r3, #0
 8006026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800602a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800602e:	f10a 0a01 	add.w	sl, sl, #1
 8006032:	9304      	str	r3, [sp, #16]
 8006034:	9307      	str	r3, [sp, #28]
 8006036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800603a:	931a      	str	r3, [sp, #104]	; 0x68
 800603c:	4654      	mov	r4, sl
 800603e:	2205      	movs	r2, #5
 8006040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006044:	4851      	ldr	r0, [pc, #324]	; (800618c <_svfiprintf_r+0x1ec>)
 8006046:	f7fa f8cb 	bl	80001e0 <memchr>
 800604a:	9a04      	ldr	r2, [sp, #16]
 800604c:	b9d8      	cbnz	r0, 8006086 <_svfiprintf_r+0xe6>
 800604e:	06d0      	lsls	r0, r2, #27
 8006050:	bf44      	itt	mi
 8006052:	2320      	movmi	r3, #32
 8006054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006058:	0711      	lsls	r1, r2, #28
 800605a:	bf44      	itt	mi
 800605c:	232b      	movmi	r3, #43	; 0x2b
 800605e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006062:	f89a 3000 	ldrb.w	r3, [sl]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d015      	beq.n	8006096 <_svfiprintf_r+0xf6>
 800606a:	9a07      	ldr	r2, [sp, #28]
 800606c:	4654      	mov	r4, sl
 800606e:	2000      	movs	r0, #0
 8006070:	f04f 0c0a 	mov.w	ip, #10
 8006074:	4621      	mov	r1, r4
 8006076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800607a:	3b30      	subs	r3, #48	; 0x30
 800607c:	2b09      	cmp	r3, #9
 800607e:	d94e      	bls.n	800611e <_svfiprintf_r+0x17e>
 8006080:	b1b0      	cbz	r0, 80060b0 <_svfiprintf_r+0x110>
 8006082:	9207      	str	r2, [sp, #28]
 8006084:	e014      	b.n	80060b0 <_svfiprintf_r+0x110>
 8006086:	eba0 0308 	sub.w	r3, r0, r8
 800608a:	fa09 f303 	lsl.w	r3, r9, r3
 800608e:	4313      	orrs	r3, r2
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	46a2      	mov	sl, r4
 8006094:	e7d2      	b.n	800603c <_svfiprintf_r+0x9c>
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	1d19      	adds	r1, r3, #4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	9103      	str	r1, [sp, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfbb      	ittet	lt
 80060a2:	425b      	neglt	r3, r3
 80060a4:	f042 0202 	orrlt.w	r2, r2, #2
 80060a8:	9307      	strge	r3, [sp, #28]
 80060aa:	9307      	strlt	r3, [sp, #28]
 80060ac:	bfb8      	it	lt
 80060ae:	9204      	strlt	r2, [sp, #16]
 80060b0:	7823      	ldrb	r3, [r4, #0]
 80060b2:	2b2e      	cmp	r3, #46	; 0x2e
 80060b4:	d10c      	bne.n	80060d0 <_svfiprintf_r+0x130>
 80060b6:	7863      	ldrb	r3, [r4, #1]
 80060b8:	2b2a      	cmp	r3, #42	; 0x2a
 80060ba:	d135      	bne.n	8006128 <_svfiprintf_r+0x188>
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	1d1a      	adds	r2, r3, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	9203      	str	r2, [sp, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bfb8      	it	lt
 80060c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80060cc:	3402      	adds	r4, #2
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800619c <_svfiprintf_r+0x1fc>
 80060d4:	7821      	ldrb	r1, [r4, #0]
 80060d6:	2203      	movs	r2, #3
 80060d8:	4650      	mov	r0, sl
 80060da:	f7fa f881 	bl	80001e0 <memchr>
 80060de:	b140      	cbz	r0, 80060f2 <_svfiprintf_r+0x152>
 80060e0:	2340      	movs	r3, #64	; 0x40
 80060e2:	eba0 000a 	sub.w	r0, r0, sl
 80060e6:	fa03 f000 	lsl.w	r0, r3, r0
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	4303      	orrs	r3, r0
 80060ee:	3401      	adds	r4, #1
 80060f0:	9304      	str	r3, [sp, #16]
 80060f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f6:	4826      	ldr	r0, [pc, #152]	; (8006190 <_svfiprintf_r+0x1f0>)
 80060f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060fc:	2206      	movs	r2, #6
 80060fe:	f7fa f86f 	bl	80001e0 <memchr>
 8006102:	2800      	cmp	r0, #0
 8006104:	d038      	beq.n	8006178 <_svfiprintf_r+0x1d8>
 8006106:	4b23      	ldr	r3, [pc, #140]	; (8006194 <_svfiprintf_r+0x1f4>)
 8006108:	bb1b      	cbnz	r3, 8006152 <_svfiprintf_r+0x1b2>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	3307      	adds	r3, #7
 800610e:	f023 0307 	bic.w	r3, r3, #7
 8006112:	3308      	adds	r3, #8
 8006114:	9303      	str	r3, [sp, #12]
 8006116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006118:	4433      	add	r3, r6
 800611a:	9309      	str	r3, [sp, #36]	; 0x24
 800611c:	e767      	b.n	8005fee <_svfiprintf_r+0x4e>
 800611e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006122:	460c      	mov	r4, r1
 8006124:	2001      	movs	r0, #1
 8006126:	e7a5      	b.n	8006074 <_svfiprintf_r+0xd4>
 8006128:	2300      	movs	r3, #0
 800612a:	3401      	adds	r4, #1
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	4619      	mov	r1, r3
 8006130:	f04f 0c0a 	mov.w	ip, #10
 8006134:	4620      	mov	r0, r4
 8006136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800613a:	3a30      	subs	r2, #48	; 0x30
 800613c:	2a09      	cmp	r2, #9
 800613e:	d903      	bls.n	8006148 <_svfiprintf_r+0x1a8>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0c5      	beq.n	80060d0 <_svfiprintf_r+0x130>
 8006144:	9105      	str	r1, [sp, #20]
 8006146:	e7c3      	b.n	80060d0 <_svfiprintf_r+0x130>
 8006148:	fb0c 2101 	mla	r1, ip, r1, r2
 800614c:	4604      	mov	r4, r0
 800614e:	2301      	movs	r3, #1
 8006150:	e7f0      	b.n	8006134 <_svfiprintf_r+0x194>
 8006152:	ab03      	add	r3, sp, #12
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	462a      	mov	r2, r5
 8006158:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <_svfiprintf_r+0x1f8>)
 800615a:	a904      	add	r1, sp, #16
 800615c:	4638      	mov	r0, r7
 800615e:	f3af 8000 	nop.w
 8006162:	1c42      	adds	r2, r0, #1
 8006164:	4606      	mov	r6, r0
 8006166:	d1d6      	bne.n	8006116 <_svfiprintf_r+0x176>
 8006168:	89ab      	ldrh	r3, [r5, #12]
 800616a:	065b      	lsls	r3, r3, #25
 800616c:	f53f af2c 	bmi.w	8005fc8 <_svfiprintf_r+0x28>
 8006170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006172:	b01d      	add	sp, #116	; 0x74
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	ab03      	add	r3, sp, #12
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	462a      	mov	r2, r5
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <_svfiprintf_r+0x1f8>)
 8006180:	a904      	add	r1, sp, #16
 8006182:	4638      	mov	r0, r7
 8006184:	f000 f87a 	bl	800627c <_printf_i>
 8006188:	e7eb      	b.n	8006162 <_svfiprintf_r+0x1c2>
 800618a:	bf00      	nop
 800618c:	0800740c 	.word	0x0800740c
 8006190:	08007416 	.word	0x08007416
 8006194:	00000000 	.word	0x00000000
 8006198:	08005ee9 	.word	0x08005ee9
 800619c:	08007412 	.word	0x08007412

080061a0 <_printf_common>:
 80061a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a4:	4616      	mov	r6, r2
 80061a6:	4699      	mov	r9, r3
 80061a8:	688a      	ldr	r2, [r1, #8]
 80061aa:	690b      	ldr	r3, [r1, #16]
 80061ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061b0:	4293      	cmp	r3, r2
 80061b2:	bfb8      	it	lt
 80061b4:	4613      	movlt	r3, r2
 80061b6:	6033      	str	r3, [r6, #0]
 80061b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061bc:	4607      	mov	r7, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	b10a      	cbz	r2, 80061c6 <_printf_common+0x26>
 80061c2:	3301      	adds	r3, #1
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	0699      	lsls	r1, r3, #26
 80061ca:	bf42      	ittt	mi
 80061cc:	6833      	ldrmi	r3, [r6, #0]
 80061ce:	3302      	addmi	r3, #2
 80061d0:	6033      	strmi	r3, [r6, #0]
 80061d2:	6825      	ldr	r5, [r4, #0]
 80061d4:	f015 0506 	ands.w	r5, r5, #6
 80061d8:	d106      	bne.n	80061e8 <_printf_common+0x48>
 80061da:	f104 0a19 	add.w	sl, r4, #25
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	6832      	ldr	r2, [r6, #0]
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	42ab      	cmp	r3, r5
 80061e6:	dc26      	bgt.n	8006236 <_printf_common+0x96>
 80061e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061ec:	1e13      	subs	r3, r2, #0
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	bf18      	it	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	0692      	lsls	r2, r2, #26
 80061f6:	d42b      	bmi.n	8006250 <_printf_common+0xb0>
 80061f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061fc:	4649      	mov	r1, r9
 80061fe:	4638      	mov	r0, r7
 8006200:	47c0      	blx	r8
 8006202:	3001      	adds	r0, #1
 8006204:	d01e      	beq.n	8006244 <_printf_common+0xa4>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	68e5      	ldr	r5, [r4, #12]
 800620a:	6832      	ldr	r2, [r6, #0]
 800620c:	f003 0306 	and.w	r3, r3, #6
 8006210:	2b04      	cmp	r3, #4
 8006212:	bf08      	it	eq
 8006214:	1aad      	subeq	r5, r5, r2
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	6922      	ldr	r2, [r4, #16]
 800621a:	bf0c      	ite	eq
 800621c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006220:	2500      	movne	r5, #0
 8006222:	4293      	cmp	r3, r2
 8006224:	bfc4      	itt	gt
 8006226:	1a9b      	subgt	r3, r3, r2
 8006228:	18ed      	addgt	r5, r5, r3
 800622a:	2600      	movs	r6, #0
 800622c:	341a      	adds	r4, #26
 800622e:	42b5      	cmp	r5, r6
 8006230:	d11a      	bne.n	8006268 <_printf_common+0xc8>
 8006232:	2000      	movs	r0, #0
 8006234:	e008      	b.n	8006248 <_printf_common+0xa8>
 8006236:	2301      	movs	r3, #1
 8006238:	4652      	mov	r2, sl
 800623a:	4649      	mov	r1, r9
 800623c:	4638      	mov	r0, r7
 800623e:	47c0      	blx	r8
 8006240:	3001      	adds	r0, #1
 8006242:	d103      	bne.n	800624c <_printf_common+0xac>
 8006244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624c:	3501      	adds	r5, #1
 800624e:	e7c6      	b.n	80061de <_printf_common+0x3e>
 8006250:	18e1      	adds	r1, r4, r3
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	2030      	movs	r0, #48	; 0x30
 8006256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800625a:	4422      	add	r2, r4
 800625c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006264:	3302      	adds	r3, #2
 8006266:	e7c7      	b.n	80061f8 <_printf_common+0x58>
 8006268:	2301      	movs	r3, #1
 800626a:	4622      	mov	r2, r4
 800626c:	4649      	mov	r1, r9
 800626e:	4638      	mov	r0, r7
 8006270:	47c0      	blx	r8
 8006272:	3001      	adds	r0, #1
 8006274:	d0e6      	beq.n	8006244 <_printf_common+0xa4>
 8006276:	3601      	adds	r6, #1
 8006278:	e7d9      	b.n	800622e <_printf_common+0x8e>
	...

0800627c <_printf_i>:
 800627c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	7e0f      	ldrb	r7, [r1, #24]
 8006282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006284:	2f78      	cmp	r7, #120	; 0x78
 8006286:	4691      	mov	r9, r2
 8006288:	4680      	mov	r8, r0
 800628a:	460c      	mov	r4, r1
 800628c:	469a      	mov	sl, r3
 800628e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006292:	d807      	bhi.n	80062a4 <_printf_i+0x28>
 8006294:	2f62      	cmp	r7, #98	; 0x62
 8006296:	d80a      	bhi.n	80062ae <_printf_i+0x32>
 8006298:	2f00      	cmp	r7, #0
 800629a:	f000 80d8 	beq.w	800644e <_printf_i+0x1d2>
 800629e:	2f58      	cmp	r7, #88	; 0x58
 80062a0:	f000 80a3 	beq.w	80063ea <_printf_i+0x16e>
 80062a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062ac:	e03a      	b.n	8006324 <_printf_i+0xa8>
 80062ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062b2:	2b15      	cmp	r3, #21
 80062b4:	d8f6      	bhi.n	80062a4 <_printf_i+0x28>
 80062b6:	a101      	add	r1, pc, #4	; (adr r1, 80062bc <_printf_i+0x40>)
 80062b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062bc:	08006315 	.word	0x08006315
 80062c0:	08006329 	.word	0x08006329
 80062c4:	080062a5 	.word	0x080062a5
 80062c8:	080062a5 	.word	0x080062a5
 80062cc:	080062a5 	.word	0x080062a5
 80062d0:	080062a5 	.word	0x080062a5
 80062d4:	08006329 	.word	0x08006329
 80062d8:	080062a5 	.word	0x080062a5
 80062dc:	080062a5 	.word	0x080062a5
 80062e0:	080062a5 	.word	0x080062a5
 80062e4:	080062a5 	.word	0x080062a5
 80062e8:	08006435 	.word	0x08006435
 80062ec:	08006359 	.word	0x08006359
 80062f0:	08006417 	.word	0x08006417
 80062f4:	080062a5 	.word	0x080062a5
 80062f8:	080062a5 	.word	0x080062a5
 80062fc:	08006457 	.word	0x08006457
 8006300:	080062a5 	.word	0x080062a5
 8006304:	08006359 	.word	0x08006359
 8006308:	080062a5 	.word	0x080062a5
 800630c:	080062a5 	.word	0x080062a5
 8006310:	0800641f 	.word	0x0800641f
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	1d1a      	adds	r2, r3, #4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	602a      	str	r2, [r5, #0]
 800631c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006324:	2301      	movs	r3, #1
 8006326:	e0a3      	b.n	8006470 <_printf_i+0x1f4>
 8006328:	6820      	ldr	r0, [r4, #0]
 800632a:	6829      	ldr	r1, [r5, #0]
 800632c:	0606      	lsls	r6, r0, #24
 800632e:	f101 0304 	add.w	r3, r1, #4
 8006332:	d50a      	bpl.n	800634a <_printf_i+0xce>
 8006334:	680e      	ldr	r6, [r1, #0]
 8006336:	602b      	str	r3, [r5, #0]
 8006338:	2e00      	cmp	r6, #0
 800633a:	da03      	bge.n	8006344 <_printf_i+0xc8>
 800633c:	232d      	movs	r3, #45	; 0x2d
 800633e:	4276      	negs	r6, r6
 8006340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006344:	485e      	ldr	r0, [pc, #376]	; (80064c0 <_printf_i+0x244>)
 8006346:	230a      	movs	r3, #10
 8006348:	e019      	b.n	800637e <_printf_i+0x102>
 800634a:	680e      	ldr	r6, [r1, #0]
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006352:	bf18      	it	ne
 8006354:	b236      	sxthne	r6, r6
 8006356:	e7ef      	b.n	8006338 <_printf_i+0xbc>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	6820      	ldr	r0, [r4, #0]
 800635c:	1d19      	adds	r1, r3, #4
 800635e:	6029      	str	r1, [r5, #0]
 8006360:	0601      	lsls	r1, r0, #24
 8006362:	d501      	bpl.n	8006368 <_printf_i+0xec>
 8006364:	681e      	ldr	r6, [r3, #0]
 8006366:	e002      	b.n	800636e <_printf_i+0xf2>
 8006368:	0646      	lsls	r6, r0, #25
 800636a:	d5fb      	bpl.n	8006364 <_printf_i+0xe8>
 800636c:	881e      	ldrh	r6, [r3, #0]
 800636e:	4854      	ldr	r0, [pc, #336]	; (80064c0 <_printf_i+0x244>)
 8006370:	2f6f      	cmp	r7, #111	; 0x6f
 8006372:	bf0c      	ite	eq
 8006374:	2308      	moveq	r3, #8
 8006376:	230a      	movne	r3, #10
 8006378:	2100      	movs	r1, #0
 800637a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800637e:	6865      	ldr	r5, [r4, #4]
 8006380:	60a5      	str	r5, [r4, #8]
 8006382:	2d00      	cmp	r5, #0
 8006384:	bfa2      	ittt	ge
 8006386:	6821      	ldrge	r1, [r4, #0]
 8006388:	f021 0104 	bicge.w	r1, r1, #4
 800638c:	6021      	strge	r1, [r4, #0]
 800638e:	b90e      	cbnz	r6, 8006394 <_printf_i+0x118>
 8006390:	2d00      	cmp	r5, #0
 8006392:	d04d      	beq.n	8006430 <_printf_i+0x1b4>
 8006394:	4615      	mov	r5, r2
 8006396:	fbb6 f1f3 	udiv	r1, r6, r3
 800639a:	fb03 6711 	mls	r7, r3, r1, r6
 800639e:	5dc7      	ldrb	r7, [r0, r7]
 80063a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063a4:	4637      	mov	r7, r6
 80063a6:	42bb      	cmp	r3, r7
 80063a8:	460e      	mov	r6, r1
 80063aa:	d9f4      	bls.n	8006396 <_printf_i+0x11a>
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d10b      	bne.n	80063c8 <_printf_i+0x14c>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	07de      	lsls	r6, r3, #31
 80063b4:	d508      	bpl.n	80063c8 <_printf_i+0x14c>
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	6861      	ldr	r1, [r4, #4]
 80063ba:	4299      	cmp	r1, r3
 80063bc:	bfde      	ittt	le
 80063be:	2330      	movle	r3, #48	; 0x30
 80063c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80063c8:	1b52      	subs	r2, r2, r5
 80063ca:	6122      	str	r2, [r4, #16]
 80063cc:	f8cd a000 	str.w	sl, [sp]
 80063d0:	464b      	mov	r3, r9
 80063d2:	aa03      	add	r2, sp, #12
 80063d4:	4621      	mov	r1, r4
 80063d6:	4640      	mov	r0, r8
 80063d8:	f7ff fee2 	bl	80061a0 <_printf_common>
 80063dc:	3001      	adds	r0, #1
 80063de:	d14c      	bne.n	800647a <_printf_i+0x1fe>
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063e4:	b004      	add	sp, #16
 80063e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ea:	4835      	ldr	r0, [pc, #212]	; (80064c0 <_printf_i+0x244>)
 80063ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063f0:	6829      	ldr	r1, [r5, #0]
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80063f8:	6029      	str	r1, [r5, #0]
 80063fa:	061d      	lsls	r5, r3, #24
 80063fc:	d514      	bpl.n	8006428 <_printf_i+0x1ac>
 80063fe:	07df      	lsls	r7, r3, #31
 8006400:	bf44      	itt	mi
 8006402:	f043 0320 	orrmi.w	r3, r3, #32
 8006406:	6023      	strmi	r3, [r4, #0]
 8006408:	b91e      	cbnz	r6, 8006412 <_printf_i+0x196>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	f023 0320 	bic.w	r3, r3, #32
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	2310      	movs	r3, #16
 8006414:	e7b0      	b.n	8006378 <_printf_i+0xfc>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f043 0320 	orr.w	r3, r3, #32
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	2378      	movs	r3, #120	; 0x78
 8006420:	4828      	ldr	r0, [pc, #160]	; (80064c4 <_printf_i+0x248>)
 8006422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006426:	e7e3      	b.n	80063f0 <_printf_i+0x174>
 8006428:	0659      	lsls	r1, r3, #25
 800642a:	bf48      	it	mi
 800642c:	b2b6      	uxthmi	r6, r6
 800642e:	e7e6      	b.n	80063fe <_printf_i+0x182>
 8006430:	4615      	mov	r5, r2
 8006432:	e7bb      	b.n	80063ac <_printf_i+0x130>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6826      	ldr	r6, [r4, #0]
 8006438:	6961      	ldr	r1, [r4, #20]
 800643a:	1d18      	adds	r0, r3, #4
 800643c:	6028      	str	r0, [r5, #0]
 800643e:	0635      	lsls	r5, r6, #24
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	d501      	bpl.n	8006448 <_printf_i+0x1cc>
 8006444:	6019      	str	r1, [r3, #0]
 8006446:	e002      	b.n	800644e <_printf_i+0x1d2>
 8006448:	0670      	lsls	r0, r6, #25
 800644a:	d5fb      	bpl.n	8006444 <_printf_i+0x1c8>
 800644c:	8019      	strh	r1, [r3, #0]
 800644e:	2300      	movs	r3, #0
 8006450:	6123      	str	r3, [r4, #16]
 8006452:	4615      	mov	r5, r2
 8006454:	e7ba      	b.n	80063cc <_printf_i+0x150>
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	1d1a      	adds	r2, r3, #4
 800645a:	602a      	str	r2, [r5, #0]
 800645c:	681d      	ldr	r5, [r3, #0]
 800645e:	6862      	ldr	r2, [r4, #4]
 8006460:	2100      	movs	r1, #0
 8006462:	4628      	mov	r0, r5
 8006464:	f7f9 febc 	bl	80001e0 <memchr>
 8006468:	b108      	cbz	r0, 800646e <_printf_i+0x1f2>
 800646a:	1b40      	subs	r0, r0, r5
 800646c:	6060      	str	r0, [r4, #4]
 800646e:	6863      	ldr	r3, [r4, #4]
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	2300      	movs	r3, #0
 8006474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006478:	e7a8      	b.n	80063cc <_printf_i+0x150>
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	462a      	mov	r2, r5
 800647e:	4649      	mov	r1, r9
 8006480:	4640      	mov	r0, r8
 8006482:	47d0      	blx	sl
 8006484:	3001      	adds	r0, #1
 8006486:	d0ab      	beq.n	80063e0 <_printf_i+0x164>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	079b      	lsls	r3, r3, #30
 800648c:	d413      	bmi.n	80064b6 <_printf_i+0x23a>
 800648e:	68e0      	ldr	r0, [r4, #12]
 8006490:	9b03      	ldr	r3, [sp, #12]
 8006492:	4298      	cmp	r0, r3
 8006494:	bfb8      	it	lt
 8006496:	4618      	movlt	r0, r3
 8006498:	e7a4      	b.n	80063e4 <_printf_i+0x168>
 800649a:	2301      	movs	r3, #1
 800649c:	4632      	mov	r2, r6
 800649e:	4649      	mov	r1, r9
 80064a0:	4640      	mov	r0, r8
 80064a2:	47d0      	blx	sl
 80064a4:	3001      	adds	r0, #1
 80064a6:	d09b      	beq.n	80063e0 <_printf_i+0x164>
 80064a8:	3501      	adds	r5, #1
 80064aa:	68e3      	ldr	r3, [r4, #12]
 80064ac:	9903      	ldr	r1, [sp, #12]
 80064ae:	1a5b      	subs	r3, r3, r1
 80064b0:	42ab      	cmp	r3, r5
 80064b2:	dcf2      	bgt.n	800649a <_printf_i+0x21e>
 80064b4:	e7eb      	b.n	800648e <_printf_i+0x212>
 80064b6:	2500      	movs	r5, #0
 80064b8:	f104 0619 	add.w	r6, r4, #25
 80064bc:	e7f5      	b.n	80064aa <_printf_i+0x22e>
 80064be:	bf00      	nop
 80064c0:	0800741d 	.word	0x0800741d
 80064c4:	0800742e 	.word	0x0800742e

080064c8 <__retarget_lock_acquire_recursive>:
 80064c8:	4770      	bx	lr

080064ca <__retarget_lock_release_recursive>:
 80064ca:	4770      	bx	lr

080064cc <memmove>:
 80064cc:	4288      	cmp	r0, r1
 80064ce:	b510      	push	{r4, lr}
 80064d0:	eb01 0402 	add.w	r4, r1, r2
 80064d4:	d902      	bls.n	80064dc <memmove+0x10>
 80064d6:	4284      	cmp	r4, r0
 80064d8:	4623      	mov	r3, r4
 80064da:	d807      	bhi.n	80064ec <memmove+0x20>
 80064dc:	1e43      	subs	r3, r0, #1
 80064de:	42a1      	cmp	r1, r4
 80064e0:	d008      	beq.n	80064f4 <memmove+0x28>
 80064e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ea:	e7f8      	b.n	80064de <memmove+0x12>
 80064ec:	4402      	add	r2, r0
 80064ee:	4601      	mov	r1, r0
 80064f0:	428a      	cmp	r2, r1
 80064f2:	d100      	bne.n	80064f6 <memmove+0x2a>
 80064f4:	bd10      	pop	{r4, pc}
 80064f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064fe:	e7f7      	b.n	80064f0 <memmove+0x24>

08006500 <_realloc_r>:
 8006500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006504:	4680      	mov	r8, r0
 8006506:	4614      	mov	r4, r2
 8006508:	460e      	mov	r6, r1
 800650a:	b921      	cbnz	r1, 8006516 <_realloc_r+0x16>
 800650c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006510:	4611      	mov	r1, r2
 8006512:	f7ff bc39 	b.w	8005d88 <_malloc_r>
 8006516:	b92a      	cbnz	r2, 8006524 <_realloc_r+0x24>
 8006518:	f7ff fbca 	bl	8005cb0 <_free_r>
 800651c:	4625      	mov	r5, r4
 800651e:	4628      	mov	r0, r5
 8006520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006524:	f000 f81b 	bl	800655e <_malloc_usable_size_r>
 8006528:	4284      	cmp	r4, r0
 800652a:	4607      	mov	r7, r0
 800652c:	d802      	bhi.n	8006534 <_realloc_r+0x34>
 800652e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006532:	d812      	bhi.n	800655a <_realloc_r+0x5a>
 8006534:	4621      	mov	r1, r4
 8006536:	4640      	mov	r0, r8
 8006538:	f7ff fc26 	bl	8005d88 <_malloc_r>
 800653c:	4605      	mov	r5, r0
 800653e:	2800      	cmp	r0, #0
 8006540:	d0ed      	beq.n	800651e <_realloc_r+0x1e>
 8006542:	42bc      	cmp	r4, r7
 8006544:	4622      	mov	r2, r4
 8006546:	4631      	mov	r1, r6
 8006548:	bf28      	it	cs
 800654a:	463a      	movcs	r2, r7
 800654c:	f7ff fb9a 	bl	8005c84 <memcpy>
 8006550:	4631      	mov	r1, r6
 8006552:	4640      	mov	r0, r8
 8006554:	f7ff fbac 	bl	8005cb0 <_free_r>
 8006558:	e7e1      	b.n	800651e <_realloc_r+0x1e>
 800655a:	4635      	mov	r5, r6
 800655c:	e7df      	b.n	800651e <_realloc_r+0x1e>

0800655e <_malloc_usable_size_r>:
 800655e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006562:	1f18      	subs	r0, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfbc      	itt	lt
 8006568:	580b      	ldrlt	r3, [r1, r0]
 800656a:	18c0      	addlt	r0, r0, r3
 800656c:	4770      	bx	lr
	...

08006570 <pow>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	ed2d 8b02 	vpush	{d8}
 8006576:	eeb0 8a40 	vmov.f32	s16, s0
 800657a:	eef0 8a60 	vmov.f32	s17, s1
 800657e:	ec55 4b11 	vmov	r4, r5, d1
 8006582:	f000 f865 	bl	8006650 <__ieee754_pow>
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	4620      	mov	r0, r4
 800658c:	4629      	mov	r1, r5
 800658e:	ec57 6b10 	vmov	r6, r7, d0
 8006592:	f7fa facb 	bl	8000b2c <__aeabi_dcmpun>
 8006596:	2800      	cmp	r0, #0
 8006598:	d13b      	bne.n	8006612 <pow+0xa2>
 800659a:	ec51 0b18 	vmov	r0, r1, d8
 800659e:	2200      	movs	r2, #0
 80065a0:	2300      	movs	r3, #0
 80065a2:	f7fa fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a6:	b1b8      	cbz	r0, 80065d8 <pow+0x68>
 80065a8:	2200      	movs	r2, #0
 80065aa:	2300      	movs	r3, #0
 80065ac:	4620      	mov	r0, r4
 80065ae:	4629      	mov	r1, r5
 80065b0:	f7fa fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d146      	bne.n	8006646 <pow+0xd6>
 80065b8:	ec45 4b10 	vmov	d0, r4, r5
 80065bc:	f000 fe61 	bl	8007282 <finite>
 80065c0:	b338      	cbz	r0, 8006612 <pow+0xa2>
 80065c2:	2200      	movs	r2, #0
 80065c4:	2300      	movs	r3, #0
 80065c6:	4620      	mov	r0, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7fa fa87 	bl	8000adc <__aeabi_dcmplt>
 80065ce:	b300      	cbz	r0, 8006612 <pow+0xa2>
 80065d0:	f7ff fb1e 	bl	8005c10 <__errno>
 80065d4:	2322      	movs	r3, #34	; 0x22
 80065d6:	e01b      	b.n	8006610 <pow+0xa0>
 80065d8:	ec47 6b10 	vmov	d0, r6, r7
 80065dc:	f000 fe51 	bl	8007282 <finite>
 80065e0:	b9e0      	cbnz	r0, 800661c <pow+0xac>
 80065e2:	eeb0 0a48 	vmov.f32	s0, s16
 80065e6:	eef0 0a68 	vmov.f32	s1, s17
 80065ea:	f000 fe4a 	bl	8007282 <finite>
 80065ee:	b1a8      	cbz	r0, 800661c <pow+0xac>
 80065f0:	ec45 4b10 	vmov	d0, r4, r5
 80065f4:	f000 fe45 	bl	8007282 <finite>
 80065f8:	b180      	cbz	r0, 800661c <pow+0xac>
 80065fa:	4632      	mov	r2, r6
 80065fc:	463b      	mov	r3, r7
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7fa fa93 	bl	8000b2c <__aeabi_dcmpun>
 8006606:	2800      	cmp	r0, #0
 8006608:	d0e2      	beq.n	80065d0 <pow+0x60>
 800660a:	f7ff fb01 	bl	8005c10 <__errno>
 800660e:	2321      	movs	r3, #33	; 0x21
 8006610:	6003      	str	r3, [r0, #0]
 8006612:	ecbd 8b02 	vpop	{d8}
 8006616:	ec47 6b10 	vmov	d0, r6, r7
 800661a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800661c:	2200      	movs	r2, #0
 800661e:	2300      	movs	r3, #0
 8006620:	4630      	mov	r0, r6
 8006622:	4639      	mov	r1, r7
 8006624:	f7fa fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0f2      	beq.n	8006612 <pow+0xa2>
 800662c:	eeb0 0a48 	vmov.f32	s0, s16
 8006630:	eef0 0a68 	vmov.f32	s1, s17
 8006634:	f000 fe25 	bl	8007282 <finite>
 8006638:	2800      	cmp	r0, #0
 800663a:	d0ea      	beq.n	8006612 <pow+0xa2>
 800663c:	ec45 4b10 	vmov	d0, r4, r5
 8006640:	f000 fe1f 	bl	8007282 <finite>
 8006644:	e7c3      	b.n	80065ce <pow+0x5e>
 8006646:	4f01      	ldr	r7, [pc, #4]	; (800664c <pow+0xdc>)
 8006648:	2600      	movs	r6, #0
 800664a:	e7e2      	b.n	8006612 <pow+0xa2>
 800664c:	3ff00000 	.word	0x3ff00000

08006650 <__ieee754_pow>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	ed2d 8b06 	vpush	{d8-d10}
 8006658:	b089      	sub	sp, #36	; 0x24
 800665a:	ed8d 1b00 	vstr	d1, [sp]
 800665e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006662:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006666:	ea58 0102 	orrs.w	r1, r8, r2
 800666a:	ec57 6b10 	vmov	r6, r7, d0
 800666e:	d115      	bne.n	800669c <__ieee754_pow+0x4c>
 8006670:	19b3      	adds	r3, r6, r6
 8006672:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006676:	4152      	adcs	r2, r2
 8006678:	4299      	cmp	r1, r3
 800667a:	4b89      	ldr	r3, [pc, #548]	; (80068a0 <__ieee754_pow+0x250>)
 800667c:	4193      	sbcs	r3, r2
 800667e:	f080 84d2 	bcs.w	8007026 <__ieee754_pow+0x9d6>
 8006682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006686:	4630      	mov	r0, r6
 8006688:	4639      	mov	r1, r7
 800668a:	f7f9 fdff 	bl	800028c <__adddf3>
 800668e:	ec41 0b10 	vmov	d0, r0, r1
 8006692:	b009      	add	sp, #36	; 0x24
 8006694:	ecbd 8b06 	vpop	{d8-d10}
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	4b81      	ldr	r3, [pc, #516]	; (80068a4 <__ieee754_pow+0x254>)
 800669e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80066a2:	429c      	cmp	r4, r3
 80066a4:	ee10 aa10 	vmov	sl, s0
 80066a8:	463d      	mov	r5, r7
 80066aa:	dc06      	bgt.n	80066ba <__ieee754_pow+0x6a>
 80066ac:	d101      	bne.n	80066b2 <__ieee754_pow+0x62>
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d1e7      	bne.n	8006682 <__ieee754_pow+0x32>
 80066b2:	4598      	cmp	r8, r3
 80066b4:	dc01      	bgt.n	80066ba <__ieee754_pow+0x6a>
 80066b6:	d10f      	bne.n	80066d8 <__ieee754_pow+0x88>
 80066b8:	b172      	cbz	r2, 80066d8 <__ieee754_pow+0x88>
 80066ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80066be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80066c2:	ea55 050a 	orrs.w	r5, r5, sl
 80066c6:	d1dc      	bne.n	8006682 <__ieee754_pow+0x32>
 80066c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80066cc:	18db      	adds	r3, r3, r3
 80066ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80066d2:	4152      	adcs	r2, r2
 80066d4:	429d      	cmp	r5, r3
 80066d6:	e7d0      	b.n	800667a <__ieee754_pow+0x2a>
 80066d8:	2d00      	cmp	r5, #0
 80066da:	da3b      	bge.n	8006754 <__ieee754_pow+0x104>
 80066dc:	4b72      	ldr	r3, [pc, #456]	; (80068a8 <__ieee754_pow+0x258>)
 80066de:	4598      	cmp	r8, r3
 80066e0:	dc51      	bgt.n	8006786 <__ieee754_pow+0x136>
 80066e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80066e6:	4598      	cmp	r8, r3
 80066e8:	f340 84ac 	ble.w	8007044 <__ieee754_pow+0x9f4>
 80066ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80066f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80066f4:	2b14      	cmp	r3, #20
 80066f6:	dd0f      	ble.n	8006718 <__ieee754_pow+0xc8>
 80066f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80066fc:	fa22 f103 	lsr.w	r1, r2, r3
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	4293      	cmp	r3, r2
 8006706:	f040 849d 	bne.w	8007044 <__ieee754_pow+0x9f4>
 800670a:	f001 0101 	and.w	r1, r1, #1
 800670e:	f1c1 0302 	rsb	r3, r1, #2
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	b182      	cbz	r2, 8006738 <__ieee754_pow+0xe8>
 8006716:	e05f      	b.n	80067d8 <__ieee754_pow+0x188>
 8006718:	2a00      	cmp	r2, #0
 800671a:	d15b      	bne.n	80067d4 <__ieee754_pow+0x184>
 800671c:	f1c3 0314 	rsb	r3, r3, #20
 8006720:	fa48 f103 	asr.w	r1, r8, r3
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	4543      	cmp	r3, r8
 800672a:	f040 8488 	bne.w	800703e <__ieee754_pow+0x9ee>
 800672e:	f001 0101 	and.w	r1, r1, #1
 8006732:	f1c1 0302 	rsb	r3, r1, #2
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	4b5c      	ldr	r3, [pc, #368]	; (80068ac <__ieee754_pow+0x25c>)
 800673a:	4598      	cmp	r8, r3
 800673c:	d132      	bne.n	80067a4 <__ieee754_pow+0x154>
 800673e:	f1b9 0f00 	cmp.w	r9, #0
 8006742:	f280 8478 	bge.w	8007036 <__ieee754_pow+0x9e6>
 8006746:	4959      	ldr	r1, [pc, #356]	; (80068ac <__ieee754_pow+0x25c>)
 8006748:	4632      	mov	r2, r6
 800674a:	463b      	mov	r3, r7
 800674c:	2000      	movs	r0, #0
 800674e:	f7fa f87d 	bl	800084c <__aeabi_ddiv>
 8006752:	e79c      	b.n	800668e <__ieee754_pow+0x3e>
 8006754:	2300      	movs	r3, #0
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	2a00      	cmp	r2, #0
 800675a:	d13d      	bne.n	80067d8 <__ieee754_pow+0x188>
 800675c:	4b51      	ldr	r3, [pc, #324]	; (80068a4 <__ieee754_pow+0x254>)
 800675e:	4598      	cmp	r8, r3
 8006760:	d1ea      	bne.n	8006738 <__ieee754_pow+0xe8>
 8006762:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006766:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800676a:	ea53 030a 	orrs.w	r3, r3, sl
 800676e:	f000 845a 	beq.w	8007026 <__ieee754_pow+0x9d6>
 8006772:	4b4f      	ldr	r3, [pc, #316]	; (80068b0 <__ieee754_pow+0x260>)
 8006774:	429c      	cmp	r4, r3
 8006776:	dd08      	ble.n	800678a <__ieee754_pow+0x13a>
 8006778:	f1b9 0f00 	cmp.w	r9, #0
 800677c:	f2c0 8457 	blt.w	800702e <__ieee754_pow+0x9de>
 8006780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006784:	e783      	b.n	800668e <__ieee754_pow+0x3e>
 8006786:	2302      	movs	r3, #2
 8006788:	e7e5      	b.n	8006756 <__ieee754_pow+0x106>
 800678a:	f1b9 0f00 	cmp.w	r9, #0
 800678e:	f04f 0000 	mov.w	r0, #0
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	f6bf af7a 	bge.w	800668e <__ieee754_pow+0x3e>
 800679a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800679e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80067a2:	e774      	b.n	800668e <__ieee754_pow+0x3e>
 80067a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80067a8:	d106      	bne.n	80067b8 <__ieee754_pow+0x168>
 80067aa:	4632      	mov	r2, r6
 80067ac:	463b      	mov	r3, r7
 80067ae:	4630      	mov	r0, r6
 80067b0:	4639      	mov	r1, r7
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	e76a      	b.n	800668e <__ieee754_pow+0x3e>
 80067b8:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <__ieee754_pow+0x264>)
 80067ba:	4599      	cmp	r9, r3
 80067bc:	d10c      	bne.n	80067d8 <__ieee754_pow+0x188>
 80067be:	2d00      	cmp	r5, #0
 80067c0:	db0a      	blt.n	80067d8 <__ieee754_pow+0x188>
 80067c2:	ec47 6b10 	vmov	d0, r6, r7
 80067c6:	b009      	add	sp, #36	; 0x24
 80067c8:	ecbd 8b06 	vpop	{d8-d10}
 80067cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	f000 bc6c 	b.w	80070ac <__ieee754_sqrt>
 80067d4:	2300      	movs	r3, #0
 80067d6:	9304      	str	r3, [sp, #16]
 80067d8:	ec47 6b10 	vmov	d0, r6, r7
 80067dc:	f000 fd48 	bl	8007270 <fabs>
 80067e0:	ec51 0b10 	vmov	r0, r1, d0
 80067e4:	f1ba 0f00 	cmp.w	sl, #0
 80067e8:	d129      	bne.n	800683e <__ieee754_pow+0x1ee>
 80067ea:	b124      	cbz	r4, 80067f6 <__ieee754_pow+0x1a6>
 80067ec:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <__ieee754_pow+0x25c>)
 80067ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d123      	bne.n	800683e <__ieee754_pow+0x1ee>
 80067f6:	f1b9 0f00 	cmp.w	r9, #0
 80067fa:	da05      	bge.n	8006808 <__ieee754_pow+0x1b8>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	2000      	movs	r0, #0
 8006802:	492a      	ldr	r1, [pc, #168]	; (80068ac <__ieee754_pow+0x25c>)
 8006804:	f7fa f822 	bl	800084c <__aeabi_ddiv>
 8006808:	2d00      	cmp	r5, #0
 800680a:	f6bf af40 	bge.w	800668e <__ieee754_pow+0x3e>
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006814:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006818:	4323      	orrs	r3, r4
 800681a:	d108      	bne.n	800682e <__ieee754_pow+0x1de>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4610      	mov	r0, r2
 8006822:	4619      	mov	r1, r3
 8006824:	f7f9 fd30 	bl	8000288 <__aeabi_dsub>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	e78f      	b.n	800674e <__ieee754_pow+0xfe>
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	2b01      	cmp	r3, #1
 8006832:	f47f af2c 	bne.w	800668e <__ieee754_pow+0x3e>
 8006836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800683a:	4619      	mov	r1, r3
 800683c:	e727      	b.n	800668e <__ieee754_pow+0x3e>
 800683e:	0feb      	lsrs	r3, r5, #31
 8006840:	3b01      	subs	r3, #1
 8006842:	9306      	str	r3, [sp, #24]
 8006844:	9a06      	ldr	r2, [sp, #24]
 8006846:	9b04      	ldr	r3, [sp, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	d102      	bne.n	8006852 <__ieee754_pow+0x202>
 800684c:	4632      	mov	r2, r6
 800684e:	463b      	mov	r3, r7
 8006850:	e7e6      	b.n	8006820 <__ieee754_pow+0x1d0>
 8006852:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <__ieee754_pow+0x268>)
 8006854:	4598      	cmp	r8, r3
 8006856:	f340 80fb 	ble.w	8006a50 <__ieee754_pow+0x400>
 800685a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800685e:	4598      	cmp	r8, r3
 8006860:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <__ieee754_pow+0x260>)
 8006862:	dd0c      	ble.n	800687e <__ieee754_pow+0x22e>
 8006864:	429c      	cmp	r4, r3
 8006866:	dc0f      	bgt.n	8006888 <__ieee754_pow+0x238>
 8006868:	f1b9 0f00 	cmp.w	r9, #0
 800686c:	da0f      	bge.n	800688e <__ieee754_pow+0x23e>
 800686e:	2000      	movs	r0, #0
 8006870:	b009      	add	sp, #36	; 0x24
 8006872:	ecbd 8b06 	vpop	{d8-d10}
 8006876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	f000 bcf0 	b.w	800725e <__math_oflow>
 800687e:	429c      	cmp	r4, r3
 8006880:	dbf2      	blt.n	8006868 <__ieee754_pow+0x218>
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <__ieee754_pow+0x25c>)
 8006884:	429c      	cmp	r4, r3
 8006886:	dd19      	ble.n	80068bc <__ieee754_pow+0x26c>
 8006888:	f1b9 0f00 	cmp.w	r9, #0
 800688c:	dcef      	bgt.n	800686e <__ieee754_pow+0x21e>
 800688e:	2000      	movs	r0, #0
 8006890:	b009      	add	sp, #36	; 0x24
 8006892:	ecbd 8b06 	vpop	{d8-d10}
 8006896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	f000 bcd7 	b.w	800724c <__math_uflow>
 800689e:	bf00      	nop
 80068a0:	fff00000 	.word	0xfff00000
 80068a4:	7ff00000 	.word	0x7ff00000
 80068a8:	433fffff 	.word	0x433fffff
 80068ac:	3ff00000 	.word	0x3ff00000
 80068b0:	3fefffff 	.word	0x3fefffff
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	41e00000 	.word	0x41e00000
 80068bc:	4b60      	ldr	r3, [pc, #384]	; (8006a40 <__ieee754_pow+0x3f0>)
 80068be:	2200      	movs	r2, #0
 80068c0:	f7f9 fce2 	bl	8000288 <__aeabi_dsub>
 80068c4:	a354      	add	r3, pc, #336	; (adr r3, 8006a18 <__ieee754_pow+0x3c8>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	4604      	mov	r4, r0
 80068cc:	460d      	mov	r5, r1
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	a353      	add	r3, pc, #332	; (adr r3, 8006a20 <__ieee754_pow+0x3d0>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	4606      	mov	r6, r0
 80068da:	460f      	mov	r7, r1
 80068dc:	4620      	mov	r0, r4
 80068de:	4629      	mov	r1, r5
 80068e0:	f7f9 fe8a 	bl	80005f8 <__aeabi_dmul>
 80068e4:	4b57      	ldr	r3, [pc, #348]	; (8006a44 <__ieee754_pow+0x3f4>)
 80068e6:	4682      	mov	sl, r0
 80068e8:	468b      	mov	fp, r1
 80068ea:	2200      	movs	r2, #0
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fe82 	bl	80005f8 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	a14b      	add	r1, pc, #300	; (adr r1, 8006a28 <__ieee754_pow+0x3d8>)
 80068fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068fe:	f7f9 fcc3 	bl	8000288 <__aeabi_dsub>
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	2000      	movs	r0, #0
 8006910:	494d      	ldr	r1, [pc, #308]	; (8006a48 <__ieee754_pow+0x3f8>)
 8006912:	f7f9 fcb9 	bl	8000288 <__aeabi_dsub>
 8006916:	4622      	mov	r2, r4
 8006918:	4680      	mov	r8, r0
 800691a:	4689      	mov	r9, r1
 800691c:	462b      	mov	r3, r5
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7f9 fe69 	bl	80005f8 <__aeabi_dmul>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7f9 fe63 	bl	80005f8 <__aeabi_dmul>
 8006932:	a33f      	add	r3, pc, #252	; (adr r3, 8006a30 <__ieee754_pow+0x3e0>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4650      	mov	r0, sl
 8006942:	4659      	mov	r1, fp
 8006944:	f7f9 fca0 	bl	8000288 <__aeabi_dsub>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4680      	mov	r8, r0
 800694e:	4689      	mov	r9, r1
 8006950:	4630      	mov	r0, r6
 8006952:	4639      	mov	r1, r7
 8006954:	f7f9 fc9a 	bl	800028c <__adddf3>
 8006958:	2000      	movs	r0, #0
 800695a:	4632      	mov	r2, r6
 800695c:	463b      	mov	r3, r7
 800695e:	4604      	mov	r4, r0
 8006960:	460d      	mov	r5, r1
 8006962:	f7f9 fc91 	bl	8000288 <__aeabi_dsub>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7f9 fc8b 	bl	8000288 <__aeabi_dsub>
 8006972:	9b04      	ldr	r3, [sp, #16]
 8006974:	9a06      	ldr	r2, [sp, #24]
 8006976:	3b01      	subs	r3, #1
 8006978:	4313      	orrs	r3, r2
 800697a:	4682      	mov	sl, r0
 800697c:	468b      	mov	fp, r1
 800697e:	f040 81e7 	bne.w	8006d50 <__ieee754_pow+0x700>
 8006982:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006a38 <__ieee754_pow+0x3e8>
 8006986:	eeb0 8a47 	vmov.f32	s16, s14
 800698a:	eef0 8a67 	vmov.f32	s17, s15
 800698e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006992:	2600      	movs	r6, #0
 8006994:	4632      	mov	r2, r6
 8006996:	463b      	mov	r3, r7
 8006998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800699c:	f7f9 fc74 	bl	8000288 <__aeabi_dsub>
 80069a0:	4622      	mov	r2, r4
 80069a2:	462b      	mov	r3, r5
 80069a4:	f7f9 fe28 	bl	80005f8 <__aeabi_dmul>
 80069a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	4650      	mov	r0, sl
 80069b2:	4659      	mov	r1, fp
 80069b4:	f7f9 fe20 	bl	80005f8 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7f9 fc64 	bl	800028c <__adddf3>
 80069c4:	4632      	mov	r2, r6
 80069c6:	463b      	mov	r3, r7
 80069c8:	4680      	mov	r8, r0
 80069ca:	4689      	mov	r9, r1
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	f7f9 fe12 	bl	80005f8 <__aeabi_dmul>
 80069d4:	460b      	mov	r3, r1
 80069d6:	4604      	mov	r4, r0
 80069d8:	460d      	mov	r5, r1
 80069da:	4602      	mov	r2, r0
 80069dc:	4649      	mov	r1, r9
 80069de:	4640      	mov	r0, r8
 80069e0:	f7f9 fc54 	bl	800028c <__adddf3>
 80069e4:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <__ieee754_pow+0x3fc>)
 80069e6:	4299      	cmp	r1, r3
 80069e8:	ec45 4b19 	vmov	d9, r4, r5
 80069ec:	4606      	mov	r6, r0
 80069ee:	460f      	mov	r7, r1
 80069f0:	468b      	mov	fp, r1
 80069f2:	f340 82f1 	ble.w	8006fd8 <__ieee754_pow+0x988>
 80069f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80069fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80069fe:	4303      	orrs	r3, r0
 8006a00:	f000 81e4 	beq.w	8006dcc <__ieee754_pow+0x77c>
 8006a04:	ec51 0b18 	vmov	r0, r1, d8
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f7fa f866 	bl	8000adc <__aeabi_dcmplt>
 8006a10:	3800      	subs	r0, #0
 8006a12:	bf18      	it	ne
 8006a14:	2001      	movne	r0, #1
 8006a16:	e72b      	b.n	8006870 <__ieee754_pow+0x220>
 8006a18:	60000000 	.word	0x60000000
 8006a1c:	3ff71547 	.word	0x3ff71547
 8006a20:	f85ddf44 	.word	0xf85ddf44
 8006a24:	3e54ae0b 	.word	0x3e54ae0b
 8006a28:	55555555 	.word	0x55555555
 8006a2c:	3fd55555 	.word	0x3fd55555
 8006a30:	652b82fe 	.word	0x652b82fe
 8006a34:	3ff71547 	.word	0x3ff71547
 8006a38:	00000000 	.word	0x00000000
 8006a3c:	bff00000 	.word	0xbff00000
 8006a40:	3ff00000 	.word	0x3ff00000
 8006a44:	3fd00000 	.word	0x3fd00000
 8006a48:	3fe00000 	.word	0x3fe00000
 8006a4c:	408fffff 	.word	0x408fffff
 8006a50:	4bd5      	ldr	r3, [pc, #852]	; (8006da8 <__ieee754_pow+0x758>)
 8006a52:	402b      	ands	r3, r5
 8006a54:	2200      	movs	r2, #0
 8006a56:	b92b      	cbnz	r3, 8006a64 <__ieee754_pow+0x414>
 8006a58:	4bd4      	ldr	r3, [pc, #848]	; (8006dac <__ieee754_pow+0x75c>)
 8006a5a:	f7f9 fdcd 	bl	80005f8 <__aeabi_dmul>
 8006a5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006a62:	460c      	mov	r4, r1
 8006a64:	1523      	asrs	r3, r4, #20
 8006a66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a6a:	4413      	add	r3, r2
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	4bd0      	ldr	r3, [pc, #832]	; (8006db0 <__ieee754_pow+0x760>)
 8006a70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006a74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a7e:	dd08      	ble.n	8006a92 <__ieee754_pow+0x442>
 8006a80:	4bcc      	ldr	r3, [pc, #816]	; (8006db4 <__ieee754_pow+0x764>)
 8006a82:	429c      	cmp	r4, r3
 8006a84:	f340 8162 	ble.w	8006d4c <__ieee754_pow+0x6fc>
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	9305      	str	r3, [sp, #20]
 8006a8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006a92:	2400      	movs	r4, #0
 8006a94:	00e3      	lsls	r3, r4, #3
 8006a96:	9307      	str	r3, [sp, #28]
 8006a98:	4bc7      	ldr	r3, [pc, #796]	; (8006db8 <__ieee754_pow+0x768>)
 8006a9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a9e:	ed93 7b00 	vldr	d7, [r3]
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	ec53 2b17 	vmov	r2, r3, d7
 8006aa8:	eeb0 9a47 	vmov.f32	s18, s14
 8006aac:	eef0 9a67 	vmov.f32	s19, s15
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	f7f9 fbe9 	bl	8000288 <__aeabi_dsub>
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	4606      	mov	r6, r0
 8006aba:	460f      	mov	r7, r1
 8006abc:	462b      	mov	r3, r5
 8006abe:	ec51 0b19 	vmov	r0, r1, d9
 8006ac2:	f7f9 fbe3 	bl	800028c <__adddf3>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	2000      	movs	r0, #0
 8006acc:	49bb      	ldr	r1, [pc, #748]	; (8006dbc <__ieee754_pow+0x76c>)
 8006ace:	f7f9 febd 	bl	800084c <__aeabi_ddiv>
 8006ad2:	ec41 0b1a 	vmov	d10, r0, r1
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4630      	mov	r0, r6
 8006adc:	4639      	mov	r1, r7
 8006ade:	f7f9 fd8b 	bl	80005f8 <__aeabi_dmul>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006aee:	46ab      	mov	fp, r5
 8006af0:	106d      	asrs	r5, r5, #1
 8006af2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006af6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006afa:	ec41 0b18 	vmov	d8, r0, r1
 8006afe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006b02:	2200      	movs	r2, #0
 8006b04:	4640      	mov	r0, r8
 8006b06:	4649      	mov	r1, r9
 8006b08:	4614      	mov	r4, r2
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	f7f9 fd74 	bl	80005f8 <__aeabi_dmul>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fbb6 	bl	8000288 <__aeabi_dsub>
 8006b1c:	ec53 2b19 	vmov	r2, r3, d9
 8006b20:	4606      	mov	r6, r0
 8006b22:	460f      	mov	r7, r1
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fbae 	bl	8000288 <__aeabi_dsub>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4650      	mov	r0, sl
 8006b32:	4659      	mov	r1, fp
 8006b34:	f7f9 fba8 	bl	8000288 <__aeabi_dsub>
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 fb9e 	bl	8000288 <__aeabi_dsub>
 8006b4c:	ec53 2b1a 	vmov	r2, r3, d10
 8006b50:	f7f9 fd52 	bl	80005f8 <__aeabi_dmul>
 8006b54:	ec53 2b18 	vmov	r2, r3, d8
 8006b58:	ec41 0b19 	vmov	d9, r0, r1
 8006b5c:	ec51 0b18 	vmov	r0, r1, d8
 8006b60:	f7f9 fd4a 	bl	80005f8 <__aeabi_dmul>
 8006b64:	a37c      	add	r3, pc, #496	; (adr r3, 8006d58 <__ieee754_pow+0x708>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	f7f9 fd43 	bl	80005f8 <__aeabi_dmul>
 8006b72:	a37b      	add	r3, pc, #492	; (adr r3, 8006d60 <__ieee754_pow+0x710>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fb88 	bl	800028c <__adddf3>
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	462b      	mov	r3, r5
 8006b80:	f7f9 fd3a 	bl	80005f8 <__aeabi_dmul>
 8006b84:	a378      	add	r3, pc, #480	; (adr r3, 8006d68 <__ieee754_pow+0x718>)
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	f7f9 fb7f 	bl	800028c <__adddf3>
 8006b8e:	4622      	mov	r2, r4
 8006b90:	462b      	mov	r3, r5
 8006b92:	f7f9 fd31 	bl	80005f8 <__aeabi_dmul>
 8006b96:	a376      	add	r3, pc, #472	; (adr r3, 8006d70 <__ieee754_pow+0x720>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f7f9 fb76 	bl	800028c <__adddf3>
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	462b      	mov	r3, r5
 8006ba4:	f7f9 fd28 	bl	80005f8 <__aeabi_dmul>
 8006ba8:	a373      	add	r3, pc, #460	; (adr r3, 8006d78 <__ieee754_pow+0x728>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 fb6d 	bl	800028c <__adddf3>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	f7f9 fd1f 	bl	80005f8 <__aeabi_dmul>
 8006bba:	a371      	add	r3, pc, #452	; (adr r3, 8006d80 <__ieee754_pow+0x730>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fb64 	bl	800028c <__adddf3>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	460f      	mov	r7, r1
 8006bca:	462b      	mov	r3, r5
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 fd12 	bl	80005f8 <__aeabi_dmul>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f7f9 fd0c 	bl	80005f8 <__aeabi_dmul>
 8006be0:	4642      	mov	r2, r8
 8006be2:	4604      	mov	r4, r0
 8006be4:	460d      	mov	r5, r1
 8006be6:	464b      	mov	r3, r9
 8006be8:	ec51 0b18 	vmov	r0, r1, d8
 8006bec:	f7f9 fb4e 	bl	800028c <__adddf3>
 8006bf0:	ec53 2b19 	vmov	r2, r3, d9
 8006bf4:	f7f9 fd00 	bl	80005f8 <__aeabi_dmul>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	f7f9 fb46 	bl	800028c <__adddf3>
 8006c00:	4642      	mov	r2, r8
 8006c02:	4682      	mov	sl, r0
 8006c04:	468b      	mov	fp, r1
 8006c06:	464b      	mov	r3, r9
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 fcf4 	bl	80005f8 <__aeabi_dmul>
 8006c10:	4b6b      	ldr	r3, [pc, #428]	; (8006dc0 <__ieee754_pow+0x770>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	4606      	mov	r6, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	f7f9 fb38 	bl	800028c <__adddf3>
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	465b      	mov	r3, fp
 8006c20:	f7f9 fb34 	bl	800028c <__adddf3>
 8006c24:	2000      	movs	r0, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	460d      	mov	r5, r1
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4640      	mov	r0, r8
 8006c30:	4649      	mov	r1, r9
 8006c32:	f7f9 fce1 	bl	80005f8 <__aeabi_dmul>
 8006c36:	4b62      	ldr	r3, [pc, #392]	; (8006dc0 <__ieee754_pow+0x770>)
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 fb21 	bl	8000288 <__aeabi_dsub>
 8006c46:	4632      	mov	r2, r6
 8006c48:	463b      	mov	r3, r7
 8006c4a:	f7f9 fb1d 	bl	8000288 <__aeabi_dsub>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4650      	mov	r0, sl
 8006c54:	4659      	mov	r1, fp
 8006c56:	f7f9 fb17 	bl	8000288 <__aeabi_dsub>
 8006c5a:	ec53 2b18 	vmov	r2, r3, d8
 8006c5e:	f7f9 fccb 	bl	80005f8 <__aeabi_dmul>
 8006c62:	4622      	mov	r2, r4
 8006c64:	4606      	mov	r6, r0
 8006c66:	460f      	mov	r7, r1
 8006c68:	462b      	mov	r3, r5
 8006c6a:	ec51 0b19 	vmov	r0, r1, d9
 8006c6e:	f7f9 fcc3 	bl	80005f8 <__aeabi_dmul>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fb07 	bl	800028c <__adddf3>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4640      	mov	r0, r8
 8006c88:	4649      	mov	r1, r9
 8006c8a:	f7f9 faff 	bl	800028c <__adddf3>
 8006c8e:	a33e      	add	r3, pc, #248	; (adr r3, 8006d88 <__ieee754_pow+0x738>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	2000      	movs	r0, #0
 8006c96:	4604      	mov	r4, r0
 8006c98:	460d      	mov	r5, r1
 8006c9a:	f7f9 fcad 	bl	80005f8 <__aeabi_dmul>
 8006c9e:	4642      	mov	r2, r8
 8006ca0:	ec41 0b18 	vmov	d8, r0, r1
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 faed 	bl	8000288 <__aeabi_dsub>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	f7f9 fae7 	bl	8000288 <__aeabi_dsub>
 8006cba:	a335      	add	r3, pc, #212	; (adr r3, 8006d90 <__ieee754_pow+0x740>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fc9a 	bl	80005f8 <__aeabi_dmul>
 8006cc4:	a334      	add	r3, pc, #208	; (adr r3, 8006d98 <__ieee754_pow+0x748>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 fc91 	bl	80005f8 <__aeabi_dmul>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4630      	mov	r0, r6
 8006cdc:	4639      	mov	r1, r7
 8006cde:	f7f9 fad5 	bl	800028c <__adddf3>
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	4b37      	ldr	r3, [pc, #220]	; (8006dc4 <__ieee754_pow+0x774>)
 8006ce6:	4413      	add	r3, r2
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 face 	bl	800028c <__adddf3>
 8006cf0:	4682      	mov	sl, r0
 8006cf2:	9805      	ldr	r0, [sp, #20]
 8006cf4:	468b      	mov	fp, r1
 8006cf6:	f7f9 fc15 	bl	8000524 <__aeabi_i2d>
 8006cfa:	9a07      	ldr	r2, [sp, #28]
 8006cfc:	4b32      	ldr	r3, [pc, #200]	; (8006dc8 <__ieee754_pow+0x778>)
 8006cfe:	4413      	add	r3, r2
 8006d00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d04:	4606      	mov	r6, r0
 8006d06:	460f      	mov	r7, r1
 8006d08:	4652      	mov	r2, sl
 8006d0a:	465b      	mov	r3, fp
 8006d0c:	ec51 0b18 	vmov	r0, r1, d8
 8006d10:	f7f9 fabc 	bl	800028c <__adddf3>
 8006d14:	4642      	mov	r2, r8
 8006d16:	464b      	mov	r3, r9
 8006d18:	f7f9 fab8 	bl	800028c <__adddf3>
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	f7f9 fab4 	bl	800028c <__adddf3>
 8006d24:	2000      	movs	r0, #0
 8006d26:	4632      	mov	r2, r6
 8006d28:	463b      	mov	r3, r7
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	f7f9 faab 	bl	8000288 <__aeabi_dsub>
 8006d32:	4642      	mov	r2, r8
 8006d34:	464b      	mov	r3, r9
 8006d36:	f7f9 faa7 	bl	8000288 <__aeabi_dsub>
 8006d3a:	ec53 2b18 	vmov	r2, r3, d8
 8006d3e:	f7f9 faa3 	bl	8000288 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4650      	mov	r0, sl
 8006d48:	4659      	mov	r1, fp
 8006d4a:	e610      	b.n	800696e <__ieee754_pow+0x31e>
 8006d4c:	2401      	movs	r4, #1
 8006d4e:	e6a1      	b.n	8006a94 <__ieee754_pow+0x444>
 8006d50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006da0 <__ieee754_pow+0x750>
 8006d54:	e617      	b.n	8006986 <__ieee754_pow+0x336>
 8006d56:	bf00      	nop
 8006d58:	4a454eef 	.word	0x4a454eef
 8006d5c:	3fca7e28 	.word	0x3fca7e28
 8006d60:	93c9db65 	.word	0x93c9db65
 8006d64:	3fcd864a 	.word	0x3fcd864a
 8006d68:	a91d4101 	.word	0xa91d4101
 8006d6c:	3fd17460 	.word	0x3fd17460
 8006d70:	518f264d 	.word	0x518f264d
 8006d74:	3fd55555 	.word	0x3fd55555
 8006d78:	db6fabff 	.word	0xdb6fabff
 8006d7c:	3fdb6db6 	.word	0x3fdb6db6
 8006d80:	33333303 	.word	0x33333303
 8006d84:	3fe33333 	.word	0x3fe33333
 8006d88:	e0000000 	.word	0xe0000000
 8006d8c:	3feec709 	.word	0x3feec709
 8006d90:	dc3a03fd 	.word	0xdc3a03fd
 8006d94:	3feec709 	.word	0x3feec709
 8006d98:	145b01f5 	.word	0x145b01f5
 8006d9c:	be3e2fe0 	.word	0xbe3e2fe0
 8006da0:	00000000 	.word	0x00000000
 8006da4:	3ff00000 	.word	0x3ff00000
 8006da8:	7ff00000 	.word	0x7ff00000
 8006dac:	43400000 	.word	0x43400000
 8006db0:	0003988e 	.word	0x0003988e
 8006db4:	000bb679 	.word	0x000bb679
 8006db8:	08007440 	.word	0x08007440
 8006dbc:	3ff00000 	.word	0x3ff00000
 8006dc0:	40080000 	.word	0x40080000
 8006dc4:	08007460 	.word	0x08007460
 8006dc8:	08007450 	.word	0x08007450
 8006dcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80070a4 <__ieee754_pow+0xa54>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	f7f9 fa59 	bl	800028c <__adddf3>
 8006dda:	4622      	mov	r2, r4
 8006ddc:	ec41 0b1a 	vmov	d10, r0, r1
 8006de0:	462b      	mov	r3, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	f7f9 fa4f 	bl	8000288 <__aeabi_dsub>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	ec51 0b1a 	vmov	r0, r1, d10
 8006df2:	f7f9 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f47f ae04 	bne.w	8006a04 <__ieee754_pow+0x3b4>
 8006dfc:	4aa4      	ldr	r2, [pc, #656]	; (8007090 <__ieee754_pow+0xa40>)
 8006dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f340 8108 	ble.w	8007018 <__ieee754_pow+0x9c8>
 8006e08:	151b      	asrs	r3, r3, #20
 8006e0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006e0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006e12:	fa4a f303 	asr.w	r3, sl, r3
 8006e16:	445b      	add	r3, fp
 8006e18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006e1c:	4e9d      	ldr	r6, [pc, #628]	; (8007094 <__ieee754_pow+0xa44>)
 8006e1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006e22:	4116      	asrs	r6, r2
 8006e24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006e28:	2000      	movs	r0, #0
 8006e2a:	ea23 0106 	bic.w	r1, r3, r6
 8006e2e:	f1c2 0214 	rsb	r2, r2, #20
 8006e32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006e36:	fa4a fa02 	asr.w	sl, sl, r2
 8006e3a:	f1bb 0f00 	cmp.w	fp, #0
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4620      	mov	r0, r4
 8006e44:	4629      	mov	r1, r5
 8006e46:	bfb8      	it	lt
 8006e48:	f1ca 0a00 	rsblt	sl, sl, #0
 8006e4c:	f7f9 fa1c 	bl	8000288 <__aeabi_dsub>
 8006e50:	ec41 0b19 	vmov	d9, r0, r1
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	ec51 0b19 	vmov	r0, r1, d9
 8006e5c:	f7f9 fa16 	bl	800028c <__adddf3>
 8006e60:	a37b      	add	r3, pc, #492	; (adr r3, 8007050 <__ieee754_pow+0xa00>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	2000      	movs	r0, #0
 8006e68:	4604      	mov	r4, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	f7f9 fbc4 	bl	80005f8 <__aeabi_dmul>
 8006e70:	ec53 2b19 	vmov	r2, r3, d9
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	4620      	mov	r0, r4
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	f7f9 fa04 	bl	8000288 <__aeabi_dsub>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4640      	mov	r0, r8
 8006e86:	4649      	mov	r1, r9
 8006e88:	f7f9 f9fe 	bl	8000288 <__aeabi_dsub>
 8006e8c:	a372      	add	r3, pc, #456	; (adr r3, 8007058 <__ieee754_pow+0xa08>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	a372      	add	r3, pc, #456	; (adr r3, 8007060 <__ieee754_pow+0xa10>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4689      	mov	r9, r1
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	f7f9 fba8 	bl	80005f8 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 f9ec 	bl	800028c <__adddf3>
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 f9e4 	bl	800028c <__adddf3>
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	4680      	mov	r8, r0
 8006eca:	4689      	mov	r9, r1
 8006ecc:	f7f9 f9dc 	bl	8000288 <__aeabi_dsub>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	f7f9 f9d6 	bl	8000288 <__aeabi_dsub>
 8006edc:	4642      	mov	r2, r8
 8006ede:	4606      	mov	r6, r0
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f7f9 fb86 	bl	80005f8 <__aeabi_dmul>
 8006eec:	a35e      	add	r3, pc, #376	; (adr r3, 8007068 <__ieee754_pow+0xa18>)
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	f7f9 fb7f 	bl	80005f8 <__aeabi_dmul>
 8006efa:	a35d      	add	r3, pc, #372	; (adr r3, 8007070 <__ieee754_pow+0xa20>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 f9c2 	bl	8000288 <__aeabi_dsub>
 8006f04:	4622      	mov	r2, r4
 8006f06:	462b      	mov	r3, r5
 8006f08:	f7f9 fb76 	bl	80005f8 <__aeabi_dmul>
 8006f0c:	a35a      	add	r3, pc, #360	; (adr r3, 8007078 <__ieee754_pow+0xa28>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f7f9 f9bb 	bl	800028c <__adddf3>
 8006f16:	4622      	mov	r2, r4
 8006f18:	462b      	mov	r3, r5
 8006f1a:	f7f9 fb6d 	bl	80005f8 <__aeabi_dmul>
 8006f1e:	a358      	add	r3, pc, #352	; (adr r3, 8007080 <__ieee754_pow+0xa30>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f7f9 f9b0 	bl	8000288 <__aeabi_dsub>
 8006f28:	4622      	mov	r2, r4
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	f7f9 fb64 	bl	80005f8 <__aeabi_dmul>
 8006f30:	a355      	add	r3, pc, #340	; (adr r3, 8007088 <__ieee754_pow+0xa38>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 f9a9 	bl	800028c <__adddf3>
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	f7f9 fb5b 	bl	80005f8 <__aeabi_dmul>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4640      	mov	r0, r8
 8006f48:	4649      	mov	r1, r9
 8006f4a:	f7f9 f99d 	bl	8000288 <__aeabi_dsub>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	ec41 0b19 	vmov	d9, r0, r1
 8006f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f7f9 f98c 	bl	8000288 <__aeabi_dsub>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	ec51 0b19 	vmov	r0, r1, d9
 8006f78:	f7f9 fc68 	bl	800084c <__aeabi_ddiv>
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	463b      	mov	r3, r7
 8006f84:	4640      	mov	r0, r8
 8006f86:	4649      	mov	r1, r9
 8006f88:	f7f9 fb36 	bl	80005f8 <__aeabi_dmul>
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	463b      	mov	r3, r7
 8006f90:	f7f9 f97c 	bl	800028c <__adddf3>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	f7f9 f974 	bl	8000288 <__aeabi_dsub>
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	f7f9 f970 	bl	8000288 <__aeabi_dsub>
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4602      	mov	r2, r0
 8006fac:	493a      	ldr	r1, [pc, #232]	; (8007098 <__ieee754_pow+0xa48>)
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7f9 f96a 	bl	8000288 <__aeabi_dsub>
 8006fb4:	ec41 0b10 	vmov	d0, r0, r1
 8006fb8:	ee10 3a90 	vmov	r3, s1
 8006fbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc4:	da2b      	bge.n	800701e <__ieee754_pow+0x9ce>
 8006fc6:	4650      	mov	r0, sl
 8006fc8:	f000 f966 	bl	8007298 <scalbn>
 8006fcc:	ec51 0b10 	vmov	r0, r1, d0
 8006fd0:	ec53 2b18 	vmov	r2, r3, d8
 8006fd4:	f7ff bbed 	b.w	80067b2 <__ieee754_pow+0x162>
 8006fd8:	4b30      	ldr	r3, [pc, #192]	; (800709c <__ieee754_pow+0xa4c>)
 8006fda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006fde:	429e      	cmp	r6, r3
 8006fe0:	f77f af0c 	ble.w	8006dfc <__ieee754_pow+0x7ac>
 8006fe4:	4b2e      	ldr	r3, [pc, #184]	; (80070a0 <__ieee754_pow+0xa50>)
 8006fe6:	440b      	add	r3, r1
 8006fe8:	4303      	orrs	r3, r0
 8006fea:	d009      	beq.n	8007000 <__ieee754_pow+0x9b0>
 8006fec:	ec51 0b18 	vmov	r0, r1, d8
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f7f9 fd72 	bl	8000adc <__aeabi_dcmplt>
 8006ff8:	3800      	subs	r0, #0
 8006ffa:	bf18      	it	ne
 8006ffc:	2001      	movne	r0, #1
 8006ffe:	e447      	b.n	8006890 <__ieee754_pow+0x240>
 8007000:	4622      	mov	r2, r4
 8007002:	462b      	mov	r3, r5
 8007004:	f7f9 f940 	bl	8000288 <__aeabi_dsub>
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	f7f9 fd7a 	bl	8000b04 <__aeabi_dcmpge>
 8007010:	2800      	cmp	r0, #0
 8007012:	f43f aef3 	beq.w	8006dfc <__ieee754_pow+0x7ac>
 8007016:	e7e9      	b.n	8006fec <__ieee754_pow+0x99c>
 8007018:	f04f 0a00 	mov.w	sl, #0
 800701c:	e71a      	b.n	8006e54 <__ieee754_pow+0x804>
 800701e:	ec51 0b10 	vmov	r0, r1, d0
 8007022:	4619      	mov	r1, r3
 8007024:	e7d4      	b.n	8006fd0 <__ieee754_pow+0x980>
 8007026:	491c      	ldr	r1, [pc, #112]	; (8007098 <__ieee754_pow+0xa48>)
 8007028:	2000      	movs	r0, #0
 800702a:	f7ff bb30 	b.w	800668e <__ieee754_pow+0x3e>
 800702e:	2000      	movs	r0, #0
 8007030:	2100      	movs	r1, #0
 8007032:	f7ff bb2c 	b.w	800668e <__ieee754_pow+0x3e>
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	f7ff bb28 	b.w	800668e <__ieee754_pow+0x3e>
 800703e:	9204      	str	r2, [sp, #16]
 8007040:	f7ff bb7a 	b.w	8006738 <__ieee754_pow+0xe8>
 8007044:	2300      	movs	r3, #0
 8007046:	f7ff bb64 	b.w	8006712 <__ieee754_pow+0xc2>
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w
 8007050:	00000000 	.word	0x00000000
 8007054:	3fe62e43 	.word	0x3fe62e43
 8007058:	fefa39ef 	.word	0xfefa39ef
 800705c:	3fe62e42 	.word	0x3fe62e42
 8007060:	0ca86c39 	.word	0x0ca86c39
 8007064:	be205c61 	.word	0xbe205c61
 8007068:	72bea4d0 	.word	0x72bea4d0
 800706c:	3e663769 	.word	0x3e663769
 8007070:	c5d26bf1 	.word	0xc5d26bf1
 8007074:	3ebbbd41 	.word	0x3ebbbd41
 8007078:	af25de2c 	.word	0xaf25de2c
 800707c:	3f11566a 	.word	0x3f11566a
 8007080:	16bebd93 	.word	0x16bebd93
 8007084:	3f66c16c 	.word	0x3f66c16c
 8007088:	5555553e 	.word	0x5555553e
 800708c:	3fc55555 	.word	0x3fc55555
 8007090:	3fe00000 	.word	0x3fe00000
 8007094:	000fffff 	.word	0x000fffff
 8007098:	3ff00000 	.word	0x3ff00000
 800709c:	4090cbff 	.word	0x4090cbff
 80070a0:	3f6f3400 	.word	0x3f6f3400
 80070a4:	652b82fe 	.word	0x652b82fe
 80070a8:	3c971547 	.word	0x3c971547

080070ac <__ieee754_sqrt>:
 80070ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b0:	ec55 4b10 	vmov	r4, r5, d0
 80070b4:	4e55      	ldr	r6, [pc, #340]	; (800720c <__ieee754_sqrt+0x160>)
 80070b6:	43ae      	bics	r6, r5
 80070b8:	ee10 0a10 	vmov	r0, s0
 80070bc:	ee10 3a10 	vmov	r3, s0
 80070c0:	462a      	mov	r2, r5
 80070c2:	4629      	mov	r1, r5
 80070c4:	d110      	bne.n	80070e8 <__ieee754_sqrt+0x3c>
 80070c6:	ee10 2a10 	vmov	r2, s0
 80070ca:	462b      	mov	r3, r5
 80070cc:	f7f9 fa94 	bl	80005f8 <__aeabi_dmul>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f7f9 f8d8 	bl	800028c <__adddf3>
 80070dc:	4604      	mov	r4, r0
 80070de:	460d      	mov	r5, r1
 80070e0:	ec45 4b10 	vmov	d0, r4, r5
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	dc10      	bgt.n	800710e <__ieee754_sqrt+0x62>
 80070ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070f0:	4330      	orrs	r0, r6
 80070f2:	d0f5      	beq.n	80070e0 <__ieee754_sqrt+0x34>
 80070f4:	b15d      	cbz	r5, 800710e <__ieee754_sqrt+0x62>
 80070f6:	ee10 2a10 	vmov	r2, s0
 80070fa:	462b      	mov	r3, r5
 80070fc:	ee10 0a10 	vmov	r0, s0
 8007100:	f7f9 f8c2 	bl	8000288 <__aeabi_dsub>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	f7f9 fba0 	bl	800084c <__aeabi_ddiv>
 800710c:	e7e6      	b.n	80070dc <__ieee754_sqrt+0x30>
 800710e:	1512      	asrs	r2, r2, #20
 8007110:	d074      	beq.n	80071fc <__ieee754_sqrt+0x150>
 8007112:	07d4      	lsls	r4, r2, #31
 8007114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007118:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800711c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007120:	bf5e      	ittt	pl
 8007122:	0fda      	lsrpl	r2, r3, #31
 8007124:	005b      	lslpl	r3, r3, #1
 8007126:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800712a:	2400      	movs	r4, #0
 800712c:	0fda      	lsrs	r2, r3, #31
 800712e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007132:	107f      	asrs	r7, r7, #1
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	2516      	movs	r5, #22
 8007138:	4620      	mov	r0, r4
 800713a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800713e:	1886      	adds	r6, r0, r2
 8007140:	428e      	cmp	r6, r1
 8007142:	bfde      	ittt	le
 8007144:	1b89      	suble	r1, r1, r6
 8007146:	18b0      	addle	r0, r6, r2
 8007148:	18a4      	addle	r4, r4, r2
 800714a:	0049      	lsls	r1, r1, #1
 800714c:	3d01      	subs	r5, #1
 800714e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007152:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800715a:	d1f0      	bne.n	800713e <__ieee754_sqrt+0x92>
 800715c:	462a      	mov	r2, r5
 800715e:	f04f 0e20 	mov.w	lr, #32
 8007162:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007166:	4281      	cmp	r1, r0
 8007168:	eb06 0c05 	add.w	ip, r6, r5
 800716c:	dc02      	bgt.n	8007174 <__ieee754_sqrt+0xc8>
 800716e:	d113      	bne.n	8007198 <__ieee754_sqrt+0xec>
 8007170:	459c      	cmp	ip, r3
 8007172:	d811      	bhi.n	8007198 <__ieee754_sqrt+0xec>
 8007174:	f1bc 0f00 	cmp.w	ip, #0
 8007178:	eb0c 0506 	add.w	r5, ip, r6
 800717c:	da43      	bge.n	8007206 <__ieee754_sqrt+0x15a>
 800717e:	2d00      	cmp	r5, #0
 8007180:	db41      	blt.n	8007206 <__ieee754_sqrt+0x15a>
 8007182:	f100 0801 	add.w	r8, r0, #1
 8007186:	1a09      	subs	r1, r1, r0
 8007188:	459c      	cmp	ip, r3
 800718a:	bf88      	it	hi
 800718c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8007190:	eba3 030c 	sub.w	r3, r3, ip
 8007194:	4432      	add	r2, r6
 8007196:	4640      	mov	r0, r8
 8007198:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800719c:	f1be 0e01 	subs.w	lr, lr, #1
 80071a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80071a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071ac:	d1db      	bne.n	8007166 <__ieee754_sqrt+0xba>
 80071ae:	430b      	orrs	r3, r1
 80071b0:	d006      	beq.n	80071c0 <__ieee754_sqrt+0x114>
 80071b2:	1c50      	adds	r0, r2, #1
 80071b4:	bf13      	iteet	ne
 80071b6:	3201      	addne	r2, #1
 80071b8:	3401      	addeq	r4, #1
 80071ba:	4672      	moveq	r2, lr
 80071bc:	f022 0201 	bicne.w	r2, r2, #1
 80071c0:	1063      	asrs	r3, r4, #1
 80071c2:	0852      	lsrs	r2, r2, #1
 80071c4:	07e1      	lsls	r1, r4, #31
 80071c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071ce:	bf48      	it	mi
 80071d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80071d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80071d8:	4614      	mov	r4, r2
 80071da:	e781      	b.n	80070e0 <__ieee754_sqrt+0x34>
 80071dc:	0ad9      	lsrs	r1, r3, #11
 80071de:	3815      	subs	r0, #21
 80071e0:	055b      	lsls	r3, r3, #21
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d0fa      	beq.n	80071dc <__ieee754_sqrt+0x130>
 80071e6:	02cd      	lsls	r5, r1, #11
 80071e8:	d50a      	bpl.n	8007200 <__ieee754_sqrt+0x154>
 80071ea:	f1c2 0420 	rsb	r4, r2, #32
 80071ee:	fa23 f404 	lsr.w	r4, r3, r4
 80071f2:	1e55      	subs	r5, r2, #1
 80071f4:	4093      	lsls	r3, r2
 80071f6:	4321      	orrs	r1, r4
 80071f8:	1b42      	subs	r2, r0, r5
 80071fa:	e78a      	b.n	8007112 <__ieee754_sqrt+0x66>
 80071fc:	4610      	mov	r0, r2
 80071fe:	e7f0      	b.n	80071e2 <__ieee754_sqrt+0x136>
 8007200:	0049      	lsls	r1, r1, #1
 8007202:	3201      	adds	r2, #1
 8007204:	e7ef      	b.n	80071e6 <__ieee754_sqrt+0x13a>
 8007206:	4680      	mov	r8, r0
 8007208:	e7bd      	b.n	8007186 <__ieee754_sqrt+0xda>
 800720a:	bf00      	nop
 800720c:	7ff00000 	.word	0x7ff00000

08007210 <with_errno>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	460d      	mov	r5, r1
 8007216:	4616      	mov	r6, r2
 8007218:	f7fe fcfa 	bl	8005c10 <__errno>
 800721c:	4629      	mov	r1, r5
 800721e:	6006      	str	r6, [r0, #0]
 8007220:	4620      	mov	r0, r4
 8007222:	bd70      	pop	{r4, r5, r6, pc}

08007224 <xflow>:
 8007224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007226:	4614      	mov	r4, r2
 8007228:	461d      	mov	r5, r3
 800722a:	b108      	cbz	r0, 8007230 <xflow+0xc>
 800722c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007230:	e9cd 2300 	strd	r2, r3, [sp]
 8007234:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007238:	4620      	mov	r0, r4
 800723a:	4629      	mov	r1, r5
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	2222      	movs	r2, #34	; 0x22
 8007242:	b003      	add	sp, #12
 8007244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007248:	f7ff bfe2 	b.w	8007210 <with_errno>

0800724c <__math_uflow>:
 800724c:	b508      	push	{r3, lr}
 800724e:	2200      	movs	r2, #0
 8007250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007254:	f7ff ffe6 	bl	8007224 <xflow>
 8007258:	ec41 0b10 	vmov	d0, r0, r1
 800725c:	bd08      	pop	{r3, pc}

0800725e <__math_oflow>:
 800725e:	b508      	push	{r3, lr}
 8007260:	2200      	movs	r2, #0
 8007262:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007266:	f7ff ffdd 	bl	8007224 <xflow>
 800726a:	ec41 0b10 	vmov	d0, r0, r1
 800726e:	bd08      	pop	{r3, pc}

08007270 <fabs>:
 8007270:	ec51 0b10 	vmov	r0, r1, d0
 8007274:	ee10 2a10 	vmov	r2, s0
 8007278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800727c:	ec43 2b10 	vmov	d0, r2, r3
 8007280:	4770      	bx	lr

08007282 <finite>:
 8007282:	b082      	sub	sp, #8
 8007284:	ed8d 0b00 	vstr	d0, [sp]
 8007288:	9801      	ldr	r0, [sp, #4]
 800728a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800728e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007292:	0fc0      	lsrs	r0, r0, #31
 8007294:	b002      	add	sp, #8
 8007296:	4770      	bx	lr

08007298 <scalbn>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	ec55 4b10 	vmov	r4, r5, d0
 800729e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80072a2:	4606      	mov	r6, r0
 80072a4:	462b      	mov	r3, r5
 80072a6:	b99a      	cbnz	r2, 80072d0 <scalbn+0x38>
 80072a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072ac:	4323      	orrs	r3, r4
 80072ae:	d036      	beq.n	800731e <scalbn+0x86>
 80072b0:	4b39      	ldr	r3, [pc, #228]	; (8007398 <scalbn+0x100>)
 80072b2:	4629      	mov	r1, r5
 80072b4:	ee10 0a10 	vmov	r0, s0
 80072b8:	2200      	movs	r2, #0
 80072ba:	f7f9 f99d 	bl	80005f8 <__aeabi_dmul>
 80072be:	4b37      	ldr	r3, [pc, #220]	; (800739c <scalbn+0x104>)
 80072c0:	429e      	cmp	r6, r3
 80072c2:	4604      	mov	r4, r0
 80072c4:	460d      	mov	r5, r1
 80072c6:	da10      	bge.n	80072ea <scalbn+0x52>
 80072c8:	a32b      	add	r3, pc, #172	; (adr r3, 8007378 <scalbn+0xe0>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	e03a      	b.n	8007346 <scalbn+0xae>
 80072d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80072d4:	428a      	cmp	r2, r1
 80072d6:	d10c      	bne.n	80072f2 <scalbn+0x5a>
 80072d8:	ee10 2a10 	vmov	r2, s0
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f8 ffd4 	bl	800028c <__adddf3>
 80072e4:	4604      	mov	r4, r0
 80072e6:	460d      	mov	r5, r1
 80072e8:	e019      	b.n	800731e <scalbn+0x86>
 80072ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80072ee:	460b      	mov	r3, r1
 80072f0:	3a36      	subs	r2, #54	; 0x36
 80072f2:	4432      	add	r2, r6
 80072f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80072f8:	428a      	cmp	r2, r1
 80072fa:	dd08      	ble.n	800730e <scalbn+0x76>
 80072fc:	2d00      	cmp	r5, #0
 80072fe:	a120      	add	r1, pc, #128	; (adr r1, 8007380 <scalbn+0xe8>)
 8007300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007304:	da1c      	bge.n	8007340 <scalbn+0xa8>
 8007306:	a120      	add	r1, pc, #128	; (adr r1, 8007388 <scalbn+0xf0>)
 8007308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800730c:	e018      	b.n	8007340 <scalbn+0xa8>
 800730e:	2a00      	cmp	r2, #0
 8007310:	dd08      	ble.n	8007324 <scalbn+0x8c>
 8007312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800731a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800731e:	ec45 4b10 	vmov	d0, r4, r5
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007328:	da19      	bge.n	800735e <scalbn+0xc6>
 800732a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800732e:	429e      	cmp	r6, r3
 8007330:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007334:	dd0a      	ble.n	800734c <scalbn+0xb4>
 8007336:	a112      	add	r1, pc, #72	; (adr r1, 8007380 <scalbn+0xe8>)
 8007338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e2      	bne.n	8007306 <scalbn+0x6e>
 8007340:	a30f      	add	r3, pc, #60	; (adr r3, 8007380 <scalbn+0xe8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f9 f957 	bl	80005f8 <__aeabi_dmul>
 800734a:	e7cb      	b.n	80072e4 <scalbn+0x4c>
 800734c:	a10a      	add	r1, pc, #40	; (adr r1, 8007378 <scalbn+0xe0>)
 800734e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0b8      	beq.n	80072c8 <scalbn+0x30>
 8007356:	a10e      	add	r1, pc, #56	; (adr r1, 8007390 <scalbn+0xf8>)
 8007358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800735c:	e7b4      	b.n	80072c8 <scalbn+0x30>
 800735e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007362:	3236      	adds	r2, #54	; 0x36
 8007364:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007368:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800736c:	4620      	mov	r0, r4
 800736e:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <scalbn+0x108>)
 8007370:	2200      	movs	r2, #0
 8007372:	e7e8      	b.n	8007346 <scalbn+0xae>
 8007374:	f3af 8000 	nop.w
 8007378:	c2f8f359 	.word	0xc2f8f359
 800737c:	01a56e1f 	.word	0x01a56e1f
 8007380:	8800759c 	.word	0x8800759c
 8007384:	7e37e43c 	.word	0x7e37e43c
 8007388:	8800759c 	.word	0x8800759c
 800738c:	fe37e43c 	.word	0xfe37e43c
 8007390:	c2f8f359 	.word	0xc2f8f359
 8007394:	81a56e1f 	.word	0x81a56e1f
 8007398:	43500000 	.word	0x43500000
 800739c:	ffff3cb0 	.word	0xffff3cb0
 80073a0:	3c900000 	.word	0x3c900000

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
